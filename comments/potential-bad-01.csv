Body
"Looks like we're the first ExternalAccess member to need this. I doing something wrong? 😄 "
"As it turns out, the issue why I added this code is still there. However, my assert was wrong, so I removed it."
"My plan was to not import or ship `Xamarin.Android.Aapt.targets` at all:

https://github.com/xamarin/xamarin-android/blob/02e86b5a6bbd6f938c16cf30bc709543565bb34e/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L364-L365

However this is wrong ☝️ , it needs to be checking `$(UsingAndroidNETSdk)` instead.

This should also work:

https://github.com/xamarin/xamarin-android/blob/91b66985704f1592b8c55819f7ff48d5e7353900/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L1160-L1161"
"> I was wrong. It is not the cause of the crash in 5185.

You mean #5203?"
"> Looks like the `managedReturns` aren't being used?

I'm wrong/wasn't interpreting things correctly.  They *are* being used.

I am thus *further* confused by `Microsoft.DotNet.ApiCompat.exe`.

Background: API-R adds [`CellInfo.getCellIdentity()`](https://developer.android.com/reference/android/telephony/CellInfo#getCellIdentity()), and [`CellInfoCdma.getCellIdentity()`](https://developer.android.com/reference/android/telephony/CellInfoCdma#getCellIdentity()) overrides it.

These do *not* have the same return type:

```java
public class CellInfo {
    public CellIdentity getCellIdentity();
}
public class CellInfoCdma extends CellInfo {
    public CellIdentityCdma getCellIdentity();
}
```

This is fine in Java because of covariant return types.  This *isn't* fine in C#, which is why we have those `metadata` rules so that `CellInfoCdma.CellIdentity` has the same property type as `CellInfo.CellIdentity`.

This in turn means that the property types changed, which is a compatibility break:

API-29:

```csharp
namespace Android.Telephony {
	public sealed partial class CellInfoCdma : Android.Telephony.CellInfo, Android.OS.IParcelable {
		public unsafe Android.Telephony.CellIdentityCdma CellIdentity {
...
	}
}
```

API-R:

```csharp
namespace Android.Telephony {
	public sealed partial class CellInfoCdma : Android.Telephony.CellInfo, Android.OS.IParcelable {
		public unsafe Android.Telephony.CellIdentity CellIdentity {
...
	}
}
```

In a One Mono.Android.dll World Order...I'm not sure how we actually support this.  We'll need to figure that out later.

In the meantime, we have a property type change between API-29/v10.0 and API-R/v10.0.99!  This is *clearly* a compatibility break!

...and it's exactly *this* type change which the `metadata` rules were performing.  Consequently the `managedReturn`s *are* being used.

Yet `Microsoft.DotNet.ApiCompat.exe` doesn't even mention this breakage:

https://github.com/xamarin/xamarin-android/blob/1a6fcff8a5a68bc2b53afa948176dea9681ff0d0/tests/api-compatibility/acceptable-breakages-v10.0.99.txt

Why aren't the altered property types of `CellInfoCdma.CellIdentity` mentioned at all?"
Oops! My commit title is wrong!
"I don't understand. The doc comment appears to be wrong, we were using this enum. Why are we obsoleteing it?"
"> 
> 
> Yea I'm cool with this. Maybe in the future, we should add a `index` property to the `duplicateTab` action, so we can use the `ShortcutActionDispatch` to handle this, but that's something to deal with in the far future.
> 
> Thanks!

Hey. Actually I didn't work to add index (it could be easier to implement) :smile:
The reason is a race, if there is some tab closed in meanwhile you might duplicate the wrong tab.
"
"OK this is like the second or third massive rebase I did on this. Please no more nits. If you don't see anything catastrophically wrong with this, I'd appreciate if we could get it merged as soon as I push up the rebase and we can iterate from here. Each rebase is very painful because of how big this is."
I think you got the comparison wrong: it should be the other way here (`kernelWidth * kernelHeight > (nuint) kernelWeights.Length)`
"this code is likely wrong in any sort of progression scenario.  you're editing the topmost buffer, not the buffer containing c#.  we shuold test this in a legacy razor case.  @github can likely help you with that."
"I may be wrong, but I think we try to leave things already there alone unless it causes an issue"
"Remind me - we normally expect this `StringBuilder` instance to be released unless something goes wrong during the format operation itself, correct? (Because if something fails during the format operation then _ToStringAndClear_ never gets called?)

I think the behavior here is sensible, just wanted to confirm my understanding. :)"
"Since we got this wrong, I recommend we augment the comment.

```suggestion
        // For Windows 7 we will use BCryptDeriveKeyPBKDF2. For Windows 8+ (seen as version 6.2.0) we will
        // use BCryptKeyDerivation since it has better performance.
```"
"I think this is still wrong. Since ""skip"" is 1, then ""size"" needs to be `chars.Length + 1`
Also, I think the way you had it before was more useful. Skip isn't always 1.
"
"useable is less frequently used spelling, but it is not wrong.

https://grammarhow.com/useable-or-usable/"
"Might be a dumb question, what does it mean when the JIT reloads a call target from memory?"
"`relativeFileName` is typed as `string`, so either this code is a noop or the type of `fsWatchDirectory` is wrong."
The emit here has the wrong runtime semantics.
problem went away when I made other changes. I could have been doing something wrong.
"@github I am completely unsure what class that should be in, and thought that was likely wrong.  Do you have a suggestion?  Would `Microsoft` or `Unnecessary` be a better fit?

**Edit:** Looking through other analyzers, it seems that Unnecessary is used for other issues that are somewhat related to this; I will change it to that if no one has a better choice.
"
"Yes, I'm purposefully changing the implementation behavior because it is currently inconsistent with VB implementation/capabilities for some declaration, so if you have code relying on this behavior then your code is wrong. That why I've exposed the WithoutBodies API.
"
"Sorry, I'm not sure I understand. Suggestion is not just about visual presentation. It is mutually exclusive from Error and Warning and can affect the user's build. Given the bulk of diagnostics that will be created in the suggestion category, the design team felt that there was enough critical mass to warrant a new severity.

FWIW, if you'd like to be involved in the design discussion around this, you're definitely welcome! However, a code review is probably not right place for this to happen.

**Edit**: the design notes indicate that I may be wrong about the decision of the design team that I mentioned above. Apologies for that! However, I don't remember us ever getting to consensus and there's been a lot of discussion since that meeting.
"
"@github this is a separate issue I think, but our calculation for the type of an annotated jsdoc rest parameter seems wrong. Or at least inconsistent with this error. Namely, we only pull the type from the jsdoc if it has a leading `...`, but then we pull the inner type node and wrap it in an array - producing `unknown[]` here. This error is fired if you don't make the inner type an array yourself, though, meaning the error indicates you only get rest types if you write `...unknown[]`, which then means the type we assign is actually `unknown[][]`, which is probably never what you wanted."
"wtf.... what on earth is this skip-while for?!  That's just crazy.  I'd much rather remove this code, and fix whatever issue it was trying to work around.
"
"This also seems wrong. The first two arguments should be skipped the first time around, and number is inferred from the third argument. Then we come back to visit all the lambdas, and T gets fixed to number. It should be fixed to number in all 3 lambdas, but looks like it only worked for the first two.
"
"This feels wrong.  'inlineSourceMap' effectively implies 'sourceMap'.
"
"Ok I've a wrong branch name for the PR :smile:
Let me close and re-open a new one with the correct branch name"
"Test failures look legit:
```
Assert.Equal() Failure\n          ↓ (pos 0)\nExpected: CN¥\nActual:   ¥\n          ↑ (pos 0)
Stack trace
   at System.Globalization.Tests.RegionInfoPropertyTests.CurrencySymbol()
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
```

```
Wrong currency English Name\nExpected: True\nActual:   False
Stack trace
   at System.Globalization.Tests.RegionInfoPropertyTests.MiscTest(Int32 lcid, Int32 geoId, String currencyEnglishName, String alternativeCurrencyEnglishName, String currencyNativeName, String threeLetterISORegionName, String threeLetterWindowsRegionName)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
```"
"> > > Would be nice if ReadOnlySpan span = ""text""; would also be optimized, since it's a much more convenient syntax for strings and would be analogous to the utf8 string feature.
> > 
> > 
> > What is it you'd hope it would do it's not already doing? [SharpLab](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aHunGAlGNgAmAeQB2AGwCeAZQAO2MQB4wAC2xQAfAwCy5ABQBKBgF5tAIgwwEGcwG4aAXyA==)
> 
> I thought the runtime materialized the string and created a span over it then, but it seems I was wrong despite the IL using `ldstr`.

Unfortunately that is what actually happens: [SharpLab](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACY8pJ0hgYQYG8aH+mjZqwBKMbABMA8gDsANgE8AygAdsMgDxgAFtigA+BgFlyACgCUDALyGARBhgIMtgNx8B9Jiy8AGY6QtrOwcnVxoAXyA===) (same indirect pointer is used for both methods)

Ideally the ROS would point directly to the string data from the binary, without materializing the string at all. To avoid data duplication between identical strings and ROS, it would need to point to the UserString heap, but that is probably not possible directly using Roslyn and should actually be handled by the runtime/JIT?"
"Basically checked the function boundary. Computed property name is a known issue.
Please let me know if anything wrong.
Thanks!"
"I think that addresses my commentary on the original ""it's now going to poll which is wrong"" comment, but as mentioned above, recreating a non-polling watcher may get expensive. It'd be worth testing (as it's not a huge change), but I can't claim that's ""the thing"" that would make the PR correct, compared to some other mechanism to address this problem."
"> Well we also need to consider size of build info before we start storing all these details .. so storing them isn’t practical esp when there are some huge projects with lots of package jsons

By this do you mean a single Project (one project in a solution of projects) can have up to 1 one package.json for each source directory under it's root? So the worst case scenario would be one package.json per source file?

Or is only one recognized package.json allowed per project?

I had thought it was 1 recognized per project (always adjacent to or above the project tsconfig), but I am aware I could be wrong.

IF it is only one package.json per project, then using the hash of the stringified collection of relevant properties would result in minimal impact on tsbuildinfo size."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20989,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>During our upgrade of the mono runtime we ran into a situation where `mono_pe_file_map` was being called as part of opening an image now on android. This function did not currently adhere to the filemap wrapper functions so the difference in data types being used by Unity caused crashes.

<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I see a lot work items stopping during execution and the console log doesn't tell what went wrong. @github/dnceng can you please take a look?

I.e. https://dev.azure.com/dnceng/public/_build/results?buildId=1220900&view=ms.vss-test-web.build-test-results-tab&runId=36394826&resultId=176021&paneView=debug"
"Is this intended as a short term workaround, or a long-term solution to the problem? As a short term workaround I'm happy to be more flexible how we approach it, but I'd also then want to understand how we might get to the long term solution.

In general I want it to be possible for the runtime to start sending an inline manifest for providers that we did not send a manifest for in the past. If the inline manifest currently being sent is wrong I understand not sending it until those issues can be corrected. Can you add more detail to this issue about what is problematic with the current manifest EventSource sends?"
"> @github could you please explain what you mean by
> 
> > It's also designed to be (partially) AOT friendly by making the core icall not generic.

At one point we had an invoke icall with a generic ```<T>``` return type, but that can't be AOTed (at least right now). So the current one returns object, which is inefficient (and kind of gross in terms of the burden it puts on both the caller and callee). We want strong types both for reliability and small, efficient codegen.

> 
> Also what's wrong with the existing `mono_wasm_invoke_js` ? (besides that it should not have `eval` and live in `EM_ASM_INT` macro, which I both fixed in my pending [PR](https://github.com/dotnet/runtime/pull/60504/files#diff-aeaa65b0a5528aaf1d5f89c138410cd639839359113f9c6a700efe2f9cf0e2caR479) .)

I could sit down and try to carefully enumerate why I think we need a new icall, but off the top of my head (this was a long design discussion that happened quite a while ago, so it's reasonable to revisit it):
* ```mono_wasm_invoke_js_with_args``` is not a tasteful API - the design does not have the traits of a good maintainable API. During the review for custom marshalers some of the same traits (weak types, boxing etc) that came up there as no-go apply to it as well.
* It's hard to optimize without compatibility breaks (for example, requiring that the method name be interned), and it's easy to hit performance pitfalls by using it in an inefficient way. Taking an object[] arg basically guarantees bad performance (the only real way to optimize the allocation out requires a ThreadLocal to be safe.)
* Many JS functions return undefined, and I think it's inappropriate to silently convert that to a null - it often indicates that you misunderstand the signature of the function you're calling and should be a failure.
* JS functions also happily accept extra arguments and sometimes will work if arguments are missing. This API makes it easy to do that, and I think we should be explicit about argument count. (The current icall doesn't enforce a callee argument count check... I could add that on the JS side if you want but I think there are cases where the callee won't have argument count data.)
* Aside from the general 'hard to optimize' problem I think making every single invoke create GC pressure is a very bad thing. We need to avoid it in the bindings.
* This new icall's signature is basically a cleaned up variation on ```mono_wasm_invoke_js_blazor``` (with the exception that the callee+caller need to collaborate to handle exceptions). I think it's best to ensure our API can efficiently be used to implement blazor, uno, etc.
* For ```mono_wasm_invoke_js```, the overhead of looking up the string literal is nonzero (especially because it's not required to be interned), and not being able to pass arguments requires the caller to do unclean things like shove arguments into globals (which is not a cheap thing to do via the current API... you'd have to do SetObjectProperty per-argument.)

My endgame for this is that we use source generators to create strongly-typed wrappers for specific methods (JS pinvoke, basically) that correctly and efficiently use this new icall under the hood. Later on those wrappers could transition to using dedicated JS and bypassing the icall machinery if necessary."
"Or actually I did something wrong, let me check..."
"@github Been deeply looking at `218913`:

With this PR, it creates a CSE for a double constant:

![image](https://user-images.githubusercontent.com/1278959/177669257-4c9e9bbd-db2b-4463-9ffc-7711d3dbf3ec.png)

But because constant propagation does not happen for CSEs, constant folding does not occur and an assertion prop for `OAK_EQUAL` gets missed.
![image](https://user-images.githubusercontent.com/1278959/177668960-31ed5359-f43f-453e-8c03-6f4558a45bb8.png)

I did some tinkering with assertion prop where I could get it to recognize that the cse variable represents a constant but I don't know if we want to do that. I didn't get a lot of diffs, though it would fix this regression when combined with this PR.

But, this is part of `coreclr_tests` which does crazy things; I probably wouldn't go further than we already have."
"@github definitely relevant - we can still change stuff here until the release.

> One reason to bubble up all exceptions (if at all possible) is that developers need to be alerted of problems. Like, if there is network flakiness or some server issue, it needs to show up in error reporting. Yes, it might not make a difference during normal execution but there is still something wrong if Close fails.

Right, and that's why these problems are logged - non-critical issues which don't hinder successful execution don't necessarily have to be raised as exceptions, which interrupt the actual user experience (e.g. fail a web request although the database operation did execute successfully).

A good comparison here is what happens when calling DbConnection.Dispose; it's supposed to close an open connection, but Dispose isn't supposed to surface any errors (in general in .NET).

"
"Just when you think ""iOS has no padding, so it will be easy"", Apple throws you a curve ball - or a rotten apple if you like. When you set padding to 0, iOS decides that you are wrong and will use the 0 for the left/right padding, but a 6 or 8 padding for top or bottom. So, to avoid this, we have to set a ""almost zero"" padding for the top/bottom.

But no worries, iOS does not respect this fraction as it seems to trim the value. So, not only can you not set 0, but it also doesn't respect half the non-zero values! "
"I think this should be an error now, if you can't start a circuit that means something is wrong. Interested in feedback in case I'm wrong, but I think I thought about all of the cases. "
"What should happen if someone wants to [`SetEndpoint`](https://github.com/dotnet/aspnetcore/blob/f45250ce5e423dad083fe99967a4d65782c5301e/src/Http/Http.Abstractions/src/Routing/EndpointHttpContextExtensions.cs#L34) without Routing Middleware. Do they need to provide the counter data as well?

Correct me if I'm wrong,  but Routing matcher only gives `RouteEndpoint` not `Endpoint`, and If we are going with  getting counters from Routing matcher, can we instead add a property to `RouteEndpoint` and since it's in the same assembly as there's no need to `InternalVisibleTo`."
"You are right, I think I copied this from the other comment parsing code, so they must be both wrong."
This error appears to be new and wrong. There is an implicit conversion here but no explicit conversion. #Resolved
">protected readonly bool? _isNullableIfReferenceType; [](start = 12, length = 52)

This feels wrong, this value is not delayed, we should be creating the right subclass instead. It looks like there is a Create factory that does that ```public static TypeSymbolWithAnnotations Create(TypeSymbol typeSymbol, bool? isNullableIfReferenceType)```  #Closed"
@github please get this in w/ your admin privs if the test failure is all that goes wrong in this build. No need to wait for Helix jobs for example and don't bother retrying the failed 'Test: Windows Server 2016 x64' job.
"Should we use Object.Equals to compare types instead? It looks like we are using ```SymbolEquivalenceComparer.Instance.Equals``` in several places in this file to compare types. The main point is - reference comparison is the wrong way. Object.Equals is better

---
In reply to: [178424954](https://github.com/dotnet/roslyn/pull/25362#discussion_r178424954) [](ancestors = 178424954,178424410,178423957,178423950,178423789)"
"@github why does the bot think all checks weren't successful❔ Is it just complaining that aspnetcore-quarantined-pr was skipped❔ Definitely nothing wrong in [build #20220208.6](https://dev.azure.com/dnceng/public/_build/results?buildId=1599643&view=results).

Then again, the pr/branches/ setting in the quarantined-pr.yml file is missing release/6.0. Could you please take care of that❔"
@github You've removed the wrong line. We want to observe in that method because it's a ValueTask.
"Yeah, this looks wrong."
"Good catch. That's wrong. "
"(I was under the impression that RQ names exist because CLR names are not sufficient enough, but if I'm more than happy to be wrong.)"
"This statement seems wrong. The above explicitly says that these are only unsuppressable errors, so anything elevated to an error wouldn't affect this check."
"Dumb question.  Why is this a new iop, as opposed to being a bit on IVariableDeclarationGroupOperation ? #Closed"
"> Are we filtering out non-static methods early as well?

No, but we probably should be at this stage. I'll add it here, and update the filtering method you mentioned below to ""prefer"" wrong calling conventions over static instance mismatches."
n/m.  i read this wrong. #Resolved
">// (11,22): error CS8867: No accessible copy constructor found in base type 'B'. [](start = 16, length = 80)

This is a noise. Previous error clearly describes what is wrong. #Closed"
"We *need* to find a way to delete the entire TerminalSettings project. We're holding COM wrong - all we have to do is implement the right interfaces, we only have an extra dll and runtimeclass because it was annoying to do otherwise with C++/WinRT.

From where I sit, it looks like..

![image](https://user-images.githubusercontent.com/189190/87474780-84369980-c5d8-11ea-92a7-58add01163ee.png)


"
"@github in the CI run, 15 coreclr tests have failed due to this added unreachable. So it seems it should be just a break here. I guess the fall through that was here before was benign, as the switch in the case below would end up in the default and nothing wrong would happen."
"In theory, we should be using a crazy high number for this... like 12.0.0.0 or something. This is a field that the app platform uses to determine what features an app is likely to want, and it is completely undocumented as to what versions unlock what features."
"> it is my bad that I started with deepFreeze here but I came to believe it is wrong to freeze objects that you ""don't own"", e.g the [function](https://github.com/microsoft/vscode/blob/1799e12d7ba8d94a5fa661d2ea2f2d6968e0b7a9/src/vs/workbench/api/common/extHostNotebookDocuments.ts#L31) that applies the change and emits the event should only shallow freeze the parts of the event it owns, like the event itself, cellChanges, contentChanges etc but not the notebook document or its cells. It's the responsibility of themselves to protect them from outside modifications (which may or may not be the case but that would be a different issue)

Yeah that makes more sense. Only freeze event properties, not the notebook itself."
"am i wrong, or is the Vb side of this very different from the c# side.  if so, why?"
Maybe we should fix that as well - @github: I don't see anything wrong with changing the annotation BindToMethodName to add [DAM(AllMethods)] on the methodType....
Looks like the indenting is wrong here :)
"The header ordering was wrong and ""Linux#mono"" was replaced by ""MacOS""."
"What does this actually fix? I trust that this is needed, I'm not sure I understand what was wrong before."
"> 
> 
> Mike's rationale matches mine for making it non-configurable. This doesn't need to be a knob that users can turn; I expect that if we _did_ make it a knob we would only ever see users use two things: ""turn it off"" and ""do the freakin' sane thing"" (which is ""it acts just like copy/paste of the selection would"").
> 
> We are possibly the most configurable terminal that exists (I kid, but maybe?). That doesn't mean that we need to make literally everything an option.
> 
> Down that road lies madness. Down that road lies ""I want the letter `A` to render differently on Tuesdays; perhaps you should have a `tuesdayAAppearance` config field?"". Down that road lies ""we have a search box, but users want to reclaim the 16 pixels taken up by the Case Sensitive button so _why not let them hide it_?"" and the 60,000 individual UI feature toggles that come out of that. It's mad. Mad!

@github - what's wrong with madness? Sanity is overrated after all :smile:
I see your point, and cannot argue (I worked on either drivers or cloud backend, so hardly know how it works with humans). 
Then please review: https://github.com/microsoft/terminal/pull/8521"
"@github : then what are we doing ""wrong""? https://github.com/xamarin/java.interop/blob/4277ac96eb4f2dd191e86f7bc1b72f7bdd4fbb0c/tests/Java.Interop-Tests/Java.Interop/JavaObjectTest.cs#L112-L129

We're allocating the ""to-be-finalized"" instance *on its own Thread*, and running `GC.Collect(); GC.WaitForPendingFinalizers()` *twice*, and the instance *isn't* being collected.

Do we need to add a `new object()` to the Thread to address:

```csharp
				// This means that the address of the first
				// object that would be allocated would be at the start of the tlab and
				// implicitly the end of the previous tlab (address which can be in use
				// when allocating on another thread, at checking if an object fits in
				// this other tlab). We allocate a new dummy object to avoid this type
				// of false pinning for most common cases.
```"
"> * Double-click word selection seems to treat the click and expansion coordinates as _buffer_ instead of _screen_ (resulting in the wrong range being selected)

I thought I might miss a few of these operations. But that should be an easy one to fix. I think it just needs a couple of `ScreenToBuffer` and `BufferToScreen` calls in the `SCREEN_INFORMATION::GetWordBoundary` method.

> * I encountered a crash resizing the console down (horizontally) after putting a normally double-width glyph into a double-width line²

Oof. That's bad. Thanks for catching that. It looks like the `TextBuffer::_GetPreviousFromCursor` method needs to be adjusted to take the current line width into account rather than assuming the full buffer width. If that's all it is, that should be an easy fix too. 

> * I don't expect this to work, but MAN this makes COOKED_READ angry. It stops wrapping (even at buffer width). I also don't expect for you to fix that!

Yeah, I wouldn't have expected that to work either. I assume if you're mixing VT sequences with console APIs then weird things are going to happen. I suspect this isn't the only escape sequence that'll freak out COOKED_READ."
Sometimes jit-format does crazy things...
"@github Hello, I have split the tables into two. Could you please review the code and see what is wrong? I can't seem to figure out how to fix the bright colour table (see screenshot below). And, everytime I test it, there's an error: ""`Unhandled exception at 0x00007FFCD2F4BD5C (KernelBase.dll) in WindowsTerminal.exe: 0xC000027B: An application-internal exception has occurred (parameters: 0x000001AE42FBCB40, 0x0000000000000004).`"" Thanks for all your help!
![image](https://user-images.githubusercontent.com/47545798/107869304-8815ed00-6e41-11eb-9a1c-a239d1b50280.png)"
"I'll kick off the discussion then 😊

> where the setting belongs (which level)

I think this makes sense as a global. It's next to `copyOnSelect`, so the user can expect a consistent selection interaction across all of their sessions.

> naming

`trimBlockSelection`: `<bool>`

I actually _really_ like this name. It's short. It's clear that it _only_ impacts block selection.

My only complaint could be that the trimming only happens when we copy, not when we select. But I think that's me just grasping at straws to find something wrong with it haha. And I honestly think people won't think of the setting in that way; docs, the schema description, and the SUI header should be more than enough to remove that ambiguity.

> phrasing, etc.

""Remove trailing white-spaces when copying text in rectangular selection to clipboard""

Maybe change ""rectangular"" to ""block"". I'm mildly irritated by how long it is, but I'd rather see it be descriptive than not. And I think this is ok to be ""negative"", because ""Keep trailing white-spaces..."" isn't clear that the alternative is to remove them. But yeah, definitely want more input on this one.

### Miscellaneous design thoughts

We _could_ change this setting to `trimCopiedText`, but I _really_ don't like that because I like that we're already handling trimming text pretty smart. Line selection doesn't trim, whereas block selection is up to the user. From [this comment](https://github.com/microsoft/terminal/issues/9706#issuecomment-814032515), it seems like there's already consensus on block selection being configurable in this way so this seems like a solid win for me."
">[CallerArgumentExpression(s1)] [Optional] [DefaultParameterValue(""""default"""")] string s2 [](http://example.com/codeflow?start=35&length=88)

The interesting scenario is when this parameter is getting cloned and the one that it references isn't and probably follows it. Is this the case in this unit-test. We want to test scenario where simply reusing the index from the original parameter will be observably wrong. #Closed"
"In inspecting the scenario `case [_, > 0, ..]: case [.., <= 0, _]: case [_, var unreachable, _]:` I noticed something strange. The second case ends up with a `length == 3` test, which seems wrong. See comment below for the state where this happens.

I've confirmed there is a problem by verifying the execution of the following test. 
This makes me think we should add code execution to those subsumption tests as well.

<details><summary>test and Dump</summary>

```
        [Fact]
        public void Subsumption_TODO2()
        {
            var src = @""
C.Test(new[] { 42, -1, 0, 42 });

class C
{
    public static void Test(int[] a)
    {
        switch (a)
        {
            case [_, > 0, ..]: 
                System.Console.Write(1);
                break;
            case [.., <= 0, _]: 
                System.Console.Write(2);
                break;
            default:
                System.Console.Write(3);
                break;
        }
    }
}"";
            var comp = CreateCompilationWithIndexAndRange(src, parseOptions: TestOptions.RegularWithListPatterns);
            comp.VerifyEmitDiagnostics();
            CompileAndVerify(comp, expectedOutput: ""2""); // incorrectly outputs 3
        }
```

```
State 0
    1. [case [_, > 0, ..]:] AND(?DagNonNullTest(t0), t1=DagPropertyEvaluation(t0.Length), ?DagRelationalTest(t1 >= ConstantValueI32(2: Int32)), t2=DagIndexerEvaluation(t0[1]), ?DagRelationalTest(t2 > ConstantValueDefault(0: Int32)))
    2. [case [.., <= 0, _]:] AND(?DagNonNullTest(t0), t1=DagPropertyEvaluation(t0.Length), ?DagRelationalTest(t1 >= ConstantValueI32(2: Int32)), t3=DagIndexerEvaluation(t0[-2]), ?DagRelationalTest(t3 <= ConstantValueDefault(0: Int32)))
    3. [case [_, var unreachable, _]:] AND(?DagNonNullTest(t0), t1=DagPropertyEvaluation(t0.Length), ?DagValueTest(t1 == ConstantValueI32(3: Int32)), t2=DagIndexerEvaluation(t0[1])) BIND[unreachable=t2]
    Test: ?DagNonNullTest(t0)
    TrueBranch: 1
    FalseBranch: 9
State 1
    1. [case [_, > 0, ..]:] AND(t1=DagPropertyEvaluation(t0.Length), ?DagRelationalTest(t1 >= ConstantValueI32(2: Int32)), t2=DagIndexerEvaluation(t0[1]), ?DagRelationalTest(t2 > ConstantValueDefault(0: Int32)))
    2. [case [.., <= 0, _]:] AND(t1=DagPropertyEvaluation(t0.Length), ?DagRelationalTest(t1 >= ConstantValueI32(2: Int32)), t3=DagIndexerEvaluation(t0[-2]), ?DagRelationalTest(t3 <= ConstantValueDefault(0: Int32)))
    3. [case [_, var unreachable, _]:] AND(t1=DagPropertyEvaluation(t0.Length), ?DagValueTest(t1 == ConstantValueI32(3: Int32)), t2=DagIndexerEvaluation(t0[1])) BIND[unreachable=t2]
    Test: t1=DagPropertyEvaluation(t0.Length)
    TrueBranch: 2
State 2
    1. [case [_, > 0, ..]:] AND(?DagRelationalTest(t1 >= ConstantValueI32(2: Int32)), t2=DagIndexerEvaluation(t0[1]), ?DagRelationalTest(t2 > ConstantValueDefault(0: Int32)))
    2. [case [.., <= 0, _]:] AND(?DagRelationalTest(t1 >= ConstantValueI32(2: Int32)), t3=DagIndexerEvaluation(t0[-2]), ?DagRelationalTest(t3 <= ConstantValueDefault(0: Int32)))
    3. [case [_, var unreachable, _]:] AND(?DagValueTest(t1 == ConstantValueI32(3: Int32)), t2=DagIndexerEvaluation(t0[1])) BIND[unreachable=t2]
    Test: ?DagRelationalTest(t1 >= ConstantValueI32(2: Int32))
    TrueBranch: 3
    FalseBranch: 9
State 3 REMAINING t1:[2..2147483647]
    1. [case [_, > 0, ..]:] AND(t2=DagIndexerEvaluation(t0[1]), ?DagRelationalTest(t2 > ConstantValueDefault(0: Int32)))
    2. [case [.., <= 0, _]:] AND(t3=DagIndexerEvaluation(t0[-2]), ?DagRelationalTest(t3 <= ConstantValueDefault(0: Int32)))
    3. [case [_, var unreachable, _]:] AND(?DagValueTest(t1 == ConstantValueI32(3: Int32)), t2=DagIndexerEvaluation(t0[1])) BIND[unreachable=t2]
    Test: t2=DagIndexerEvaluation(t0[1])
    TrueBranch: 4
State 4 REMAINING t1:[2..2147483647]
    1. [case [_, > 0, ..]:] ?DagRelationalTest(t2 > ConstantValueDefault(0: Int32))
    2. [case [.., <= 0, _]:] AND(t3=DagIndexerEvaluation(t0[-2]), ?DagRelationalTest(t3 <= ConstantValueDefault(0: Int32)))
    3. [case [_, var unreachable, _]:] ?DagValueTest(t1 == ConstantValueI32(3: Int32)) BIND[unreachable=t2]
    Test: ?DagRelationalTest(t2 > ConstantValueDefault(0: Int32))
    TrueBranch: 5
    FalseBranch: 6
*State 5 REMAINING t1:[2..2147483647] t2:[1..2147483647]
    1. [case [_, > 0, ..]:] MATCH
State 6 REMAINING t1:[2..2147483647] t2:[-2147483648..0]
    2. [case [.., <= 0, _]:] AND(t3=DagIndexerEvaluation(t0[-2]), ?DagValueTest(t1 == ConstantValueI32(3: Int32))) // I don't understand why we have a test for `t1 == 3` (meaning lenght is 3)
    3. [case [_, var unreachable, _]:] ?DagValueTest(t1 == ConstantValueI32(3: Int32)) BIND[unreachable=t2]
    Test: t3=DagIndexerEvaluation(t0[-2])
    TrueBranch: 7
State 7 REMAINING t1:[2..2147483647] t2:[-2147483648..0]
    2. [case [.., <= 0, _]:] ?DagValueTest(t1 == ConstantValueI32(3: Int32))
    3. [case [_, var unreachable, _]:] ?DagValueTest(t1 == ConstantValueI32(3: Int32)) BIND[unreachable=t2]
    Test: ?DagValueTest(t1 == ConstantValueI32(3: Int32))
    TrueBranch: 8
    FalseBranch: 9
*State 8 REMAINING t1:[3..3] t2:[-2147483648..0]
    2. [case [.., <= 0, _]:] MATCH
*State 9 FAIL
```

</details>"
Yup read that selector wrong
"The type name is wrong :smile: I think this is right:

```suggestion
					parameterName, mi.DeclaringType.FullName, mi.Name);
```"
"this is def a bit... interesting.  not saying it's wrong.  but i always find ti a bit suspect . it would be good to have a deeper comment on why this is needed.  for example, since we did `_completionSource.SetException(ex);` this somewhat implies that someone is not observing the TCS itself (but still is observing the direction exception thrown).  

I wouldn't mind an actual case listed where that happens.  note: i get this is a move, so we should keep even if you can't give a case."
"Actually, I think there's also a confusing double negative in the sentence unless I'm reading it wrong - ""something results in the implementation of virtual method not satisfying that the signature of something is not covariant compatible"", at the very least it's quite a bit to chew on which is the traditional hell of all specs :-)."
wrong indentation
"As I described in my response to Jan Kotas' PR feedback, I originally put it under the _DEBUG block (admittedly in the wrong place after the assertion) as I viewed it as a tool specific to local debugging; the fix and the recent lab failure made me realize there's actually no reason to have it under the _DEBUG block - it doesn't incur any perf penalty (in the sense that it only happens when the app is about to crash anyway) and having it outside of the _DEBUG block makes us receive the same diagnostics for release runs too - I believe that to be a win-win situation, please let me know if you think otherwise."
"At first I was a bit surprised to see this as `Removed` vs. `Modified`. There are still two entries here in the tables, the other two source files, so seeing this as pure `Removed` was odd. Had to debug into this a bit to convince myself everything was correct here. Do you know why it's tracked this way?

It feels like a bug in the incremental tracking steps but maybe I'm thinking about the output wrong here. 
"
"I'm going to stop reviewing here as it seems it is as much wrong as right.
"
"@github - note that this is not a count of all errors. This is a count of invalid character errors which are very rare in actual source files. The typical reason for getting these errors is accidental parsing of nontext files like binaries. You do not need to see to 50K invalid characters to realize something went badly wrong.

If native used 200, lets use that.
"
We discussed this and agreed that it's acceptable to get this wrong as long as there is a test showing how it gets it wrong.
"> return Interval(value, TicksPerMicrosecond); [](http://example.com/codeflow?start=11&length=45)

Although this is similar to what we already have like FromSeconds and other methods, but in general I think the implementation of Interval method is wrong as it can overflow :-(

You don't have to change anything here but we may track fixing this with the issue [https://github.com/dotnet/runtime/issues/66815](https://github.com/dotnet/runtime/issues/66815)"
We shouldn't need to map file paths when there is no outDir or declarationDir since the path is going to be same as inputPath (no need to calculate relative paths etc which can result in wrong path when root dir is specified without specifying outdir)
"Both of your statements begin with ""Without def"" and describe different behavior.  Pretty sure you meant to use ""With def"" on one of them.  .  :smile: 

> I know hardly anything about groovy, so let me know if I'm wrong about this.

Same. Double worse is the only way I know to test / run groovy is to submit this script to Jenkins and watch it fail / succeed.  
"
Good catch - I'm thinking about this wrong.
"> it has DocumentResetAsync but unfortunately I can't use it since it is async method. for now, I need to stick with RemoveDocument.

Note: because you are clearing the data associate for the workspace, the methods you call should not be document-centric.  They should be workspace-centric.  Otherwise we have the wrong level of granularity, and it's totally possible for an analyzer to be caching data that won't get removed.

## 

Note: this is not a hypothetical.  This is how one of our incremental analyzers works today. SymbolTreeIncrementalAnalyzer has this code:

``` c#
            public override Task AnalyzeDocumentAsync(Document document, SyntaxNode bodyOpt, CancellationToken cancellationToken)
            {
                if (!document.SupportsSyntaxTree)
                {
                    // Not a language we can produce indices for (i.e. TypeScript).  Bail immediately.
                    return SpecializedTasks.EmptyTask;
                }

                if (bodyOpt != null)
                {
                    // This was a method level edit.  This can't change the symbol tree info
                    // for this project.  Bail immediately.
                    return SpecializedTasks.EmptyTask;
                }

                return UpdateSymbolTreeInfoAsync(document.Project, cancellationToken);
            }
```

Note that at hte bottom, we do our processing on the _Project_ of the document and we cache that data at the project level.

""RemoveDocument"" isn't even implemented by this class, so no cleanup happens at all.

## 

Now, i have no idea if this is a problem or not.  But it seems _really_ fishy that we're just calling ""RemoveDocument"" and we're expecting that to be sufficient.
"
"> So for the single element versions of `vst1` and `vld1` intrinsics we never generate `ST1` and `LD1` on little-endian. There we always generate `str` and `ldr` since they provide more addressing modes.
> 
> e.g.
> 
> ```
> #include <arm_neon.h>
> 
> void foo (int32x4_t v, int32_t *a)
> {
>   return vst1q_s32 (a, v);
> }
> ```
> 
> will generate a `str q0, [x0]`
> 
> For big-endian we do generate the `ST1` and `LD1` though. This is not to say that this patch is wrong or needs changing. but just a headsup that you have less flexibility. and the single structure single reg intrinsics are the most common ones.

Thank you for your feedback @github 
Is there any performance differences between `ld1/st1` and `ldr/str` in this case?

I am leaning towards keeping `ld1/st1` for Load/Store. We can always switch to `ldr/str` if/when we decide to utilize other addressing modes."
"This change has no perf impact on Linux. This change is only changing failure mode on Linux. Before this change, we would fallback to weak random number generator when something went wrong. After this change, exception will be thrown in this case. It should never happen in practice (famous last words).

Yes, I expect that this be slower on macOS. I will try to get some numbers."
"> This PR is the solutions with the tools we have at our disposal in .NET 6.

Right but I'm not willing to sign off on it because I think its the wrong solution (even though it's limited by the tools at our disposal in .NET 6). This issue is pretty insidious because the example in the description shows a broken case, but the overwhelming majority of cases work, which is why I have a problem with the PR in the first place.

We have a gap with what we can express currently and a better plan is to use the analyzers/linker knowledge to fill it. I don't like the linker specific solution because there are other libraries that will have the same problem I wouldn't recommend they do what this PR does, it's just not right."
"I think the risk is low but not negligible. 

I don't know if this issue ever lead to a crash, so I don't think it is a mandatory backport.

This change might have some noticeable perf gains on AOT since we avoid wrapper + safepoints for stores into ref fields, so that could be a motivating factor. Maybe if we see some crazy perf gains in the benchmark runs that could justify it."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Looks like I got it working :) At least the result for a simple function 
`public static bool Test(int x) => (x & 1) == 1;` 
looks like this 
<img width=""652"" alt=""image"" src=""https://user-images.githubusercontent.com/18483133/146093831-c419521c-78f2-4c57-a91b-a618eb9b7e63.png"">. 
Would be glad to hear if I did something wrong and how can I make it better.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>SkiFoD</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> Are we worried we can overflow `int`? I can bump count to `long` or `ulong`. This is no longer ""the answer"" but more so the upper guess. The actual answer comes from walking the structures and counting entries we like.

It's not the underflow or the overflow, but the internal behavioral changes that are the concern. It was specifically implemented to improve portability between 32/64-bit architectures, and ultimately is an `int64_t`, but is an ABI breaking change as well. Basically the intent was to make `xinpcb` structs word-size independent. Meaning they could go down or up from an `int` and a consumer wouldn't need to handle that portion, it can just rely on the kernel to manage it.
As it currently sits, FreeBSD could overflow `int` as `kvaddr_t` is a `uint64_t`.

Relevant commit is [here](https://reviews.freebsd.org/rS335979#change-CaAchZVQnKNx) in FreeBSD, names changed and I kept forgetting about it. 
```c
struct xinpcb {
	ksize_t		xi_len;			/* length of this structure */
...
	union {
		kvaddr_t inp_ppcb;		/* (s) netstat(1) */
		int64_t	ph_ppcb;
	};
```

That said, the way netstat handles it looks to be probably the right way.
`char mibvar[sizeof ""net.local.seqpacket.pcblist""];` where `mibvar` is a switch around TCP/UDP/SCTP/raw. Then it does a walk of the pcb list in `pcblist_kvm()`. That appears to be the most correct way for both OSX and FreeBSD, but I could definitely be wrong about OSX."
"I extracted the test SliceWithStartAndLengthPastEnd and attempted to identify what was going wrong using a checked build but I couldn't reproduce the failure. The test would fail which is wrong but it wouldn't AV. However disabling tiered compilation allows reproduction of the AV. Unless I've somehow really really broken something I don't see my changes can cause it.

The assertion is:
```
Assert failure(PID 26000 [0x00006590], Thread: 20156 [0x4ebc]): Assertion failed 'id->idGCref() == GCT_NONE' in 'HelloCoreCLR.Program:SliceWithStartAndLengthPastEnd()' during 'Emit code' (IL size 83)

    File: E:\Programming\csharp7\runtime\src\coreclr\jit\emitxarch.cpp Line: 12116
    Image: E:\Programming\csharp7\runtime\artifacts\bin\coreclr\windows.x64.Checked\corerun.exe
``
[jitdump.zip](https://github.com/dotnet/runtime/files/8037696/jitdump.zip)
`"
"Again, use of TargetPlatformIdentifier was wrong here technically I think, or at least risky, and we got lucky with order of evaluation?"
"Yes, this was the cause of the secondary build break once I re-generated the baselines. The file contained the incorrect text and trimming the response was wrong."
Wrong capitalization of `JavaScript`. Is this wrong in other templates?
"This was originally _bodyBuffer.Start - I changed it to _unconsumedData.Start, which is totally wrong because it advanced the pipe without the user advancing it.

The reason I changed it was that _bodyBuffer.Start was resulting in a never ending loop - that happend because if the read isn't long enough to check if it's a boundary - it wouldn't set the _bodyBuffer (which does make sense)  - since _bodyBuffer was unset, the advanceTo wouldn't actually advance, and create a never ending loop.

I think that readResult.Buffer.Start would avoid this issue, and reflects the actual meaning (that's why I changed all advances to use it instead of _bodyBuffer.Start - Just informing you so you find it easier to understand the changes I made."
"Crazy, I'd love to know why the ValueStringBuilder is so slow"
This seems like the wrong file to contain this method.
"Please throw if the project isn't valid, since that means you're passing the wrong name."
"This feels like the wrong approach.  To my understanding the ContainsDiagnostics property is meant to check exactly what this loop is checking for.  Are we sure the bug isn't that ContainsDiagnostics is incorrectly reporting false here?  

Are there other examples in the parser where we have to Enumerate the child nodes to dig further into diagnostics? "
"Related: #29655

Edit: Jk. Wrong PR."
"Wait why are we taking this change? Isn't this in the wrong layer? Removing information from loggers is the wrong place to do this sort of filtering. "
"Production error pages are often viewed by users of the site, not the site admin. Normal users won't know about Development environments or server logs. Isn't it more typical to have text that says something has gone wrong with the site and that they need to contact the site admin for assistance?"
Is this safe to call? Is there some thread races here if we're remapping buffers at the wrong time?
this comment seems wrong.  it's not checking the embedded statemnets.  it's checking the 'header' portion of the container statement.
">_assemblySymbol [](start = 21, length = 15)

This feels wrong, ```_assemblySymbol``` could be a source assembly symbol that has nothing to do with what attributes we have in the module. #Closed"
"If that's the model used elsewhere, it's fine I guess.  It's technically wrong, but not enough to argue."
"firstOrDefault seems wrong.  you could have a statement that has *many* references to some o fthe locals in your localVariables list.  But you'll only update the 'lastUsage' for the first one you return here right?

Instead of ContainsReference, this should likely be something like: GetReferencesLocalVariables, right?"
"That comment is about the internal `GetConverterInternal` method, not the public abstract `CreateConverter` method. The public API shouldn't return nullable.

Having the internal method being annotated as nullable to help make sure that the serializer does null checks has some value (at least to me, and we can change it non-nullable, if you think that is better).

Making the public `CreateConverter` nullable sends the wrong message about the API contract."
"`BoundConvertedDefaultExpression` derives from `BoundDefaultExpression` so the warning is reported. I'll add a test.
That said, the language version check seems wrong (I'll remove and document).

---
In reply to: [314087501](https://github.com/dotnet/roslyn/pull/37596#discussion_r314087501) [](ancestors = 314087501)"
">{1} [](start = 60, length = 3)

This cast ends up coming out as `?` often, which is wrong. We should not be trying to cast to a nullable reference type and throwing if it's null."
CopyLocalLockFileAssemblies shouldn't be relevent for design-time build.  This is only for full-build about whether it decides to copy the libs from nuget packages.  Design time build only runs ResolveReferences so I don't think it would ever run a target that would consume CopyLocalLockFileAssemblies  such that it would notice if it had the wrong value.  You should be able to omit all these.
">GetHashCode [](start = 51, length = 11)

This looks wrong. #Closed"
"Yes, I think it should throw InvalidOperation.

I don't think we'll null ref in all cases. I just observed one in the converter for parameterized ctors due to the converter being passed a type that it can't convert (due to wrong assumptions about metadata on `state.Current.*` ). We may have the same/other issues with other converters."
"> This occurs because when we attempt to convert the method group to a function pointer, we call ~~GetMethodGroupForFunctionPointerConversion~~ (Edit: GetMethodGroupFunctionPointerConversion), which does not perform extension method lookup.

Does it do this (does not perform extension method lookup) conditionally? Why the difference between two scenarios? We are referring to the same method, the target function pointer type is different. Something feels wrong/inconsistent here.

---
In reply to: [397562968](https://github.com/dotnet/roslyn/pull/42488#discussion_r397562968) [](ancestors = 397562968)"
"The condition here is wrong and will cause `default` to be written when the caller specifies that it should be ignored i.e. `JsonIgnoreCondition.WhenWritingDefault` is active on the global options or on the property. This is why the tests are failing.

To avoid the `EqualityComparer<T>.Default.Equals(default, value)` check on reference types that are not `null`, you can change [this line](https://github.com/dotnet/runtime/blob/4aaca328df6f8d373315263f34bb8a88b5d3e85b/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonPropertyInfoOfT.cs#L136) to:

```cs
else if (IgnoreDefaultValuesOnWrite && !Converter.CanBeNull && EqualityComparer<T>.Default.Equals(default, value))
```

The previous logic can be left as-is."
"It turns out that `allowfullscreen` is not necessary. I read something on MDN talking about the element should be marked as `allowfullscreen` but I can't find it anymore and it seems wrong, as without that flag, it works."
"Not very sure, but I think the check should be && because the comment above indicates that this searches double parentheses. Is that correct or wrong? "
"One thing to also consider probably as a part of this design is supporting launching straight into not only maximized, but also full-screen mode. While we don't support full-screen mode yet, we will by 1.0, and there have already been asks to add support for launching into fullscreen mode by default. 

Having two boolean settings `maximizeWhenLaunched` and `fullscreenWhenLaunched` seems wrong to me - what if they're both true? What if we'd want to add an additional `minimizeWhenLaunched`? "
"I think there is something wrong here. `ModelRawLinesInserted` is an event that describes `N` inserted lines. But the field `ModelRawLinesInserted.injectedText` is not grouped in any way per line, it seems to be that all injected text is used on all new lines."
You initialize `retValArg` above but never use it. That seems wrong.
"@github 

> I thought that `iconv-lite` through webpack would support all encodings because there are no native dependencies, but please correct me if that assumption was wrong.

Your assumption is correct. It's not about native dependencies, it's about `iconv-lite` relying on the fact that it gets `Buffer` as input and not `Uint8Array`. The solution is very straightforward - adding `Buffer.from` in couple places. So in the worst case scenario we can always go with a fork.

> Yeah I think for desktop I would like to preserve that because it will test the actual stack down to the disk.

👍 

> However, we have a way to register file system providers and we could simply swap out the disk based provider with an in-memory one here

Yeah, that's exactly what I am doing currently. Will adjust then to reuse the same tests in-between environments with different file services.

"
"Ok, this sucks, and is the main reason this PR is in draft right now. The macro has a bug in it that is only repro-able if we don't expand the macro (I hate it). On a settings reload, we get a crash :(

Call stack:
![call stack](https://user-images.githubusercontent.com/11050425/109543108-cbe03780-7a7a-11eb-9120-eedd5f902bcc.png)

Error:
```
**std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >**(...) returned 0xFFFFFFFFFFFFFFFF.
```

Surprisingly, this is not an issue on main. So it seems to be an issue with ref counting the com_ptr?

@github mind taking a look here? It's pretty bizarre."
"why?  this comment needs explanation explaining why this would be the case.  (i'm not saying it's wrong, i'm just saying that the comment isn't evident). "
According to the release notes this issue is fixed in 4.8.0.1269 (https://docs.microsoft.com/en-us/xamarin/xamarin-forms/release-notes/4.8/4.8.0-pre3#issues-fixed) - which is a wrong information: the issue is still reproducible in this version. By updating Xamarin.Forms to 4.8.0.1687 we could confirm that this bug is fixed.
"Yes, that's intended. This is the one deliberate odd behaviour. When the folding provider no longer returns a region which it previously returned and which is collapsed the foldingModel logic can't easily distinguish between three possible reasons:
1. The user modified the text in such a way that the region really is gone. E.g. They deleted the opening ""{"" of a region. In this case we should unfold it.
2. The user modified the text such that the region is now embedded in a comment or a string. In this case it makes sense to keep the region folded - the user may next close the comment or string before the region. And even if they don't the fold still makes a kind of sense.
3. The folding range provider is misbehaving. Very slow to respond or responding incorrectly. Which we think is the case in the issue which got this whole thing going. In this case we want the hidden region(s) to stay hidden.

Since the foldingModel can't readily distinguish between these cases I decided to treat it as case (1) if only one hidden region is affected and unfold it, and treat it as case (2) or (3) if more than one hidden region is affected. My reasoning is that even if it is wrong in treating a situation as the first case, as it is in your example, only one fold is affected and that isn't a big hardship to the user. I expect it will nearly never be wrong when treating something the other way."
"The existing wrong block comment gets replaced by the new text template in single line comment style. The only difference is, that before the fixer added the new header, while it now replaces the header. The test name does not say anything about the replacement behavior, so it is still fine.

The `<summary>` of most of the existing tests are misleading, though and should be removed."
"This looks like another bug to me. Only one closure, at offset 174, which is the start of the nested switch. The lambda offsets looks right though, so maybe I'm interpreting it wrong though, because to me it seems like it would always be invalid to have a closure that starts after a lambda that creates it."
ok.  i observed nothing wrong cancelling this.  will remove comment :)
Should we be using `CondinueOnError` here? Just in case something horrible goes wrong... If this task errors when the entire build will stop.
"> Do we want to handle that case?

I think it's good to handle casts on conditional expressions, but if it proves more expensive/fraught, it might be necessary to drop it.

> And if we do, I'm not sure we need to have a concept of an ""acceptable"" conversion. Either there was an error during initial binding, or the result of the conversion can be nullable.

I didn't understand this part. It feels like what's important about the conversion is:

- If the conversion only gives non-null output when the input is non-null, we can propagate out the StateWhenNotNull (most built-in conversions meet this requirement).
- Otherwise, we don't know why the conversion result is non-null, and we have to discard the StateWhenNotNull of the inner conditional access.

> This doesn't look correct. I don't believe we should be walking through conversions here at all: the conversion that needs to be applied in in BoundNullCoalescingOperator.LeftConversion.

In https://github.com/dotnet/roslyn/pull/51567#discussion_r597876642 I wrote:
> After reading the spec, it feels like the implicit conversion on the left doesn't affect this analysis, since the null test always occurs before the left conversion. We just have to demonstrate that in the tests. #Closed

Did I get this wrong? Could you please give an example of when this analysis needs to account for the LeftConversion on the null coalescing operator?
 #Closed"
"I saw that WriteMemory is used to set value in the process bein debugged, this SetValue I saw being to SetValue for parameters which are being used in an eval expression. Am I wrong?"
"TODOs should be commented out and a bug filed (in particular if the API ends up wrong until the TODO is fixed, since we can't change the API later)."
"wording (so take this with a grain of salt) but `Add a binding project to be skipped` sounds wrong. We're not skipping the binding project - we're not extracting from it, right ?"
Why is this test changing? The new behavior looks correct...was the old behavior wrong before?
Coding style is wrong in most of the file
"And it should not, i'm wrong we get it from https://developer.apple.com/documentation/mailkit/memessageactionhandler/3783568-decideactionformessage?changes=_3&language=objc

So we need to be able to instantiate the class."
indent looks wrong
Maybe have separate checks and failure messages not having switch logged at all versus having the switch logged with the wrong value?
"wrong branch, this needs to be back ported to `d16-5-xcode11.4`"
"@github Looks like the two EF issues I commented on have now been removed. If this is all the commits in 2.1.1, then these two issues should still be here; they just had the wrong commits associated before."
"> It was removed in this commit.

Yeah, i saw that, wonder why the API diff analyzer did not warn for that PR, and also in this PR CC @github @github 

> What's the point of adding it to the sources? This attribute is only for use by analyzers which go off reference assemblies. The actual implementation is substituted via facade assembly mapping. Correct me if I'm wrong here but this metadata would not actually be used for anything if added to sources.

In general, we keep ref and src in sync, at least if platform-specific API is called internally the src annotation could help, @github @github might say the better explanation for  having src and ref in sync"
"```suggestion
            if (RuntimeHelpers.IsKnownConstant(value) && value != '\0')
```
Otherwise `string.Empty.StartsWith('\0')` would be wrong, right?"
"ShebangCommentTrivia seems like the wrong name.  It should be ShebangTrivia.
"
"@github I blame the JSDoc refactor + `function(T): boolean`! It actually does get the type wrong as `(arg0: any) => boolean`, and I bobbled the fixup.

@github Sure, I was just copying the haskell name."
"If zd change was based on the note that follows C4477, then it is probably the same thing I noticed while working on a recent PR. So I decided to report it upstream: https://developercommunity.visualstudio.com/t/Note-that-follows-warning-C4477-is-inacc/1691095?space=62&q=inaccurate. The VCR team thinks the suggestion is correct and  clang/gcc are wrong about error. IMO, cl.exe is wrong; if we want printer to use signed data we can `ssize_t` cast the variable and use `%zd` but the format specifier should only correspond to the data type in use and produce suggestion accordingly. I tried. 🤷

However, using `%zu` make both worlds happy. cl.exe only _suggests_ %zd, but it is fine with %zu (i.e. C4477 goes away 🙏)."
"In any case, my original example, `x < this.property`, is wrong -- it *does* suggest `this`. It just doesn't when the identifier to the left of `<` is a generic signature. 

So I think making `this` and `typeof` type keywords is best fixed in a separate PR, since it requires more knowledge of services than I have now, and only affects things that are genuinely type contexts. I filed a bug #32486 to track it."
"Actually, I’m not sure. If I change this line to property access (`x.someProperty = 3`), it still wants `isDefinition: true`. It might be wrong, but it appears to be consistently wrong, and probably nothing to do with my changes here..."
"possibly.
And we actually have a bug here, because this currently does not work. Fails with ""constructor not available"" :-/  
It almost works, but something goes wrong with constructor lookup.
"
"Oh I was looking at the windows file... So I'm going crazy. Let me remove it, theres no reason for it to be there.
"
"Dumb question, where do these json files come from?
"
"> I had the impression that forceConsistentFileNames ignored drive roots. Sorry for not including a comment to that effect.

Yes. But your import doesnt test import ""somethingsomething/a"" and  ""somethingsomething/A"" you would get error on either one of those and that was expected behavior which is not the current case.

> I'm not sure I follow. Where is the current directory specified in this case?

Current directory need to be specified as part of the https://github.com/microsoft/TypeScript/pull/41292/files#diff-742ed890d46f805d54cbcf33f4a6f2cd286a81ac5df890b0b20636445b464093R149 . We need test where current directory differs in casing from whats on the disk.

The bigger missing part is import in wrong casing should give error which it wont because the realpath will resolve to casing on the disk and then we will loose that info. But same code in case sensitive file system will give error because import will not be resolved.

Disk file name: a.ts 

import ""a"" > success
import ""A"" > will fail on case sensistive file systems... so it should error with forceConsistentFileCasing on case insensitive filesystem which it would not when realpath is invoked as part of this change."
not being able to reference ref-struct-locals from local-funcs sucks.  @github  can we fix this in the language :D
"Thanks for the update.  I just took a look at my tests (including the original tests in the repo) to double check that they all passed after the change (they did), and I realized that that I had forgotten the System.Data.OleDb library uses the text/csv format for its tests, not the accdb format.  I apologize for probably sounding like a crazy person before when I was talking about .laccdb files and what not.

The only way I could observe bugs from the changed transaction code was to write my own tests, and to do so, I used the driver with an accdb file (since this is my intended scenario).  I assume using the driver with text/csv will have a similar issue due to not being disposed properly, but it could be that there are two different bugs.  Hopefully, that's not the case, but it is a possibility."
"It would be good to add tests that demonstrate that this can cause an error. Something like this, which I don't believe would have errored before:

``` ts
function foo({ a = 0 } = {}) { }
foo({ a: """" });
```

Basically something where the property was dropped in the initializer, but then was present again in the argument with the wrong type.
"
"The problem is we do not know if the file exist but wrong extension or that it does not. may be we should add some elaboration to the error message. i would log a separate issue for it.
"
"This is wrong
"
"Yes, here’s the situation as I think it is occurring:

* A non-UI thread is is loading projects into the project collection. This thread acquires the read lock on the project collection.
* On the UI thread, a project finishes loading and is finalized. This fires OnAfterCreateProject which tries to get the output path of the finalized project. This causes the current project configuration to be created, which tries to set the Platform property on the project. This requires the write lock on the project collection, which it can’t have yet due to the outstanding read lock. So it blocks and pushes a message loop to pump messages while it waits.
* There is yet another non-UI thread initializing Roslyn with information from the evaluation (since the design-time build has not been run yet). This sets the compiler options for Roslyn, which calls AbstractLegacyProject.RefreshBinOutputPath. This uses IVsBuildPropertyStorage::GetValueProperty, which is bound to the UI thread. So the call is marshalled to the UI thread where we try and read a property from the project, which means we need to acquire a read lock. Since someone is waiting for the write lock, we block on the read lock, waiting for the thread requesting the write lock to complete. Unfortunately, since that is the UI thread, we deadlock.
 
Reading the comments from the code, I believed that initializing Roslyn on the background thread with just evaluation data was safe because Roslyn wouldn’t in that case call IVsBuildPropertyStorage, but obviously that belief was wrong. I thought maybe there was something different about VB, but it looks like C# does the same thing, so IDK where my belief came from.

I don't think that queueing the update to the UI thread will help, unless I'm misunderstanding the situation, because the UI thread is free in this case and the problem is the read lock being piled on top of the write lock.

This is a 16.8 bug because it causes hangs in optprof. If you're worried about other downstream issues, we could back off the background initialization of Roslyn for the time being on the project system side, which would be fine. Just let me know what you think, you're the expert here. :)"
"@github This simple approach expands `syntaxTree.IsTypeContext`, to also be true in `syntaxTree.IsLocalFunctionDeclarationContext`. The only test that fails with this addition is the `delegate` keyword recommender (test failure: `delegate` is suggested after `static`):

https://github.com/dotnet/roslyn/blob/6453b4f67c612dd68fb486d56a39eac88545e340/src/EditorFeatures/CSharpTest2/Recommendations/DelegateKeywordRecommenderTests.cs#L289-L291

The root cause is here in `ValidTypeContext`:
https://github.com/dotnet/roslyn/blob/6453b4f67c612dd68fb486d56a39eac88545e340/src/Features/CSharp/Portable/Completion/KeywordRecommenders/DelegateKeywordRecommender.cs#L31-L47

I'm not too confident about the `delegate` keyword, but to me, it feels like it should *not* be suggested in a type context. For instance, it is suggested in method parameters (`void M($$`), which I think is wrong. @github It probably should read `context.IsTypeDeclarationContext` in line 44?

@github What do you think about the approach of expanding `syntaxTree.IsTypeContext`? What should we do about the `DelegateKeywordRecommender`."
"Rough gist: the module names are wrong, not the import

Chatted with @github  - when you have commonjs set as the target, you basically never want a .d.ts which would look like this - the core issue is in the declared module names (nothing in the generated .d.ts here is portable) without either:

 - requiring code like `/// <amd-module-name name=""thing"" />` in some/all files
 - knowing the package for the package name and adding it to the module names:

```ts
declare module ""packagename/nested/shared"" {
    export class B {
    }
}
declare module ""packagename/nested/base"" {
    import { B } from ""packagename/nested/shared"";
    export function f(): B;
}
declare module ""packagename/nested/derived"" {
    export function g(): import(""packagename/nested"").B;
}
declare module ""packagename/nested"" {
    export * from ""packagename/nested/base"";
    export * from ""packagename/nested/derived"";
    export * from ""packagename/nested/shared"";
}
declare module ""packagename"" {
    export * from ""packagename/nested"";
}
```

Which could come from a compiler option. (an implicit look up wouldn't work in all cases) - Wes feels this is worth it.
"
"The costs you highlight for GetEnvironmentVariable are because the runtime reads and stores the UTF8 env vars on first use,  and then calls to GetEnvironmentVariable need to transcode the UTF16 key being searched for, which is done linearly.  To make GetEnvironmentVariable faster in microbenchmarks, the runtime could instead pre-transcode them all and potentially store them in a hashtable. The problem, though, is trying to optimize for microbenchmarks on the throughput of GetEnvironmentVariable will likely lead you to do the ""wrong"" thing.  No one should be calling GetEnvironmentVariable on a hot path; instead, while there are exceptions to this, it's generally used once for a given key, often during startup / first use of some code that checks it for configuration info and then never looks at it again; in my experience,  there are also generally many more environment variables in the environment than the app actually cares about. We could spend way more time transcoding all env vars, find we made a benchmark.net test of GetEnvironmentVariable much faster, but actually slowed down the overall startup of an app with no measurable reward to show for it. If you'd like to prototype that and can demonstrate it does help with the overall startup of various app types (e.g. because it turns out we end up looking for lots of environment variables, maybe multiple times, or because we have to transcode them all anyway for an inevitable call to GetEnvironmentVariables, plural), then we could certainly consider that direction. It would make multiple calls to GetEnvironmentVariables faster as well. 

(It's also possible there are some simpler, smaller optimizations possible. For example, if the vast majority of keys are ASCII, maybe there could be a fast-path that skips the transcoding initially and tries to do the comparison between the byte and char unless a non-ASCII value is hit.)"
"There's a conflict from there being two kinds of errors that typically get suppressed: code quality and type checking.

Code quality errors are produced by settings like `noUnusedLocals`. These errors don't always mean that your code is wrong so suppressing them can be justified since they don't affect the correctness of your program. Adding ranged suppressions can be useful in case there are many errors, as in @github's use case.

Type errors are different. Ignoring these errors isn't a magic ""make my code work"" button. Ignoring them can have unintended consequences on how the rest of your code is checked. They should never be ignored unless there's absolutely no other way of getting around the problem (and I've never seen an example of this). There's no valid use case for range suppressions of type checking errors; we should encourage people to fix their types and not ignore errors.

This dilemma should be resolved in favour of not adding ranged suppressions. The TSC diagnostics system is basically unconfigurable and it's impossible to ignore specific kinds of errors (which is fine for type checking but less for linting). If you need more control over code quality diagnostics than what TSC provides you can use something like ESLint."
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20969,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>…g jump trampolines.

Fixes https://github.com/mono/mono/issues/20962.



<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> a) a using is missing

What kind of using you're talking about? The error was in the ref file, I've never saw usings in it 😄 
I tried to add
```
</ItemGroup>
    <ItemGroup>
    <ProjectReference Include=""..\..\System.Runtime\ref\System.Runtime.csproj"" />
</ItemGroup>
```
to `Microsoft.Extensions.Logging.Abstractions.csproj` (ref directory), but got 
`error NU1201: Project System.Runtime is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project System.Runtime supports: net6.0 (.NETCoreApp,Version=v6.0)`
and
`error NU1201: Project System.Runtime is not compatible with net461 (.NETFramework,Version=v4.6.1). Project System.Runtime supports: net6.0 (.NETCoreApp,Version=v6.0)`

So I assume it's not possible to use this attribute here yet (correct me if I'm wrong) and simply revert changes"
"> @github it appears hotreload-utils build tool is expecting a new sdk since it picked up the update from darc

That sounds wrong. Repositories which produce tools that we depend on shouldn't update their SDK at a faster cadence than us. If we wouldn't need to update to a newer SDK right now in dotnet/runtime, we would be blocked for 1-2 months until we would update to the officially released RC1 SDK. Am I missing something here? If not we should probably establish guidance across repositories."
"This also fixes several cases of wrongly reported live var ranges. For example:
```diff
-; Variable debug info: 16 live ranges, 5 vars for method System.Configuration.BaseConfigurationRecord:OnStreamChanged(System.String):this
+; Variable debug info: 17 live ranges, 5 vars for method System.Configuration.BaseConfigurationRecord:OnStreamChanged(System.String):this
   0(   UNKNOWN) : From 00000000h to 00000022h, in rcx
   0(   UNKNOWN) : From 00000022h to 00000026h, in rcx
   0(   UNKNOWN) : From 00000026h to 00000030h, in rbp[16] (1 slot)
   0(   UNKNOWN) : From 00000030h to 0000003Ah, in rcx
   0(   UNKNOWN) : From 0000003Ah to 0000008Eh, in rbp[16] (1 slot)
-  0(   UNKNOWN) : From 0000008Eh to 000000CFh, in rcx
+  0(   UNKNOWN) : From 0000008Eh to 0000009Bh, in rcx
+  0(   UNKNOWN) : From 0000009Bh to 000000CFh, in rbp[16] (1 slot)
   0(   UNKNOWN) : From 000000CFh to 000000D3h, in rcx
   0(   UNKNOWN) : From 0000011Fh to 0000012Bh, in rbp[16] (1 slot)
   0(   UNKNOWN) : From 00000143h to 00000162h, in rbp[16] (1 slot)
```

That's in the following function:
```asm
; Assembly listing for method System.Configuration.BaseConfigurationRecord:OnStreamChanged(System.String):this
; Emitting BLENDED_CODE for X64 CPU with SSE2 - Windows
; ReadyToRun compilation
; optimized code
; rbp based frame
; fully interruptible
; No matching PGO data
; 0 inlinees with PGO data; 10 single block inlinees; 1 inlinees without PGO data
; Final local variable assignments
;
;  V00 this         [V00,T00] ( 12, 12   )     ref  ->  [rbp+10H]   this class-hnd EH-live single-def
;  V01 arg1         [V01,T04] (  3,  3   )     ref  ->  rsi         class-hnd single-def
;  V02 loc0         [V02,T13] (  2,  2   )    bool  ->  rax
;  V03 loc1         [V03,T05] (  4,  4   )     ref  ->  rsi         class-hnd single-def
;* V04 loc2         [V04,T16] (  0,  0   )     ref  ->  zero-ref    class-hnd EH-live single-def
;  V05 loc3         [V05    ] (  3,  3   )    bool  ->  [rbp-20H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op single-def
;  V06 loc4         [V06,T06] (  4,  4   )     ref  ->  rax         class-hnd single-def
;* V07 loc5         [V07    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def
;  V08 OutArgs      [V08    ] (  1,  1   )  lclBlk (32) [rsp+00H]   ""OutgoingArgSpace""
;  V09 tmp1         [V09,T07] (  2,  4   )   byref  ->  rax         single-def ""Inlining Arg""
;  V10 tmp2         [V10,T15] (  2,  2   )     int  ->  rax         single-def ""Inline stloc first use temp""
;  V11 tmp3         [V11,T14] (  2,  2   )     ref  ->  rax         class-hnd single-def ""Inline return value spill temp""
;  V12 tmp4         [V12    ] (  2,  2   )     ref  ->  [rbp-28H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op class-hnd single-def ""Inline ldloca(s) first use temp""
;  V13 tmp5         [V13,T08] (  2,  4   )   byref  ->  rax         single-def ""Inlining Arg""
;  V14 tmp6         [V14,T01] (  4,  8   )     ref  ->  rsi         class-hnd single-def ""Inlining Arg""
;  V15 tmp7         [V15,T09] (  2,  4   )     ref  ->  rdi         class-hnd single-def ""Inlining Arg""
;  V16 tmp8         [V16,T02] (  4,  8   )     ref  ->  rbx         class-hnd exact single-def ""NewObj constructor temp""
;  V17 tmp9         [V17,T10] (  2,  4   )     ref  ->  rax         class-hnd single-def ""dup spill""
;  V18 tmp10        [V18,T12] (  3,  3   )     ref  ->  rax         single-def
;  V19 tmp11        [V19,T11] (  2,  4   )     ref  ->  rcx         single-def ""argument with side effect""
;  V20 PSPSym       [V20    ] (  1,  1   )    long  ->  [rbp-30H]   do-not-enreg[X] addr-exposed ""PSPSym""
;  V21 rat0         [V21,T03] (  3,  6   )     ref  ->  rax         ""delegate invoke call""
;
; Lcl frame size = 56

G_M54305_IG01:              ;; offset=0000H
 000001a5`376d4ee0        55                   push     rbp
 000001a5`376d4ee1        57                   push     rdi
 000001a5`376d4ee2        56                   push     rsi
 000001a5`376d4ee3        53                   push     rbx
 000001a5`376d4ee4        4883EC38             sub      rsp, 56
 000001a5`376d4ee8        488D6C2450           lea      rbp, [rsp+50H]
 000001a5`376d4eed        33C0                 xor      eax, eax
 000001a5`376d4eef        488945E0             mov      qword ptr [rbp-20H], rax
 000001a5`376d4ef3        488945D8             mov      qword ptr [rbp-28H], rax
 000001a5`376d4ef7        488965D0             mov      qword ptr [rbp-30H], rsp
 000001a5`376d4efb        48894D10             mov      gword ptr [rbp+10H], rcx
 000001a5`376d4eff        488BF2               mov      rsi, rdx
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (mov: 2) 32B boundary ...............................
                                                ;; bbWeight=1    PerfScore 9.25
G_M54305_IG02:              ;; offset=0022H
 000001a5`376d4f02        488D55E0             lea      rdx, [rbp-20H]
 000001a5`376d4f06        FF1500000000         call     [System.Threading.Monitor:Enter()]
 000001a5`376d4f0c        488B4D10             mov      rcx, gword ptr [rbp+10H]
 000001a5`376d4f10        488D4178             lea      rax, bword ptr [rcx+120]
 000001a5`376d4f14        8B00                 mov      eax, dword ptr [rax]
 000001a5`376d4f16        A802                 test     al, 2
 000001a5`376d4f18        7550                 jne      SHORT G_M54305_IG04
 000001a5`376d4f1a        FF1500000000         call     [System.Configuration.BaseConfigurationRecord:get_ConfigStreamInfo():System.Configuration.BaseConfigurationRecord+ConfigRecordStreamInfo:this]
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (call: 0 ; jcc erratum) 32B boundary ...............................
 000001a5`376d4f20        488BC8               mov      rcx, rax
 000001a5`376d4f23        3909                 cmp      dword ptr [rcx], ecx
 000001a5`376d4f25        FF1500000000         call     [ConfigRecordStreamInfo:get_StreamInfos():System.Collections.Specialized.HybridDictionary:this]
 000001a5`376d4f2b        488BC8               mov      rcx, rax
 000001a5`376d4f2e        488BD6               mov      rdx, rsi
 000001a5`376d4f31        4C8D1D00000000       lea      r11, [(reloc 0x4000000000425fc0)]
 000001a5`376d4f38        3909                 cmp      dword ptr [rcx], ecx
 000001a5`376d4f3a        FF1500000000         call     [hackishModuleName:hackishMethodName(System.Object):System.Object:this]
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (call: 0 ; jcc erratum) 32B boundary ...............................
 000001a5`376d4f40        488BC8               mov      rcx, rax
 000001a5`376d4f43        FF1500000000         call     [CORINFO_HELP_READYTORUN_CHKCAST]
 000001a5`376d4f49        4885C0               test     rax, rax
 000001a5`376d4f4c        741C                 je       SHORT G_M54305_IG04
 000001a5`376d4f4e        80782800             cmp      byte  ptr [rax+40], 0
 000001a5`376d4f52        7416                 je       SHORT G_M54305_IG04
 000001a5`376d4f54        488B7008             mov      rsi, gword ptr [rax+8]
                                                ;; bbWeight=1    PerfScore 35.00
G_M54305_IG03:              ;; offset=0078H
 000001a5`376d4f58        807DE000             cmp      byte  ptr [rbp-20H], 0
 000001a5`376d4f5c        741D                 je       SHORT G_M54305_IG06
 000001a5`376d4f5e        488B4D10             mov      rcx, gword ptr [rbp+10H]
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (mov: 2) 32B boundary ...............................
 000001a5`376d4f62        FF1500000000         call     [System.Threading.Monitor:Exit()]
 000001a5`376d4f68        EB11                 jmp      SHORT G_M54305_IG06
                                                ;; bbWeight=1    PerfScore 9.00
G_M54305_IG04:              ;; offset=008AH
 000001a5`376d4f6a        488B4D10             mov      rcx, gword ptr [rbp+10H]
 000001a5`376d4f6e        488BCC               mov      rcx, rsp
 000001a5`376d4f71        E8AD000000           call     G_M54305_IG13
                                                ;; bbWeight=1    PerfScore 2.25
G_M54305_IG05:              ;; offset=0096H
 000001a5`376d4f76        E99E000000           jmp      G_M54305_IG11
                                                ;; bbWeight=1    PerfScore 2.00
G_M54305_IG06:              ;; offset=009BH
 000001a5`376d4f7b        4885F6               test     rsi, rsi
 000001a5`376d4f7e        742B                 je       SHORT G_M54305_IG07
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (je: 0 ; jcc erratum) 32B boundary ...............................
 000001a5`376d4f80        4C8D4DD8             lea      r9, [rbp-28H]
 000001a5`376d4f84        488B4D10             mov      rcx, gword ptr [rbp+10H]
 000001a5`376d4f88        488BD6               mov      rdx, rsi
 000001a5`376d4f8b        4533C0               xor      r8d, r8d
 000001a5`376d4f8e        FF1500000000         call     [System.Configuration.BaseConfigurationRecord:FindFactoryRecord(System.String,bool,byref):System.Configuration.FactoryRecord:this]
 000001a5`376d4f94        33D2                 xor      rdx, rdx
 000001a5`376d4f96        488955D8             mov      gword ptr [rbp-28H], rdx
 000001a5`376d4f9a        4883C050             add      rax, 80
 000001a5`376d4f9e        F60002               test     byte  ptr [rax], 2
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (test: 1) 32B boundary ...............................
 000001a5`376d4fa1        0F95C0               setne    al
 000001a5`376d4fa4        0FB6C0               movzx    rax, al
 000001a5`376d4fa7        85C0                 test     eax, eax
 000001a5`376d4fa9        7454                 je       SHORT G_M54305_IG10
                                                ;; bbWeight=1    PerfScore 13.25
G_M54305_IG07:              ;; offset=00CBH
 000001a5`376d4fab        488B4D10             mov      rcx, gword ptr [rbp+10H]
 000001a5`376d4faf        488B7128             mov      rsi, gword ptr [rcx+40]
 000001a5`376d4fb3        488B7920             mov      rdi, gword ptr [rcx+32]
 000001a5`376d4fb7        3936                 cmp      dword ptr [rsi], esi
 000001a5`376d4fb9        FF1500000000         call     [CORINFO_HELP_READYTORUN_NEW]
 000001a5`376d4fbf        488BD8               mov      rbx, rax
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (mov: 2) 32B boundary ...............................
 000001a5`376d4fc2        488BCB               mov      rcx, rbx
 000001a5`376d4fc5        FF1500000000         call     [System.EventArgs:.ctor()]
 000001a5`376d4fcb        488B1500000000       mov      rdx, qword ptr [(reloc 0x4000000000422170)]
 000001a5`376d4fd2        488D0C13             lea      rcx, bword ptr [rbx+rdx]
 000001a5`376d4fd6        488BD7               mov      rdx, rdi
 000001a5`376d4fd9        FF1500000000         call     [CORINFO_HELP_ASSIGN_REF]
 000001a5`376d4fdf        488B4630             mov      rax, gword ptr [rsi+48]
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (mov: 3) 32B boundary ...............................
 000001a5`376d4fe3        4885C0               test     rax, rax
 000001a5`376d4fe6        740D                 je       SHORT G_M54305_IG08
 000001a5`376d4fe8        488B4808             mov      rcx, gword ptr [rax+8]
 000001a5`376d4fec        488BD6               mov      rdx, rsi
 000001a5`376d4fef        4C8BC3               mov      r8, rbx
 000001a5`376d4ff2        FF5018               call     qword ptr [rax+24]System.Configuration.Internal.InternalConfigEventHandler:Invoke()
                                                ;; bbWeight=1    PerfScore 29.00
G_M54305_IG08:              ;; offset=0115H
 000001a5`376d4ff5        90                   nop
                                                ;; bbWeight=1    PerfScore 0.25
G_M54305_IG09:              ;; offset=0116H
 000001a5`376d4ff6        4883C438             add      rsp, 56
 000001a5`376d4ffa        5B                   pop      rbx
 000001a5`376d4ffb        5E                   pop      rsi
 000001a5`376d4ffc        5F                   pop      rdi
 000001a5`376d4ffd        5D                   pop      rbp
 000001a5`376d4ffe        C3                   ret
                                                ;; bbWeight=1    PerfScore 3.25
G_M54305_IG10:              ;; offset=011FH
 000001a5`376d4fff        488B4D10             mov      rcx, gword ptr [rbp+10H]
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (mov: 3) 32B boundary ...............................
 000001a5`376d5003        488B4928             mov      rcx, gword ptr [rcx+40]
 000001a5`376d5007        488B5510             mov      rdx, gword ptr [rbp+10H]
 000001a5`376d500b        4C8BC6               mov      r8, rsi
 000001a5`376d500e        4533C9               xor      r9d, r9d
 000001a5`376d5011        3909                 cmp      dword ptr [rcx], ecx
 000001a5`376d5013        FF1500000000         call     [System.Configuration.Internal.InternalConfigRoot:ClearResult()]
                                                ;; bbWeight=1    PerfScore 10.50
G_M54305_IG11:              ;; offset=0139H
 000001a5`376d5019        90                   nop
                                                ;; bbWeight=1    PerfScore 0.25
G_M54305_IG12:              ;; offset=013AH
 000001a5`376d501a        4883C438             add      rsp, 56
 000001a5`376d501e        5B                   pop      rbx
 000001a5`376d501f        5E                   pop      rsi
; ............................... 32B boundary ...............................
 000001a5`376d5020        5F                   pop      rdi
 000001a5`376d5021        5D                   pop      rbp
 000001a5`376d5022        C3                   ret
                                                ;; bbWeight=1    PerfScore 3.25
G_M54305_IG13:              ;; offset=0143H
 000001a5`376d5023        55                   push     rbp
 000001a5`376d5024        57                   push     rdi
 000001a5`376d5025        56                   push     rsi
 000001a5`376d5026        53                   push     rbx
 000001a5`376d5027        4883EC28             sub      rsp, 40
 000001a5`376d502b        488B6920             mov      rbp, qword ptr [rcx+32]
 000001a5`376d502f        48896C2420           mov      qword ptr [rsp+20H], rbp
 000001a5`376d5034        488D6D50             lea      rbp, [rbp+50H]
                                                ;; bbWeight=1    PerfScore 7.75
G_M54305_IG14:              ;; offset=0158H
 000001a5`376d5038        807DE000             cmp      byte  ptr [rbp-20H], 0
 000001a5`376d503c        740A                 je       SHORT G_M54305_IG15
 000001a5`376d503e        488B4D10             mov      rcx, gword ptr [rbp+10H]
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (mov: 2) 32B boundary ...............................
 000001a5`376d5042        FF1500000000         call     [System.Threading.Monitor:Exit()]
                                                ;; bbWeight=1    PerfScore 7.00
G_M54305_IG15:              ;; offset=0168H
 000001a5`376d5048        90                   nop
                                                ;; bbWeight=1    PerfScore 0.25
G_M54305_IG16:              ;; offset=0169H
 000001a5`376d5049        4883C428             add      rsp, 40
 000001a5`376d504d        5B                   pop      rbx
 000001a5`376d504e        5E                   pop      rsi
 000001a5`376d504f        5F                   pop      rdi
 000001a5`376d5050        5D                   pop      rbp
 000001a5`376d5051        C3                   ret
                                                ;; bbWeight=1    PerfScore 3.25

; Total bytes of code 370, prolog size 34, PerfScore 172.50, instruction count 118, allocated bytes for code 370 (MethodHash=a4d32bde) for method System.Configuration.BaseConfigurationRecord:OnStreamChanged(System.String):this
; ============================================================
```

According to the previous live var ranges, `this` is in `rcx` in the entire `G_M54305_IG06` group, which looks wrong. After the change we report the stack home which seems better."
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Disposes connection in a separate task to not to block the scavenging timer callback on the stream close.
Guards scavenging timer callback from parallel execution.

Fixes #61505 and #61506

I plan to validate the fix with the customer before merging. But I'd like to know if the way I solved this is not completely wrong or too different from what you had in mind? @github @github 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ManickaP</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Http`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"1-byte default for bool is likely wrong more than 50% of the time and it will have to be overridden most of the time. Given that, I think it would be better to make the marshaling directive for bool mandatory.

It matches the approach that we took with string marshaling. There is no great default for string marshaling and so we require it to be always specified explicitly.  "
"I looked most everything over just to familiarize myself with the changes (except morph). Will go back through in more detail tomorrow and write up some specific feedback.

Overall I agree this looks like a very nice cleanup.

Seems like we use the ""enumerate early args then late args"" pattern quite often, I wonder if some sort of combined iterator makes sense.

Also wonder if we can come up with some kind of safeguards to make it harder to look at the wrong enumerations. Or maybe find better descriptive names?"
"The single diff is due to a new CSE which happens due to us using wrong handle types in `impTokenToHandle` when `importParent` is true. We have two `CORINFO_HELP_NEWSFAST` calls with the same handles except one of them is marked as a method instead of token, and after some arithmetic we can now CSE them.

I am fixing the `impTokenToHandle` problem as part of #70437."
"Generally the user manager does all of the validations, errors at the store level are usually something going really wrong, like you mucked with the schema, or for this bug, you have duplicate emails in your db and try to use it like a key"
You don't need include and exclude patterns. The reason is that anything that is not included will be already excluded. Am I wrong?
"I think that the behavior here is wrong, we should fix it, and make an announcement if necessary."
I'm assuming there's no use case for exiting the debugging state within a given browser tab. If that's wrong then I guess we'd need more logic to delete the `sessionStorage` entry if it's becoming false.
">rewrittenArguments = factory.MakeTempsForDiscardArguments(rewrittenArguments, temporariesBuilder); [](start = 16, length = 98)

>rewrittenArguments = factory.MakeTempsForDiscardArguments(rewrittenArguments, temporariesBuilder); [](start = 16, length = 98)

I believe this is a wrong place for this operation, it should be performed before the ""__arglist"" check (see [https://github.com/dotnet/roslyn/issues/19382](https://github.com/dotnet/roslyn/issues/19382)). I understand that this is preexisting problem, but I suggest to move this code out of this function, into MakeArguments right before this function is called. This will make the code cleaner because we will be able to get rid of the ```factory``` and ```temporariesBuilder``` parameters, and the conditional logic associated with them. As an added bonus, the crash in the compiler will be fixed, please add the unit-test from the issue into OutVarTests.cs.   #Closed"
wrong link to issue / pull request for th the `addresses #xxxx` I think
"> The version of Microsoft.NET.Compilers.Toolset that's shipping as part of the the SDK is 3.8.0-5.20570.14

That was true at 5.0 RTM but has changed with every bug fix we take to the compiler. There have been two such fixes since RTM. We should make sure we understand how this process works to ensure Razor has the Roslyn bits it's expected to be getting. Think that can be a follow up discussion though. 

> Both of these get the compiler version through a single project / package reference:

This is still where I'm stuck. If they both get their version from a single project reference then how did they get out of sync at all? I can definitely understnad how they would be the wrong version but not how they would be out of sync. 
"
"I don't think it's necessary to replace easily readable Linq with manual foreach in methods that run only once. I doubt it will bring any noticeable difference. I believe that issue you've linked is about optimizing core things, but I might be wrong."
"> there is nothing wrong

Yes there is.  features that are coded differently and work differently than the rest of the IDE act as a tax on future maintainers.  It means that instead of having uniform patterns and approaches to solving problems, the maintainer has to figure out why things are done differently.  That's why we create supplementary APIs to address these common patterns, and why we want all our features to use them.  please do not be different here. This feature is not special and does not warrant side-stepping the infrastructure we've spent over a decade building.  

This is the philosophy we take with all our code action features (regardless of whether they are internally or externally contributed)."
Ah got it. That's crazy though.
"Irrelevant comment, the issue and their details is explained in the next comment

<hr>

> 
> 
> Sorry if I misunderstood but if your question is if the `spacer.style.display = 'table-row';` is getting executed for the `simpliefied-layout`, yes it is:
> 
> This is current logic (works for scroll-down but not for scrolll-up):
> 
> ```ts
> const mutationObserver = new MutationObserver((mutations: MutationRecord[], observer: MutationObserver): void => {
>   if (isContainerTableRalatedElement(scrollContainer) && spacer.style.display !== 'table-row') {
>     observer.disconnect();
>     spacer.style.display = 'table-row';
>     observer.observe(spacer, { attributes: true });
>   }
> 
>   intersectionObserver.unobserve(spacer);
>   intersectionObserver.observe(spacer);
> });
> 
> function isContainerTableRalatedElement(container: HTMLElement | null): boolean {
>   return container !== null && (scrollContainer instanceof HTMLTableElement || scrollContainer instanceof HTMLTableSectionElement);
> }
> ```
> 
> For the `simple-layout` (without `tbody`) the if statement gets executed and works well when scrolling-down, but something strange happens when scrolling-up:
> 
> ```ts
> observer.disconnect();  //--> here the `spacers` are of the correct width = `table-cell` 
> spacer.style.display = 'table-row';  // --> after the assignment the `spacers` gets a wrong width , instead of of getting the full-width of the container it gets converted to 0
> observer.observe(spacer, { attributes: true });
> ```
> 
> 📝 Note: What makes me thing this is a bug is that once the width changes to 0 as an effect of doing this `spacer.style.display = 'table-row'; ` it stopping getting updates even if you manually set it to `width: 100%` or `width: 300px`"
">VisitStatements(operation.Children); [](start = 12, length = 36)

This means that, if there are no children, the entire node will disappear. This feels wrong. The VisitNoneOperationStatement has the same problem, BTW. We probably should add another statement with an invalid operation that is similar to the ```operation```, but with all children removed. And probably do the same for VisitNoneOperationStatement, only create operation None there. #Closed"
"Note ""add to"" sounds wrong as well.  I don't really have an idea waht it means (for example: will it leave the member alone where i am?  or does it pull it up?).  The feature is called ""Pull members up"" this text should be `Pull '{0}' up to '{1}'`"
"this is wrong. EventListenerMetadata expects none null none zero workspace kinds. "
"It's unfortunate we're adding another allocation.  We could explore ways to avoid it, e.g. using a type like:
```C#
private sealed class LinkedTimedCancellationTokenSource : CancellationTokenSource
{
    private readonly Timer _timer;
    private readonly CancellationTokenRegistration _reg1;
    private readonly CancellationTokenRegistration _reg2;

    public volatile bool TimerFired;

    public LinkedTimedCancellationTokenSource(CancellationToken token1, CancellationToken token2, TimeSpan timeout)
    {
        Action<object> cancelCallback = s => ((LinkedTimedCancellationTokenSource)s).Cancel();
        _reg1 = token1.UnsafeRegister(cancelCallback);
        _reg2 = token2.UnsafeRegister(cancelCallback);
        _timer = new Timer(s =>
        {
            var thisRef = (LinkedTimedCancellationTokenSource)s;
            thisRef.TimerFired = true;
            try { thisRef.Cancel(); } catch (ObjectDisposedException) { }
        }, this, timeout, Timeout.InfiniteTimeSpan);
    }

    protected override void Dispose(bool disposing)
    {
        _timer.Dispose();
        _reg2.Dispose();
        _reg1.Dispose();
        base.Dispose(disposing);
    }
}
```
and then constructing one of these when a timeout is set, e.g.
```C#
if (hasTimeout || cancellationToken.CanBeCanceled)
{
    disposeCts = true;
    cts = hasTimeout ?
        LinkedTimedCancellationTokenSource(cancellationToken, _pendingRequestsCts.Token, timeout) :
        CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _pendingRequestsCts.Token);
}
```
That then also implicitly handles the rooting issue, avoids the need to pass around the additional Timer (since it's encapsulated in the CTS), etc.

I'm not sure if it's worth it, but we already allocate a bunch of objects per request, and one of the things we want to look at in this release is driving that down, so increasing it is going in the wrong direction, especially when we end up paying it on all requests in order to handle an exceptional case."
dumb question about underscore.  does it have to be literally written as `_`?  or can it be written as `\u005f`.  I ask because it's unclear to me if features should be checking hte token's ValueText or raw text for these sorts of checks. #Resolved
"Sorry, gave the wrong hint. This happens when disabling/enabling extensions. I still believe that dispoables pile up in that case"
"Wait am I crazy? Shouldn't this be `>>4`? I thought bit shifting worked like this:

```
(param & 0x3) | (param  & 0xC0) >> 0); // BB__'__BB
(param & 0x3) | (param  & 0xC0) >> 1); // _BB_'__BB
(param & 0x3) | (param  & 0xC0) >> 2); // __BB'__BB
(param & 0x3) | (param  & 0xC0) >> 3); // ___B'B_BB
(param & 0x3) | (param  & 0xC0) >> 4); // ____'BBBB
```"
"Hardcoding language-specific comment delimiters here seems wrong.  
"
"Sorry, wrong repo"
"> Fwiw a very similar problem happens with SelectionMode Single, does this fix that also? The repro project can be edited to use Single instead and it should show that error also.

~It would greatly help us if you could test that. Since you are the one spotting this bug, you can judge best if all scenarios are fixed :)~

See I read it wrong now, sorry about that. Is there also an issue for the single selection mode? It seems to be working fine, at least with the changes in this code :)"
"I've read your comments just now, but I'm not sure I understand them entirely...
First of all: Is there a security issue with the current code?

The way I understand this, we don't check the security info during writing which can cause us to create a file with the wrong security info despite `elevatedOnly` being true, right? But is that an issue if we delete that file during `ReadUTF8File` anyways? I personally don't mind this being a ""waste of time"", because this would be a situation that can only be created artificially, for instance by a user creating the file themselves... As such it's unlikely to occur in practice, isn't it?"
"Words are hard, and copy/pasting is easy. The ""but is not itself generic"" is just wrong and should be deleted from this comment."
"It's possible. Don't get us wrong there. It's just that I don't think it's likely to happen. Significantly less likely to happen than me just updating the documentation to explain the way the world is and make recommendations on which path to use.

If I had to hazard a guess (and this is a guess based on my personal experience, please don't misinterpret it as some declaration)...
- GDI has been generally superseded by the DirectX family of graphics technologies
- GDI is a kernel-mode based technology which we generally don't favor anymore primarily due to security
- GDI is old so its behavior and quirks are relied on by a large swath of existing software so any change is risky
- GDI is old... so none of the original owners or decision makers are around to inform changes anymore
- The team that owns GDI likely owns a handful of other technologies and areas that are more relevant to modern development
- This particular issue is new or hasn't been popular enough, on a broad developer market scale, for it to rank higher than the other ongoing work

I would guess that a combination of all of these factors go into the unlikelihood that `PolyTextOut` will be updated at this point.

I will have no problem in looking these sorts of things up for you now and in the future. And I also have no problem updating the official public documentation to help better inform you and others."
"Yes, it was because I did not want to `#if WATCH/TVOS` but I think you are right customer code can do crazy stuff "
"In general, I cringe quite a bit when I see a new parameter with a default value _which is an optional_ being added to a method. it suggests that we are tackling something at the wrong level of abstraction -- putting more optional features into a complicated method multiplies the matrix of possibilities it needs to consider, and further _requires_ that we write tests to cover the new matrix under all circumstances.

Remember, TextAttribute is part of conhost... and conhost will likely never support this feature. That's one nullopt passed for every color lookup in conhost."
"You are right. Due to the unconditionally `RemoveNullableIfPresent  `dt.$$` suggest `DateTime` members, which is wrong. Good catch."
"This fixes two issues
1.  We would hit a null ref on line 384 if all of the completion items had default commit characters (aka the commit characters field on every completion item was null). 
2.  The algorithm is trying to promote the most used commit character set onto the list itself, then null out commit chars on any completion item using that set to save serialization.  However this skipped _originally_ null commit chars (indicating that the item should use commit chars from `Initialize`).  This resulted in the _second most used_ commit char set being promoted to the `CompletionList.CommitChars`, and both items with default chars and second most used commit chars having their commit chars nulled out.  This means for items that originally had null commit chars (aka use default from `Initialize`), the client would use the wrong commit chars from the completion list."
"Just tried out giving it an atbitrary file path and let it throw. Don't see any error diaglog/indicator from the UI. I am thinking about let it throw if anything wrong with opening the document so we can get the exception from  Telemetry late, but yeah the downside of it would be the remaining code will not execute either (if there are more definitions). @github how does csharp handle partial success for go to definition?

"
"If the wrong one gets loaded the CompilerInfo test fails. Everything else should be ok. 
BTW, this is temporary - once we insert the RTM one into .NET runtime and we start running on that runtime we can remove the env variable."
"Nope I was wrong about this. "
"The minimal implementation is to return static `(...) => true` delegate here in `DangerousAcceptAnyServerCertificateValidator` and then check for it by reference in `ServerCertificateCustomValidationCallback` setter and not throw `PlatformNotSupportedException`. At least that's how I read the documentation. It doesn't necessarily guarantee that the validation gets bypassed on platforms where that is not possible. I could be reading the documentation wrong though (_and on second re-read I think I read it wrong_ 😩).

`SockersHttpHandler` on Android may be tricky and I am aware of the limitations in `SslStream` implementation. For something like `NSUrlSessionHandler` it would be possible to expose `DangerousAcceptAnyTrust` callback and assign it through reflection to `TrustOverrideForUrl`."
"> the position is resetet in CheckContentSignatureAsync

The streams involved here aren't seekable.

> why do you think it is not useful?

Because doing this correctly adds cost to workaround a server that's actively doing the wrong thing.  There are a myriad of ways it could be doing the wrong thing, and by returning the data without error, it's only working around this one very specific way the server is doing it wrong, and in doing so, passing along effectively corrupt data to the consumer.  What if the server said it was speaking gzip but sent down data as zlib or deflate?  What if the server said it was speaking gzip but didn't send the gzip header, only the compressed body and gzip footer?  Etc."
"Actually, I'm pretty sure that's wrong.  I'll see if I can write a test.
"
"Changed, and separated 2 RemoveChange() implementation (current lookup and `CollectionsMarshal.GetValueRefOrAddDefault`) into 2 tfm files because `CollectionsMarshal.GetValueRefOrAddDefault` is from .net 6. Correct my understand if wrong, thanks."
"this is something that already existed and to be honest I have not questioned that before you have asked the question. It seems that @github agrees with you (https://github.com/dotnet/runtime/pull/65059#issue-1128165969):

> The MoveDirectory_FailToMoveLowerCaseDirectoryWhenUpperCaseDirectoryExists is technically wrong on Unix IMHO.
The case sensitivity is determined by given filesystem not by the OS itself."
"Looks like something is [still wrong](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=5980544&view=logs&j=c0608d2c-cd35-5108-9823-4eba50b2a6dc&t=3902128e-cf70-5663-503c-88341a49ef21):

```
##[debug]Microsoft.PowerShell.Commands.WriteErrorException: The SourcePath 'D:\a\1\s\$(STABLE_APIDIFF_PATH)' does not exists
##[error]The SourcePath 'D:\a\1\s\$(STABLE_APIDIFF_PATH)' does not exists
```"
"Could you add a `value.bar` inside the if statement, too? Just to verify that other properties aren't narrowed despite being the same index signature. (I don't think it'll be wrong, I just want to see it in the test)"
"The building works fine, it's only when publishing crossgen2 that NativeAOT has to link the resulting binaries together, and if the NativeAOT binaries reference openssl directly, then they expect to be passed the SOs during linking.

I could simply disable NativeAOT of crossgen during the source build, but that would still mean that the NativeAOT binaries that are constructed during source build will not actually work with the NativeAOT targets, because the linking command is wrong.

I could try to disable NativeAOT building for source build entirely... but that seems like we're headed in the wrong direction. We'll almost certainly need to eventually get it working, and then we'll still have to solve this problem."
"With or without the codefix, I like the `()` message better since it shows what's wrong instead of naming it in terms that not everyone understands immediately."
"```suggestion
                            Debug.Fail(""WriteCore wrote the wrong amount of data"");
```

Seems to more match the context"
"@github Thanks for the feedback. Not sure that I fully understood the idea. Correct me if I'm wrong., so need to do the following changes

1. `sortText` property in `CompletionEntry` need to change from `string` to `number` - is it ok to TSServer response?
2. Create a helper function to avoid `isDeprecated` conditions, and use it for all sort types., not only in `getCompletionEntriesFromSymbols`

"
"Just a note, but this seems like a positive change; the `import E from ""lib""` in the original was removed as it was unused, which then made the old sorter pull `import ""lib""` up above the previous `declare module ""mod"" {}`, which felt wrong even though it would have no side effects. Now it's left in place, which feels right."
"> This is exactly the same as InstrumentSwitchStatementExpression, InstrumentCatchClauseFilter and others which you added but without the same kind of tests that you now seem to think are required. How did you eliminate your doubts then?

I assume the scenarios are tested under umbrella of dynamic analysis tests. I also had more context at the time, given that the feature was under active development and I was working on it. Right now, I am reviewing the code, the code that is either new, or significantly modified since then. The code that appears to use some different logic around invoking instrumentation. All I have to go from - is my intuition, which might or might not be wrong. If you are so against adding tests, I suggest a compromise - let's remove usage of the new API from the product and start using it when we can easily test its actual effect under different conditions, or add a PROTOTYPE comment in the right place to catch up on testing later.    

---
In reply to: [617397889](https://github.com/dotnet/roslyn/pull/43430#issuecomment-617397889) [](ancestors = 617397889,617388877,617380907,617316315,616714458,616222134)"
"This comment seems wrong now.  also, why did this change?
"
"This is totally wrong
"
"Ok.  So normal time here is 5 seconds on first run.  However, even with this PR we go to 30 seconds.   That's a 6x regression in perf here.  I imagine multiple runs will also incur perf issues.  Any sort of change (like an edit to the compiler layer) will force compilations and skeletons to be recreated for everything higher.

I'm planning on doing some work where we can allow stale results to eb returned.  I think i'll likely also make it so that during solution load we just do not run SGs. The perf hit is just too crazy high, and interferes significantly with trying to get results in a reasonable amount of time.

I think it's likely reasonable that we can say during loading that we dont' give SG results.  This is esp. so as we already put an notification in the NavTo box saying that results may be incomplete at this time."
"Regarding newline/whitespace handling, i'd be curious what this looks like for something like:

```
    /// <exception cref='System.NullReferenceException'>
    ///     Something went wrong with nulls
    /// </exception>
    /// <exception cref='System.ArgumentNullException'>
    ///     Something went wrong with an argument
    /// </exception>
    /// <exception cref='System.ArgumentOutOfRangeException'>
    ///     Something went wrong with an argument
    /// </exception>
```

Also curious how that compares to before this change, or how it compares to how summary and remarks are shown etc."
"> There's a lot going on here and it will take me some time to review. I'm not certain I agree with some of the changes here, as there are a large number of places where you've switched to use a less precise type so that you can treat `node` as only an ""error node"". A separate `errorNode` argument argument would likely be preferable in those cases.
> 
> It might be worth breaking out the changes to fix the caching issues you mentioned into a separate PR, as those changes seem less controversial to me.

Thanks for getting back to me! I really wasn't sure whether to prioritize making fewer changes and making it work with what's already there or to make changes like you suggested. I tried to think of how to solve the problem while making the smallest number of changes, then take one step towards what I would consider ideal. I wasn't sure what kind of philosophy there is about these kinds of things so I just guessed. Since my guess was wrong, I'll go back and make the changes I think would be ideal instead of trying to guess where my hands should be tied. I did kinda deviate from that anyway and got caught up a bit when I noticed a bunch of other issues while looking at the code. I will work on this more this week. I'll make this better.

(My first implementation was more along the lines of your suggestion but I thought it could be rejected for adding more than absolutely necessary) "
@github It looks like you pushed to a wrong branch
"@github I may be wrong, but the constant test failures may be an indication of what is happening."
"Missing RPM for aarch64 shouldn't be a problem. But this still doesn't work for me end-to-end:

```
$ cat /etc/os-release
NAME='Red Hat Enterprise Linux'
VERSION='8.4 (Ootpa)'
ID=rhel
ID_LIKE=fedora
VERSION_ID=8.4
PLATFORM_ID=platform:el8
PRETTY_NAME='Red Hat Enterprise Linux 8.4 (Ootpa)'
ANSI_COLOR='0;31'
CPE_NAME=cpe:/o:redhat:enterprise_linux:8.4:GA
HOME_URL=https://www.redhat.com/
DOCUMENTATION_URL=https://access.redhat.com/documentation/red_hat_enterprise_linux/8/
BUG_REPORT_URL=https://bugzilla.redhat.com/
REDHAT_BUGZILLA_PRODUCT='Red Hat Enterprise Linux 8'
REDHAT_BUGZILLA_PRODUCT_VERSION=8.4
REDHAT_SUPPORT_PRODUCT='Red Hat Enterprise Linux'
REDHAT_SUPPORT_PRODUCT_VERSION=8.4
$ git clone https://github.com/dotnet/runtime
$ cd runtime
$ git rev-parse HEAD
1011edc50c0ecdaf80bc9b1bc9c802f86583170f'
$ ./build.sh --subset clr+libs+libs.tests --test --runtimeconfiguration Release --librariesConfiguration Debug /p:WithoutCategories=IgnoreForCI /p:NoPgoOptimize=true
__DistroRid: linux-arm64
Downloading 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.sh'
dotnet-install: Note that the intended use of this script is for Continuous Integration (CI) scenarios, where:
dotnet-install: - The SDK needs to be installed without user interaction and without admin rights.
dotnet-install: - The SDK installation doesn't need to persist across multiple CI runs.
dotnet-install: To set up a development environment or to run apps, use installers rather than this script. Visit https://dotnet.microsoft.com/download to get the installer.

dotnet-install: Downloading primary link https://dotnetcli.azureedge.net/dotnet/Sdk/6.0.100-preview.6.21355.2/dotnet-sdk-6.0.100-preview.6.21355.2-linux-arm64.tar.gz
dotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/6.0.100-preview.6.21355.2/dotnet-sdk-6.0.100-preview.6.21355.2-linux-arm64.tar.gz
dotnet-install: Adding to current process PATH: `/home/tester/runtime/.dotnet`. Note: This change will be visible only when sourcing script.
dotnet-install: Note that the script does not resolve dependencies during installation.
dotnet-install: To check the list of dependencies, go to https://docs.microsoft.com/dotnet/core/install, select your operating system and check the ""Dependencies"" section.
dotnet-install: Installation finished successfully.
/home/tester/runtime/eng/common/tools.sh: line 459: 68406 Segmentation fault      (core dumped) ""$_InitializeBuildTool"" ""$@""
```

It looks like dotnet-sdk-6.0.100-preview.6.21355.2-linux-arm64.tar.gz is still broken? Am I doing something wrong?"
"> am I doing something wrong with /t:UpdateRuntimeJson? Should it have worked out of the box?

It would have when running pack.  If you aren't packing you can run the target directly.  I think the docs are unclear about this since they say ""rebuild the project"" which made sense when it was a dedicated pkgproj but is no longer the best wording now that it's a CSProj.  I'm fine with the update you made to the docs. "
"I guess my initial diagnosis of this issue was wrong. It turns out that `ins_Store(varTypes dstType)` meaning it expects the type of destination. The node that we are trying to codegen is storing the `float` to a static field and needs redirection of offset which is done using `STOREIND`. Currently we correctly pass the `tree->TypeGet()` to it instead of `data->TypeGet()`.

```
N039 ( 22, 20) [000004] --CXG--------        t4 = *  CALL      float  TestClass.Method1 REG f0 $280
                                                   /--*  t8     byref  
                                                   +--*  t4     float  
N041 ( 11, 15) [000015] -ACXG--------             *  STOREIND  int    REG NA
```

The right thing that should happen IMO is using the following:

https://github.com/dotnet/runtime/blob/7638249ee53ad7eaa835f1ffe0bc8acaaaa57476/src/coreclr/jit/emitarm.cpp#L7843-L7844

which means, we should do a `vmov tmpReg, t4` and then `str tmpReg [reg+offset]`, but that code is only kicked when `if ((indir->gtFlags & GTF_IND_UNALIGNED))` which happens in importer. Investigating why that is not set.

Also, for x86, the return type of `Method1` is `int` instead of `float` (done during lowering). Need to check that too. Since the type `TYP_INT` matches for both `t4` (the data) and the `tree` (`STOREIND` node), we don't see it happen on other platforms.

```
N014 ( 20, 14) [000004] --CXG-------         t4 = *  CALL      int    TestClass.Method1 $280
                                                  /--*  t8     byref  
                                                  +--*  t4     int    
N004 (  8,  8) [000015] -ACXG-------              *  STOREIND  int  
```"
"Update: I'm wrong this is known.

<details>

> @github there's an error on the `Mono llvmfullaot Pri0 Runtime Tests Run Linux x64 release` job, is that one known?
> 
> ```
>   aot-compile: compiling /__w/1/s/artifacts/tests/coreclr/Linux.x64.Release/Tests/Core_Root/Microsoft.Interop.DllImportGenerator.dll; MONO_PATH: /__w/1/s/artifacts/tests/coreclr/Linux.x64.Release/Tests/Core_Root:/__w/1/s/artifacts/tests/coreclr/Linux.x64.Release/Tests/Core_Root
>   Failed to load method 0x6000034 from '/__w/1/s/artifacts/tests/coreclr/Linux.x64.Release/Tests/Core_Root/Microsoft.Interop.DllImportGenerator.dll' due to Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies..
>   Run with MONO_LOG_LEVEL=debug for more information.
>   AOT of image /__w/1/s/artifacts/tests/coreclr/Linux.x64.Release/Tests/Core_Root/Microsoft.Interop.DllImportGenerator.dll failed.
>   Mono Ahead of Time compiler - compiling assembly /__w/1/s/artifacts/tests/coreclr/Linux.x64.Release/Tests/Core_Root/Microsoft.Interop.DllImportGenerator.dll
> ```

I don't think I've seen this before.  I don't think that DllImportGenerator.dll should be copied to Core_Root (or at least it shouldn't be AOTd once it's in Core_Root) - I think it's a C# source generator.

</details>"
"I think what's going on is that there is an expectation that the PSP sym for both main method and funclet is the same delta from CallerSP. There is just one offset for this in the gc info.

This isn't the case currently; the OSR method delta includes the Tier0 frame size but we don't pad out the OSR funclet frame to match.

So we end up with a situation where we report PSPSym offset in gc info as -80 from Caller SP. For the OSR frame this is (-16 osr part of frame) + (-64 tier0 frame) and is fine.

But this offset doesn't work for the funclet; it's PSP sym is at (-16) with respect to Caller SP. So when we try and find the PSP sym value for the funclet we end up with the wrong value and things go downhill from there.

Options are to either pad the funclet frame or to have the OSR frame use the Tier0 frame's PSP Sym slot. The latter seems appealing but may not be possible as the PSP sym location varies depending on which regs get saved, and this differs between Tier0 frame and OSR frame (eg in this case the Tier0 PSP sym offset is at (-8).). If we tried to normalize for that by saving PSPSym first after varargs we might run into issues because the Tier0 frame spills varargs at top of frame and there's no reason for the OSR frame to do this (but see [note](https://github.com/dotnet/runtime/pull/62831#issuecomment-995371599)).

So as ugly as it seems, we may need to pad the funclet frame to include a phantom tier0 frame."
"This line was picking the wrong type, `Microsoft.Maui.Controls.BrushTypeConverter`, so I put `XamlC.`."
"> @github bad rebase? wrong branch?

Wrong branch - should be against main. Fixed."
The original assertion was wrong here. We want this to generate strong typed stuff that won't try to do conversions. This is an update based on changes to the compiler that fixed the underlying issue.
"Wow, I remember the fixer doing a pretty good job even when fixing all instances of a problem in an entire (albeit filtered) solution. What went wrong e.g. is there an issue or three we should report in https://github.com/dotnet/roslyn-analyzers❔"
"Note: this code was wrong, and failed to account for a LocalFunction being passed in.  The updated code handles this (and has a test to validate)."
"Adding Inputs/Outputs would break the correctness of this target. Imagine you do a build, everything completes. Then a build the second time and now your target *won't* run, which means you'll end up being in the bad state. You might end up in some fun situation where then every other build would be ""right"" and then ""wrong"".

Another way to think about it: Inputs/Outputs are a statement that ""this target consumes the _contents_ of those files""...this target doesn't."
@github do you have an example where this could likely be wrong? I was able to write unit tests where this value is correctly computed to true for property reference and false for method reference.
">return BindTupleBinaryOperator(node, kind, left, right, diagnostics) [](start = 20, length = 68)

It feels wrong to call this when we already detected that there is an error and possibly ignore the fact. Also it looks like we might have done a lot of things above (created some conversions, etc.) that already could have produced errors that won't be expected if we are able to successfully bind tuple equality/inequality. I think that tuple equality should be handled similar  to other built-in operators and should be folded into logic in BinaryOperatorOverloadResolution. #Closed"
"At first I just blindly implemented this to be same as ChangeParseOptions, but after thinking about this, this seems wrong. If this returns false for ChangeParseOptions and CanApplyParseOptionChange returns true, CheckAllowedProjectChanges is still fine with such a change. Therefore CanApplyChange(ChangeParseOptions) really seems to be asking ""Can you change *any* parse options"" rather than ""Are you able to change *some* parse options"". Having this return true actually means that this workspace is fine will any kinds of parse/compilation option changes regardless of CanApplyParseOptionChange and will likely crash if that is done."
"> I also see JS and xUnit results were published in that failing job but nothing shows up in the Tests tab yet. Thoughts on why that may happen @github❔

I'm not sure, the pipeline seems to be using the `Publish test results` task in the normal way, but the link it gives to the test results page gives a 404:

https://dev.azure.com/dnceng/public/_build/results?buildId=1585745&view=logs&j=0f60fc7e-fa11-55bb-be72-9b3827ae14af&s=ff05ad62-bb9a-53b6-ce9f-72f329a63e7c&t=59e6970e-758d-59f0-7d6f-1753c59c4195&l=62

@github/dnceng are we doing something wrong?

In any case, merging this as it's green now (going to merge-commit to preserve Brennan/Hao's commits)"
"Ok.  dumb question before i go review all this... why is updating transitive references not simple (given that we already have an *existing* valid direct-reverse-reference map?

So i am adding references R1 to RN to Project P1.  Ok.  So i first add it to the 'trans references' set for P1.  I then use my reverse dep map to see who references P1, i get Pq, Pr, Ps.  I go add these references to those three projects.  I then recurse on those.   And i basically back propagate the references added to P1, backwards updating anything as necessary.

Why is that not sufficient?"
"based on previous comments, this actually feels like a bug.  This code seems to be missing required try/catches, and so could tear things down if something goes wrong."
these comments seem wrong. #Resolved
"dumb question.  why do you need to check the .CanBeCanceled part?  if you already know that one or the other has had cancellation requested, why do you ever need to check the other.

The docs say ""Creates a new <see cref=""CancellationToken""/> that is canceled when **any** of a set of other tokens are canceled.""  Since you already know ""**any**"" token was canceled, why are the others relevant at all?  "
"@github Most of the time, the checks will probably be correct. This is providing a mechanism for incremental adoption of nullability. Otherwise even simple things like asking if a type is `List<string>` will be wrong because the nullability may not match."
"Getting the `SpecialType` feels wrong here. Could you test with an array of reference types, or enum types?

Update: hum, I see that enum types will be handled because of line 371 (before calling this method: `elementType = arrayType.ElementType.EnumUnderlyingType();`).
Also worth testing with custom struct and generic type."
"> In that case I could totally imagine somebody doing `{ { singleArgCall }, { twoArgCall1, twoArgCall2 } }` and mixing back and forth like that.

Yes, i can totally imagine it to.  But i also think it's literally the 0.01% case :)  And it feels super wrong to me to hurt the 99.99% case for that one.  "
Hmmm. Let me see what I did wrong then. I see what you are saying.
"What's uncelar to me is why tehre seems to be so much exception handling all over the place.  i guess i would have expected it in two place (on the host side at least):

1. when making connections
2. when making remote calls.

it *feels* (though maybe i'm wrong) that there are far more places than that, and they all tend to do things their own way.  "
"> Is that potentially due to an assumption that TYP_SIMD8 means System.Numerics.Vector2, 

We correctly determine it to be intrinsic API and return [vector size as 8 bytes](https://github.com/dotnet/runtime/blob/master/src/coreclr/src/vm/class.cpp#L1204), but then over [here](https://github.com/dotnet/runtime/blob/master/src/coreclr/src/vm/jitinterface.cpp#L346) `eeType=ELEMENT_TYPE_R8 (0n13)` maps to `CORINFO_TYPE_DOUBLE`. I am not much familiar with this method, but I believe somewhere after we get that value (probably inside [getPrimitiveTypeForStruct](https://github.com/dotnet/runtime/blob/master/src/coreclr/src/jit/compiler.cpp#L544) or [getReturnTypeForStruct](https://github.com/dotnet/runtime/blob/master/src/coreclr/src/jit/compiler.cpp#L971) we should see if this is simd type and map to one of `TYP_SIMD8`.

Callstack just for the reference:
```
00 CoreCLR!CEEInfo::asCorInfoType
01 CoreCLR!CEEInfo::getHFAType
02 clrjit!Compiler::GetHfaType
03 clrjit!Compiler::getPrimitiveTypeForStruct
04 clrjit!Compiler::getReturnTypeForStruct
05 clrjit!Compiler::IsMultiRegReturnedType
06 clrjit!Compiler::impFixupStructReturnType
07 clrjit!Compiler::impReturnInstruction
08 clrjit!Compiler::impImportBlockCode
09 clrjit!`Compiler::impImportBlock'::`15'::__Body::Run
0a clrjit!Compiler::impImportBlock
0b clrjit!Compiler::impImport
0c clrjit!Compiler::fgImport

```

> You probably want __builtin_popcountl for the long case otherwise the result is wrong.

Ah ok. Updated here: https://godbolt.org/z/PbT_RP

> Yeah I agree that you should stick to the addv.

Thanks, will send out an update.

> If the extend the same problem as with CreateScalar?

Not sure. I assume it doesn't take in account the fact that it needs only 32-bits. "
"Should rename triplet.  To tuple, or quartet, or something.  But triplet is wrong now that it uses 4 things :smile:."
It doesn't look like this assigned value is ever used - can we remove this line? (I might be wrong about this.)
"this seems wrong.  i would think for expr-bodied members you would still want the lvalue rvalue split.  i.e. if i have `=> list[i] = list[i] + list[i]`, and i introduce local for `list[i]` then you would not want to update the lvalue version, only the two rvalue versions."
"wow, we were using the wrong button!"
"Is the old, possibly wrong, workspace not still getting passed into the VariableResolver?"
"Should this really be nullable?
1. in all of our implementation we pass it as non-nullable  (see types derived form `XsltFunctionImpl`).
2. we don't really handle it as nullable on the only place that this is referenced.
https://github.com/dotnet/runtime/blob/3174da7f9612bc6c46762fb73bba7d1cc0066b75/src/libraries/System.Private.Xml/src/System/Xml/Xsl/XsltOld/XsltCompileContext.cs#L985-L991

This is public API so it would be problematic to have this one wrong."
wrong. need to resurrect this tho
This is just wrong? It's used.
"> Feel free to do some investigation why this doesn't seem to work from the docker image we're using:
> 
> https://github.com/microsoft/vscode/blob/640fa1af29d47b4d4fa09ff9b7c12521679ef634/build/azure-pipelines/product-build.yml#L119

Dunno what's wrong, i've successfully built snap with lzo compression in stable container."
"So this is the part that sucks. `IUiaData` is down in `TerminalCore`. But all of the font info (`_desiredFont` and `_actualFont`) is actually up in `ControlCore`. Because of this, we need to have `ControlCore` tell `TerminalCore` ""hey, the font change to X"" [here](https://github.com/microsoft/terminal/pull/10336#discussion_r660842660).

`TSFInputControl` looks like it works directly with the `TerminalControl` (now `ControlCore` since the split) to get what it needs. "
"> Seeing this warning after adding values for `highContrastLight`. Any ideas what I'm doing wrong?
> 
> ```
> color contribution gitDecoration.addedResourceForeground does not provide color 'defaults.highContrastLight'. Using color for `light` instead (#587c0c).
> ```
> 

Pushed a fix
"
"I would interesting in details what makes this specific instance of `objc_msgSend` P/Invoke wrong. I do not see any problem with it.

> we can reduce the chattiness of multiple interop calls here by moving it to native and making it one call.

We prefer to write in C# where possible. I think we should resort to rewriting C# in C++ only where it makes measurable performance difference."
"Mmh not sure this will be rendered properly by the IDE because it would add the tabs before the `-`. The tooltip might go a little crazy.

In general we should avoid presenting Objective-C code to users."
"Would it be better to cast these from the PlatformName enums instead of hard-coding the numbers, simply to make it harder to accidentally put in the wrong value if changes need to be made in the future? (And so one wouldn't have to look up what values they need to use from the enum if they have to make changes)."
"This logic only worked if you were in certain directories and was wrong, we can just call msbuild /t:restore and let them handle it anyway."
dumb question.  why can't you just use the GetExpressionToPlaceAwaitInFrontOf function to determine things.  I'ts not clear to me (yet) why you need this declaration.
"Hmm, I believe the semantic tagger shouldn't be affected since the `ClassificationLayer` enum is only utilized by the editor in LSP scenarios. LSP's semantic tagger automatically assigns the semantic classifications we send back to the client as `ClassificationLayer.Semantic`, so all we need to do is make sure our Roslyn syntactic tagger, which activates in the client, is marked as `ClassificationLayer.Syntactic` so that the two taggers don't interfere with each other.

At least that's my understanding, @github can correct me if I'm wrong"
"```suggestion
		void GetSampleTimestamps (nuint cpuTimestamp, nuint gpuTimestamp);
```

However, this binding is wrong, because the parameters are `NSUInteger *`, which are probably C-style arrays of NSUInteger."
"> We want to throw an exception because we think it's safer to tell the user early that they are using the wrong API for creating a symlink to the desired target.

Why do you say about using _wrong_ API? It seems you consider **formal** scenario. Can you think **real** scenario where target is abstract (unknown type)? I can not. As result my conclusion is that the API should be universal and without throw since user/application always know that is the target. Ex.: an application unpack new version to version specific directory and then create a link from generic application folder to the new one."
"Lets concatenate files properly. What happens if LocalizeDirectory does not end with a path separator? In this case it will return the wrong path.
Better do:
```pwsh
Join-Path -Path $LocalizeDirectory -ChildPath ""$($maciosPath[1]).lcl""
```
Read the docs here: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/join-path?view=powershell-7.2

There is also a nice way on how I interpolated the string using ""$()"" in the example."
wrong indentation
"We should probably prefix+suffix these.  It was wrong before, but this cleanup is just highlighting that there is an issue.

I suggest `mono_component_XYZ_private_ptr` (and a comment saying not to use them directly)."
"> Unfortunately the packaging fails [which I anticipated] by having the symlinks point to wrong location:
> 
> ```
> filipnavara@172-4-1-17 app % ls -l /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/lib/mono/Xamarin.Mac/RedistList/
> total 0
> lrwxr-xr-x  1 root  wheel  161 Mar 23 07:57 FrameworkList.xml -> /Users/builder/azdo/_work/1/s/maccore/release/_mac-install/Library/Frameworks/Xamarin.Mac.framework/Versions/7.11.0.225/lib/mono/4.5/RedistList/FrameworkList.xml
> ```
> 
> I suppose I need to modify it to make the symlink with absolute path.

This is handled by using $(IOS_TARGETDIR) instead of $(IOS_DESTDIR): the former is empty when building a package, and the same as IOS_DESTDIR when building locally.

Example:

https://github.com/xamarin/xamarin-macios/blob/b2248993de13ab31d3c66b74820cb3f0077032c6/msbuild/Makefile#L247-L248

> Is there any way to make the packages locally? Or can you give me pointer on how the other symlinks are handled? I also have an alternative solution without symlinks but I would like to understand the process nevertheless.

Unfortunately the code to build the package is not public."
"Using the hierarchy/itemid is wrong here and probably should be removed assuming the textdocument method works without the webtools side of the change.

This is for a generated projection buffer, nothing actually exists in the hierarchy for it. It's currently using the containing html buffers hierarchy/itemid information to get a name, which was never correct."
"I added necessary change but it looks like while I am doing it I did something wrong and ends up pushed to roslyn master directly...
"
"wrong utlities.ts file, you probably want src/services/utilites.ts instead."
"Do we really need this? It's not clear to me why message contents matter here, as `ValidateResponseMessage` is only concerned with the responseMessage's header. And so if contents don't actually matter for these tests, we can remove this and reduce the code introduced even further.

It also feels like `@github` is wrong. "
"> If the pinvoke search directories include multiple platform directories (ie, a folder with arm64 shared libraries and another with x64) and we see the ""wrong"" architecture before the correct one, we will fail.

CoreCLR continues probing in this case."
"I just do not know what can possibly go wrong with a call like `InitializeContext(NULL, context, NULL, &contextSize);`   - that is the same use as in the example.

"
"What's wrong with taht?
"
"Previously this test was wrong -- the `edit.insert` call applied to the start of the file, changing the first line to `str(2,|function str(n: number): string;` and eliminating that overload. The correct behavior still *has* two overloads, but shows the one with higher arity first.

As for the second test showing `{}` instead of `number`, that's because in signature help, we assume a trailing comma indicates trying to write another argument, which means `chooseOverload` fails and we go to `getCandidateForOverloadFailure` which doesn't infer type arguments."
"Later: I think this error is wrong, a result of #26236 combined with (probably) #25732. Here's a minimal repro:

```js
var freeModule = module.nodeType;
var Buffer = module.nodeType ? root.Buffer : undefined// , allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @github
 * @github {Buffer} buffer The buffer to clone.
 * @github {boolean} [isDeep] Specify a deep clone.
 * @github {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
}

module.exports = cloneBuffer;
```"
"Yes, this should happen in callers now.
In general the arg list here was only used interestingly for JIT helpers, so I have folded them in as optional arguments in `gtNewHelperCallNode` that takes care of setting the flags.

For user calls, `impImportCall` will use `impPopCallArgs` and set the flags from the arguments after this. With that said, I have reviewed the sites that use `impPopCallArgs` and it looks like I have missed the flags in a couple of places... will fold it into `impPopCallArgs`.

I have also considered making `CallArgs` handle it when inserting arguments. It should be easy to get a back-pointer to the parent `GenTreeCall` given that it is stored inline. I think it would be nice not to be able to forget, but also it is conceptually wrong to do this after rationalization, so I am not totally sure if it makes sense to do always."
"Actually, the upper limit is wrong.

The devmajor and devminor fields in the header have a length of 8 bytes, and are stored as octal integers in ASCII.

_Note: the spec does not indicate that they are stored in octal, but if you use the gnu `tar` tool to store a block/char device and inspect the file with a hex editor, the numbers are stored in octal. Also, the `tar` tool puts a null char in the last byte, even though this is also not documented in the spec._

So we have 7 available bytes, which means the upper bound is `7,777,777` in octal, or `2,097,151` in decimal. I'll adjust this and fix the exception message too."
"Private names should be transformed away *before* you do the ES2015 transform, so running into a private name here indicates something is wrong with our code and as such should result in a `Debug` assertion. The reason you shouldn't hit a Private Name here is that transformation is iterative and each transformation builds on the previous transformation:

- *ts.ts* - Removes TypeScript syntax, you should be left with only ESNext (and earlier) and module syntax
- *classFields.ts* - Removes class fields syntax, you should be left with only ESNext (and earlier, minus class fields) and module syntax.
- *esnext.ts* - Removes ESNext syntax, you should be left with only ES2019 (and earlier) and module syntax.
- *es2019.ts* - Removes ES2019 syntax, you should be left with only ES2018 (and earlier) and module syntax.
- *es2018.ts* - Removes ES2018 syntax, you should be left with only ES2017 (and earlier) and module syntax.
- *es2017.ts* - Removes ES2017 syntax, you should be left with only ES2016 (and earlier) and module syntax.
- *es2016.ts* - Removes ES2016 syntax, you should be left with only ES2015 (and earlier) and module syntax.
- *es2015.ts* - Removes ES2015 syntax (excluding generators), you should be left with only generator, ES5 (and earlier) and module syntax.
- *generators.ts* - Removes ES2015 generator syntax, you should be left with only ES5 (and earlier) and module syntax.
- *module/\*.ts* - Removes module syntax, you should be left with only ES5 (and earlier) syntax.
- *es5.ts* - Removes ES5 syntax, you should be left with only ES3 syntax.

The few exceptions are cases where we let syntax through to be later handled via substitution, but that syntax is pretty much always down-level compatible (i.e. replacing `MyEnum.Member` with `0`, it's a TS transformation but `MyEnum.Member` is legal ES3 syntax)."
"The above comment is now wrong. "
"Wait, why should they be errors? Particularly `amb = { tag: ""A"", y: 12 }` seems super wrong. But this one too seems like excess property checking is a little overzealous. For non-discriminated unions of objects, excess property checking only complains about properties non present in any constituent. Here, I would think the same rule would apply after we have filtered out the B and C constituents."
"@github 

> But how much fun do you think it is to hear that someone you respect tells you that you don't know what you're are talking about?

And if you really do not know what you are talking about then what? You shield yourself in the code of conduct and go OMG, how could people dare telling me that I'm wrong? Or perhaps you try to do better next time and avoid the not so fun part of messing up? Working for fun doesn't imply that you get to do whatever you want and that there are no consequences.

> Code reviews and PR discussions are often controversial because people care.

There was no real controversy here. I asked a question and I was expecting a reasonable answer, especially considering that it wasn't me who started this. Instead of an answer I've got some gibberish that tries to pass as code review or whatever that is supposed to be.

> Being respectful doesn't mean not making mistakes, it means unwillingness to learn from them and/or doubling down on them

It's exactly this unwillingness to learn from mistakes that brought us here. So now you're trying to explain to me how persistent shoot from the hip style commenting is respectful or not? Frankly I'm not sure what exactly it is. Let's just say that it is distasteful. Feel free to continue to go down this path, the only thing you'll achieve is to dig the hole deeper.

> And I for one am not willing to tell people to suck it up.

Yet here you are, telling me exactly that.
"
"This seems like the wrong indentation
"
"Put the comment on the wrong PR. so putting it here again :)

Can you also update client.ts and add a test for signature help in tests\cases\fourslash\server. I would copy a signature help test from tests\cases\fourslash to start.
"
"Currently linker doesn't warn if otherwise recognized attribute is used in a place where it's ignored. The main reason typically is that if somebody puts an attribute in the wrong place in a NuGet, when I build the app I would constantly get a warning without a good way to suppress it (we're building the ability to maybe suppress it now, but it's still relatively bad experience).

I can definitely move this to other namespace if it makes more sense - and maybe even change the name to something including ""Internal"" or so."
"actually this looks just wrong.
"
"A PR that references a new library just after we remove main-vs-deps, what could go wrong?!"
"> > Would be nice if ReadOnlySpan span = ""text""; would also be optimized, since it's a much more convenient syntax for strings and would be analogous to the utf8 string feature.
> 
> What is it you'd hope it would do it's not already doing? [SharpLab](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aHunGAlGNgAmAeQB2AGwCeAZQAO2MQB4wAC2xQAfAwCy5ABQBKBgF5tAIgwwEGcwG4aAXyA==)

I thought the runtime materialized the string and created a span over it then, but it seems I was wrong despite the IL using `ldstr`."
@github is a small drop (2-4%) in XState's emit time concerning here? 🤔 Or do I read those reports all wrong?
"It can be merged then. This PR mostly unlocks dynamic PGO's potential that we won't use by default in .NET 6. However, users, who care less about slower start, can set the following variables for ""FullPGO + Aggressive Inliner"" mode:
```bash
DOTNET_TieredPGO=1                        # enable PGO instrumentation in tier0
DOTNET_TC_QuickJitForLoops=1              # don't bypass tier0 for methods with loops
DOTNET_ReadyToRun=0                       # don't use prejitted code and collect a better profile for everything
DOTNET_JitExtDefaultPolicyMaxIL=0x200     # allow inlining for large methods
DOTNET_JitExtDefaultPolicyMaxBB=15        # same here
DOTNET_JitExtDefaultPolicyProfScale=0x40  # try harder inlining hot methods
```
Here are the results for TE benchmarks on citrine-linux for `Main-default` (Static PGO is included) vs `ThisPR + FullPGO + aggressive inliner` ^:
![image](https://user-images.githubusercontent.com/523221/123855230-543af000-d928-11eb-8ad2-3166fe83b688.png)
_(the diff is even bigger if we disable static PGO for the left one)_

This PR also improves the default mode, but only by a few %s in general. And, just a reminder: if we use/benchmark something with `DOTNET_TieredCompilation=0` we won't see any benefits since we use the old inlining policy for AOT and will never re-jit it for the BCL (don't expect any improvements for `dotnet/performance` micro-benchmarks if we use TC=0 there).

What is not done, but nice to have:
1) It doesn't fix https://github.com/dotnet/runtime/issues/41692, https://github.com/dotnet/runtime/issues/43761 and https://github.com/dotnet/runtime/issues/51587 since it doesn't touch ""EstimateTime"" yet.
2) It should ignore methods with insufficient samples (currently if callsite's profile >= callsite's fgFirstBb->weight -- we consider it as hot) e.g. static constructors, etc
3) Re-vise ""report noinline to vm"" logic, sometimes it might bake ""noinline"" for methods which are good candidates for inlining within specific call-sites (e.g. with const args).
4) ""resolve call token"" logic currently doesn't work for methods with loops.

If something goes wrong we can easily switch to the previous (more conservative and PGO-independent) policy."
"> The testhost ""wrong"" name is an ordering issue with the properties as the property we depend on was introduced in Directory.Build.Targets... @github any reason why we introduced it in the targets and not the props file here

Submitted https://github.com/dotnet/runtime/pull/55265 to fix the ordering issue but as you already found out, that's likely not the issue as the ordering change happened weeks ago."
"Yes I reported the issue but they didn’t see the issue. 

I guess anything could go wrong handling malfunctioning dependencies is not the responsibility of a method. (Though being able to enforce such constraints would improve any codebase.) It could e.g. return an object that doesn’t even implement the service. Bypass the null check and cause other issues down the road."
"> Some of the types passed are more complicated, QCallTypeReference is a struct with 2 fields for example.

I think I'm wrong: there's nothing special for marshaling.  All these types are represented as blittable structs and are just passed using the normal ABI calling convention.

---


But also, QCalls are PInvokes, not icalls.  
So (later, in other PRs) when we go to unify the managed side with CoreCLR, we will also need to tweak the native side: get the declarations out of icall-decl, into the QCall tables, and change the implementations to use `MONO_ENTER_GC_UNSAFE`/`MONO_EXIT_GC_UNSAFE` before they call into runtime internals."
"Pardon me if I'm wrong but my understanding is that servicing PRs need to be tagged with `Servicing-Consider` and put on the appropriate release milestone. If that's OK I will keep that in mind for future servicing PRs I encounter.

c.c. @github"
"```
System.DllNotFoundException: Unable to load shared library 'libpinvoke.so' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libpinvoke.so.so: cannot open shared object file: No such file or directory liblibpinvoke.so.so: cannot open shared object file: No such file or directory /opt/share/libpinvoke.so: wrong ELF class: ELFCLASS32 libpinvoke.so: cannot open shared object file: No such file or directory liblibpinvoke.so: cannot open shared object file: No such file or directory
```
"
What is this crazy IntPtr argument??
"My mental model may be wrong (@github and @github, please chime in) but https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching?view=vs-2019#item-and-property-mutations contains _some_ of the information
1. The `%(Filename)` item metadata causes the implicit `CreateItem` task to be batched
2. Use of that metadata also limits the `@(ResolvedCompileFileDefinitions)` and `@(RuntimeCopyLocalItems)` item groups to the item(s) with the same `%(Filename)`
    - This part doesn't seem to be explicit in the documentation
3. The `OR` clause confirms at least one such item exists

At a higher level, this creates a `@(_ProjectsToAdd)` item group containing those `@(_ProjectsInPatch)` items that match on filename with  one or more `@(ResolvedCompileFileDefinitions)` or `@(RuntimeCopyLocalItems)` items, excluding existing `@(ProjectReference)` items. Another way of looking at it is the created item group contains the projects in the current patch that (a) aren't referenced directly but (b) match assemblies in the current build."
"Dumb question: why aren't we following the order of the files themselves, given the same set of files given to the compiler in a different order does change symbols?"
"Build looks reasonable.

@github are exceptions / exemptions we have in eng/Signing.props applied when doing the signing validation in this pipeline?

Could you please enable a summary at the bottom of the logs? I can't see what went wrong in the 'Validate Symbols' step. (And, I'd forget if you told me a string to search for 😃)"
"> @github that looks like a provider failure. Our runner for Helix jobs should handle timeouts before the jobs timeout, making it unlikely to be a problem on our side. I reran the failed jobs in hope I'm correct.
> 
> It's possible this relates to earlier failures @github and @github were discussing in the FR Teams room today. Not sure…

I haven't made the FR issue yet but I'm tracking https://portal.microsofticm.com/imp/v3/incidents/details/195705642/home , timeouts being wrong will be this symptom. (EDIT: THis is not the problem)"
"In the case of `directory == null` we should throw an exception. Everything is busted at that point. Should have a declarative error message stating what went wrong. "
Yes. But I thought we agreed on [that](https://github.com/dotnet/roslyn/pull/24173#issuecomment-357335703). Did I got you wrong?
">_processExitHandling [](start = 42, length = 20)

nit: wrong name #Resolved"
"> I'm not very familiar with workspaces

but you created this API 😄 

I'll mention the two options again. This API could be interpreted in 2 ways:
- `CanApplyChange(ApplyChangesKind.ChangeParseOptions)` returning true means the workspace is able to change *some* parse options - you don't know whether it can handle the option you want until you additionally call `CanApplyParseOptionChange`. So in this scenario, `CanApplyChange` really basically tells you nothing about what you can actually do. This *might have been* the original intent (but implemented incorrectly).
-  `CanApplyChange(ApplyChangesKind.ChangeParseOptions)` returning true means the workspace supports changing parse options, period. Any kind of change, and you can count on that. Now it may also support changing some specific options even if this returns false. If you check `CanApplyParseOptionChange`, you might find out that is the case. This is the existing implementation.

@github I see you're suggesting we should really have the first option. I think both of them make sense, but if we go with first, then the default value of `CanApplyCompilationChange` being false is wrong and would be a breaking change. Basically, until now, if you get true from `CanApplyChange(ApplyChangesKind.ChangeCompilationOptions)` you know the workspace supports changing any compilation options, but if we implement this the way you're suggesting, the new meaning would be ""no, this actually doesn't supports changing compilation options at all because `CanApplyCompilationChange` still always returns false"". If we go with number 1, the default implementation should return true. But there's also a problem that the existing implementation of `CanApplyParseChange` returns false. Meh :-/"
"this seems wrong.  if 'expression' has trivia on it, you'll wrap that trivia, then add it on again afterwards because of the code below. "
"@github After pulling, I read the [contributing guidelines](https://github.com/dotnet/aspnetcore/blob/ce38917e8ad8b0244c52b318ac25d7471dad77ec/CONTRIBUTING.md) and in this [part](https://github.com/dotnet/aspnetcore/blob/ce38917e8ad8b0244c52b318ac25d7471dad77ec/CONTRIBUTING.md#before-submitting-the-pull-request), I realized that my work was wrong, refactoring here is bad for merge!
But if you do not have a problem, merge this change. I am also happy for my contribution :)"
">  bool IsDefaultValueTypeConstructor(); [](start = 6, length = 39)

Adding this API feels wrong, we shouldn't have instances of IMethodReference for fake methods floating around. #Resolved"
"I'm not sure this is what @github had in mind. I think he just wanted the `diagnose` check lifted to before the first `if` statement, but I may be wrong. complete conversion to `? :` doesn't look more readable to me."
❗️ Possible use of wrong cancellation token
">} [](start = 8, length = 1)

Some exploratory test ideas:
- a generic attribute: `class MyAttribute<T> { MyAttribute(T parameter) { ... } }` with missing type arguments `[MyAttribute(1)]` // should error, no type inference
- a generic attribute `class MyAttribute<T1, T2> { ... }` with wrong number of type arguments `[MyAttribute<int>]` or `[MyAttribute<int, string, byte>]`
- a generic attribute `class MyAttribute<t> { ... }` with a generic type argument `[MyAttribute<List<int>>]`

I'll update this list as I brainstorm more. #Closed"
"The analysis was wrong before in the presence of multipass.  But since multipass was rare, we didn't notice.  However, with the way we handle local functions in this PR, we are more likely to have multiple passes and get the wrong answer.  The need for this wqas caught by an existing test. #ByDesign"
I wouldn't expect the CBOR implementation to produce platform sensitive unit testing scenaria. So I'd probably just assume this is good enough until proven wrong.
I had my output wrong in my test; don't think this works
"Hmm, I'm not sure if we have telemetry when a user adds a new editorconfig from the add new item template, although I'm leaning towards no since I can't find any applicable FunctionIds. (@github please correct me if I'm wrong.)

Also, if we wanted to get an overall # of how many editorconfig files have been added to a given project/solution, would we also need to add telemetry to the Configure severity code action since an .editorconfig could be generated that way as well? @github 

I asked Mika last week regarding the 2 telemetry events (click + save) versus 1 (click), and I believe she indicated that the initial idea was telemetry just for when the user clicks the button."
No. The documentation is wrong and this is the long-time safe use of this type. It's also the pattern we generate in the IDE refactorings to generate a `GetHashCode` method prior to the availability of `HashCode.Combine`. See dotnet/runtime#30998.
I think this is wrong assumption.
Remove the named customer thing because that was the wrong kind of layering. It's now the webview main thread object reaching into the code inset conrtoller. also not the nicest but now layer breaker and it will do its job until we have settled on the APIs
"This looks wrong. We are trying to store value of type ```C``` into a field of type ```int```. Why this test didn't fail? Success scenarios should be executed to ensure complete verification. BTW, it looks like we are including initializers into the copy constructor, which contradicts what this PR description is saying: ""don't run initializers in synthesized copy constructor"" #Closed"
"You're not wrong that this could save a copy, but this is also not a terribly hot code path. /shrug"
"this is wrong, Frameworks don't have `.dylib` extensions. you'll need to revert these."
"Adding the methodimpl entries changes what overridden method the runtime binds the override to. Since we want to remain compatible with previous behavior (right or wrong) for buggy runtimes, we do not want to change what we produce.

See `TestAmbiguousOverridesRefOut` in `CodeGenOverridingAndHiding` as changed in iteration 33. Depending on the order of the declarations, the override would change from being correct to incorrect or vice versa (both tested).

---
In reply to: [446416546](https://github.com/dotnet/roslyn/pull/44025#discussion_r446416546) [](ancestors = 446416546,446413877,446358005,446321935)"
"The guidelines aren't 100% prescriptive here, but.

> CONSIDER creating and throwing custom exceptions if you have a program
error condition that can be programmatically handled in a
different way than any other existing exception. Otherwise, throw one
of the existing exceptions. ...

Which suggests ""different handler, different custom exception""

> DO NOT create a new exception type if the exception would not be handled
differently than an existing framework exception. Throw the
existing framework exception in such case.

The contrapositive to this is: would be handled differently => new exception type

The only super-clear item (with regard to this specific point) is an annotation by @github:

> It’s OK for exceptions to have a property
returning some kind of error code, but I would be very careful about this.
Each exception can carry two main pieces of information: the exception
message explaining to the developer what went wrong and how to fix it,
and the exception type that should be used by handlers to decide what programmatic
action to take. If you think you need to have a property on your
exception that would return additional error code, ask yourself who this
code is for. Is it for the developer or for the exception handler? If for the
developer, add additional information to the message. If for the handlers,
add a new exception type."
"The comment above is wrong after this change in two cases:

```
T => false
T where default => false
``` #ByDesign"
"(It's a reason i also don't like storing teh cancellation token as a field like `_cancellationToken`.  Def had had circumstances where the wrong one was used, or there was ambiguity/confusion about what to pass along."
"@github that's the wrong package version, you want this one: https://dev.azure.com/dnceng/public/_packaging?_a=package&feed=dotnet5-transport&package=Microsoft.NETCore.Runtime.ICU.Transport&protocolType=NuGet&version=5.0.0-rc.1.20425.3&view=overview"
I'll disagree with you a bit here. I'm half-proposing a refactor. We'd be pivoting from an ObservableVector to an ObservableMap cuz I feel like that's the long-term design that makes more sense (or at least wanna know why I'm wrong).
"This looks wrong:
https://github.com/dotnet/runtime/pull/41082
cc: @github "
"Correct me if I'm wrong, but would the change be made here?:
https://github.com/microsoft/vscode/blob/c1905a3d139ea803c8f46ffc6535e9abdfcb1b60/src/vs/workbench/browser/parts/editor/editorGroupView.ts#L1702

If I understood your concerns correctly, when the `titleHeight` is increased/decreased due to a new row of tabs being added/removed, the `editorHeight` doesn't properly update when `editorGroupView#layout` is called? When testing, I don't see that issue, am I missing something?:

![MoYeiJdP1Z](https://user-images.githubusercontent.com/32284796/93913380-a03a7380-fcca-11ea-8919-368eeabe22f3.gif)

>-  ...title control layout which returns its height that it ended up using
>-  then editor control layout with that height

I can definitely try to cleanup the logic and have `titleAreaControl#layout` return it's height and recalculate the `editorHeight` based upon that.

> With this algorithm I would also think that you do not need to know the editor height, you can simply pass the overall height into the title control layout and then decide from within if the title should wrap or not.

Again I probably misunderstand what's going on, but is this not already being done in the `editorGroupView#layout` that was linked above? The `editorHeight` property I created for the group view was an attempt at fixing the overflowing tabs issue, I can remove that for now since it's currently not working/unnecessary.

> I would think that the tabs title control should have an event that is fired whenever the height changes and the editor group can register on that to trigger redraw.

Sure, I can create an event that fires when the height of the `tabsContainer` changes from what it previously was. However, I don't think the editor group can call `redraw`, would `editorGroupView#relayout` instead be called, thereby replacing this line?:

https://github.com/microsoft/vscode/blob/c1905a3d139ea803c8f46ffc6535e9abdfcb1b60/src/vs/workbench/browser/parts/editor/tabsTitleControl.ts#L1023-L1027

> I think it would be good if the CSS changes in tabsTitleControl.css could get some comments

Done, sorry about that. Hopefully they're a bit more descriptive now, if it needs further improvements let me know. I removed the `!important` in both classes since I realized they're unnecessary, forgot why they were there in the first place. I also fixed `editorDropTarget` to make use of the new changes in `master`.

This got to be very big, did not mean for that to happen haha, I just want to run everything by you especially with the new changes to `master` that I needed to familiarize myself with."
"Similarly here - everything except the mlock failure should cause the initialization to fail, as it means that there is something really wrong and so the initialization of PAL should fail.
The same for the standalone GC variant of this code."
"Not being too familiar with this code, I'm assuming that SHUTDOWN_INITIATED_BY_TRANSPORT is for when the connection is closed by the server and SHUTDOWN_INITIATED_BY_PEER is for when the connection is closed by the client. This is from the server perspective of course. Am I wrong?"
_Crazy idea_: `admin-settings.json`?
"Ouch, sorry to hear :-/
We may have to debug to see why the suppression isn't working.

@github Would you have any clue what we may be doing wrong?
I see other suppressions for analyzers in the file (such as `dotnet_diagnostic.RS2008.severity = none`). So I would have expected this to work. #Closed"
"Mouse-wheeling up and down like crazy:

Present1 failure

```
E:\BA\352\s\src\renderer\dx\DxRenderer.cpp(1107)\TerminalControl.dll!00007FFCCD6760AC: (caller: 00007FFCCD66F624) FailFast(1) tid(33d4) 887A0001 The application made a call that is invalid. Either the parameters of the call or the state of some object was incorrect.
Enable the D3D debug layer in order to see details via debug messages.
0:013> dx _presentParams
_presentParams                 [Type: DXGI_PRESENT_PARAMETERS]
    [+0x000] DirtyRectsCount  : 0x9 [Type: unsigned int]
    [+0x008] pDirtyRects      : 0x192a8428300 : {LT(0, 0) RB(1102, 60)  [1102 x 60]} [Type: tagRECT *]
    [+0x010] pScrollRect      : 0x192a7dfba98 : {LT(0, 0) RB(1102, 480)  [1102 x 480]} [Type: tagRECT *]
    [+0x018] pScrollOffset    : 0x192a7dfbaa8 : {x=0 y=-60} [Type: tagPOINT *]
0:013> dx _presentParams.pDirtyRects,9
_presentParams.pDirtyRects,9                 : 0x192a8428300 [Type: tagRECT *]
    [0]              : {LT(0, 0) RB(1102, 60)  [1102 x 60]} [Type: tagRECT]
    [1]              : {LT(0, 60) RB(1102, 120)  [1102 x 60]} [Type: tagRECT]
    [2]              : {LT(0, 120) RB(1102, 180)  [1102 x 60]} [Type: tagRECT]
    [3]              : {LT(0, 180) RB(1102, 240)  [1102 x 60]} [Type: tagRECT]
    [4]              : {LT(0, 240) RB(1102, 300)  [1102 x 60]} [Type: tagRECT]
    [5]              : {LT(0, 300) RB(1102, 360)  [1102 x 60]} [Type: tagRECT]
    [6]              : {LT(0, 360) RB(1102, 420)  [1102 x 60]} [Type: tagRECT]
    [7]              : {LT(0, 420) RB(1102, 480)  [1102 x 60]} [Type: tagRECT]
    [8]              : {LT(0, 480) RB(1102, 540)  [1102 x 60]} [Type: tagRECT]
```"
"I’d rather be correct and look slightly wrong than incorrect and introduce a way for third party app developers to take a dependency on some silly way Windows differs from everyone else. "
">  Closes #5360? @github can correct me if I'm wrong about this.

It takes us one step further.  But personally I am not ready to declare success on 5360 until Terminal is using `ApplicationHighContrastAdjustment::None`.  That's what will really activate all the bits and pieces that we've been lining up."
">additionalItemsTagsPropertyKey [](start = 37, length = 30)

You are caching the object inside the activity which is wrong because the Tags can be changed between logging calls. This is the whole point we couldn't cache it in ActivityLogScope."
"Okay my immediate thoughts are around how we expose this action to the user. We're already running into similar struggles with `next/prevTab` and the tab switcher, so maybe we should try and pre-empt those issues with pane switching?

For reference, there's also discussion in #8025 that might be helpful.

So, with next/prev MRU switching, without some sort of dialog, those will just toggle between the last two used panes. If there's a fourth pane, that pane will be inaccessible with next/prev pane.

Also, having panes in the ATS is something we might want some day, with something like:

> * Tab 1:
>   - **Pane 1: cmd.exe**
>   - Pane 2: pwsh.exe
> * Tab 2:
>   - Pane 1: wsl.exe

whatever, you get it.

Plus, do we want to enable in-order next/prev traversal? Once we have pane IDs, then presumably, yea. 
<hr>

Do we want to overload `moveFocus` to accept `next` and `prev`, or would having another action entirely be better? Here are some proposals:

```jsonc
// Focus pane 1
// - This is sensible, no arguments here
{ command"": { ""action"": ""focusPane"", ""id"": 1 } },

// Focus the next in order pane, don't use the switcher
// - We'd have to ensure that an id and order aren't passed at the same time, and that might be unintuitive
// - How do we specify next/prev? ""direction"" seems wrong, but maybe we keep the
//   FocusDirection(up|down|left|right|next|prev) enum and have one focus action 
//   to rule them all
{ command"": { ""action"": ""focusPane"", ""order"": ""inOrder"", useSwitcher"": false } },

// Focus the next MRU pane
// - Withough the switcher, this can only go one pane deep in the MRU stack
// - presumably once there's a pane switcher, it would default to enabled?
{ command"": { ""action"": ""focusNextPane"", ""order"": ""mru"" } },

// Focus the prev inOrder pane
// - this seems straightforward
{ command"": { ""action"": ""focusPrevPane"", ""order"": ""inOrder"" } },

// Focus the next pane, in mru order, explicitly disable the switcher
// - The user opted in to only being able to MRU switch one deep. That's fine, that's what they want.
{ command"": { ""action"": ""focusNextPane"", ""order"": ""mru"", ""useSwitcher"": false} },

// Focus the prev inOrder pane, explicitly with the switcher
// - Maybe they disabled the switcher globally, but what it on for this action? 
{ command"": { ""action"": ""focusPrevPane"", ""order"": ""inOrder"", ""useSwitcher"": true } },
```

Thoughts?"
"```
 Directory of C:\a\_work\1\s\bin\Release\lib\xamarin.android\xbuild\Microsoft

09/28/2021  07:22 AM    <DIR>          BUILTIN\Administrators .
09/28/2021  07:22 AM    <DIR>          BUILTIN\Administrators ..
09/28/2021  07:22 AM    <SYMLINKD>     BUILTIN\Administrators BizTalk [C:\Program Files (x86)\MSBuild\Microsoft\BizTalk]
09/28/2021  07:22 AM    <SYMLINKD>     BUILTIN\Administrators DesktopBridge [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\DesktopBridge]
…
09/28/2021  07:22 AM    <SYMLINKD>     BUILTIN\Administrators VisualStudio [C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VisualStudio]
```

`Microsoft\VisualStudio` is a symlink into the VS install directory.

```
C:\A\_WORK\1\S\BIN\RELEASE\LIB\XAMARIN.ANDROID\XBUILD\MICROSOFT\VISUALSTUDIO\NODEJS
|   LICENSE
|   node.exe
|   npm.cmd
|   ThirdPartyNotices.txt
|   
+---node_modules
…
```

and there are *lots* of files within `Microsoft\VisualStudio\NodeJS`.

Right idea (not us), wrong platform (Windows, not macOS)."
"might be a dumb question, but why suppress the warning then? Wouldn't we want them to get a warning when calling this to make sure that they preserve what needs to be preserved and then suppress the warning after they ensure that what they are doing is safe?"
"Yes so `objectForKeyedSubscript:`'s description is:

> Allows shorthand [key] syntax for `componentConformingToProtocol:`

@github correct me if I'm wrong but this is basically the indexer I implemented initially (`public IMDLComponent this [Protocol key]` which was sentenced to die because there's already one)."
You want to use `NSUserInterfaceValidations` instead or generator will pick the wrong interface.
"This looks wrong, I think you need to merge in the xcode9 branch."
"Yes, it does. I could have sworn I tried it, but maybe I had the comment in the wrong place ¯\\\_(ツ)_/¯"
"I don't hate you more than I did before this comment ;) 

Agree there could be cases where we decode incorrectly, but I think the function lookup would still work as intended. The parameter values would display wrong... If it gets enough traction maybe we'll parse differently. I'm this close |-| to just writing a manual parser for this instead of using Regex... "
"Same issue as the wasm one? Or wrong issue linked? If the failure is the exact same and for possibly the same underlying reason, can the issue be updated to include that it is problematic on Android as well? Or maybe its better to create a separate issue if its not clear they're failing for the same reasons."
"I'm probably remembering wrong, I'll merge in main and update"
"yeah, that's wrong. It will clean itself up when this becomes source of truth."
"The more specific error here is now wrong instead of being vague.

I think I like 'wrong' over 'vague' though."
"I understand that it is technically the same logic and it could have been misleading before but I think with this change it could be doubly misleading.

Before if someone got an `ArgumentNullException` it would point them to `localSignature` but technically they would be mislead because the issue is ALSO with `signatureSize`. Now, `!!` takes care of throwing if `localSignature` is null. So at the point of `if (signatureSize > 0)` we know for a fact that `localSignature` is not null but the exception would point them to `localSignature`. 

It's not a regression as the same inputs give you the same outputs but as a user this now reads wrong to me and I think an `ArgumentException` would be better suited now."
so why do we return an empty object here? what is wrong in undefined?
"`GetXStateFeaturesMask` and `SetXStateFeaturesMask` basically cannot fail. They are very tolerant to the input. 
To get failures you'd need something like pass context flags for a wrong architecture (like arm64). As-is that would not compile.

Realistically only `CopyContext` is an API with complex requirements and validation that could fail here due to some mistake.
I think in this particular case individual asserts/returns would not add a lot of value."
"This looks wrong. Should be something like:

```C#
public int Nanoseconds => (int)((_ticks % TicksPerMicrosecond) * 100);
```

 #Closed"
"Not suggesting this is wrong (and it follows pattern above) but the second parameter is defined to take `unsigned long`, which seems to vary in size:
```
dan@danmoseL:/usr/include$ grep -C3 ULONG_MAX *h
limits.h-
limits.h-/* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */
limits.h-#  if __WORDSIZE == 64
limits.h:#   define ULONG_MAX   18446744073709551615UL
limits.h-#  else
limits.h:#   define ULONG_MAX   4294967295UL
limits.h-#  endif
```
whereas uint32_t being passed here is always 32 bits. Curious what I'm missing @github "
"Sorry, dumb question--presumably the OS sets %systemdrive% :)
"
"If we have that overload, then people will still call the wrong overload (note: this is not hypothetical.  This kept happening as part of this change).  
"
"Re breaking changes:
> Loading the runtime when given an invalid delegate type

I think this is good - you're right that we should not do any work if we know it's going to fail. So I like this change in general (I have yet to look at the implementation details).
As for the risk of taking this - I think it's very small, we still fail, and we avoid loading runtime. This is very unlikely to break people (not counting that it's very unlikely that anybody released an app which calls the API with the wrong value as it would not work anyway).

> Error code when trying to load SCD component

I'm not sure about this one. I do agree that the returned value is not great (misleading to say the least). That said I know about several cases where the exact exist code is used by calling code to make decisions. So changing it feels risky to me. If this would be a change in the runtime I would not worry too much as we're OK taking small breaking changes in major releases (with good reason). Unfortunately this is a change in `hostfxr` which doesn't really have the same freedom - it's global and callers always end up calling the latest version. So even minor breaking changes are a problem.

I think we should not make this change - I know the number value is bad, but we at least print out the right error message."
"Yikes, this `checkExpression` call looks all wrong. The `name` of a class declaration isn't an expression. You need to use `getTypeOfSymbol(getSymbolOfNode(declaration.parent))`.
"
"It appears to me as if the CI failures are not related to the changes in this PR. Please correct me if I'm wrong though!
So unless there is more review feedback this would be it from my side..

@github let me know if there is anything else I could do here and how you'd like to proceed with your concerns regarding the public API."
"> All the ! introduced makes me wonder if we are doing something wrong here and then I remember its generics so it's weird anyways

Yeah, in particular it looks like it's generic and unconstrained but we end up only supporting primitives?  Should T be constrained to struct at least?"
"We were re-reading the directory for every file extension in the list? Crazy!! Good find :smile: 
"
"> The manual approach starts with a ⚠ clear call-out saying it is not the recommended testing strategy for source generator authors, but remains listed to serve as documentation for how the backing APIs work

Fundamentally do not agree with this. There is nothing wrong with writing tests the old way (customers and ourselves have been doing it this way for years). There are plenty of established patterns for approaching this that are in high use. The existence of the test framework does not render these invalid nor does it warrant a caution here. 
"
"Closing out for now.  @github makes a good point that this can likely interfere with the user option to use named types over predefined types.  That's solvable, but likely risky.  We can return to this another time.  Note that thsi does mean that some of our features likely get this option wrong *if* they are using SyntaxGenerator to synthesize types.  "
"I don't quite follow. 

Just to help me out, what does the return value from Unregister mean, exactly? Am I correct in assuming that true == not cancelled and false == cancelled, or is this wrong? Does it somehow depend on whether the CancellationToken was cancelled at the time of registration? (in which case the return value is determined by a race, and therefore meaningless?)

"
"> Looks like there is a legitimate test  failure: `Microsoft.CodeAnalysis.UnitTests.AssemblyIdentityTests.InvalidConstructorArgs`

Yeah, it's calling the wrong constructor now. I'll need to modify the test in the morning. "
"My intuition tells me that we are likely taking a ""wrong"" approach for achieving the goal. I feel like a better approach would be to revert relevant parts of  #46308 instead of adding special APIs to neutralize their effect. We could simply remove the effect in the first place. I also think that it might make sense to deal with top level statements at the same time and in the same manner (finding the PR that changed the behavior for them), because they are likely to be closely related in terms of implementation strategy. Records probably build on top of what was added for top level statements, etc. And dealing with them together is likely to be much easier, more code can be removed at once rather than carefully trying to maintain an undesired behavior for one feature, but not for the other. 

---
In reply to: [1006710484](https://github.com/dotnet/roslyn/pull/58482#issuecomment-1006710484) [](http://example.com/codeflow?ancestors=1006710484)"
"> I have seen community feedback has been that the more info we include the better

We've also seen the community complain about stack trace text being overly noisy/confusing and then being very happy when work was done to simplify it (for example Ben Adams added the StackTraceHidden attribute to remove frames).

I'm not convinced this feature will be easy for most devs to use even if we leave it on by default. Converting the IL offsets back into source line offsets requires the developer gives a path to the correct build's PDBs. Unlike dump debugging we have no way to warn them if they specify the wrong ones (because there is no module versioning info in the output text).

I also lean towards saying this behavior should be off by default for this release as we continue to get feedback. We could always blog about this or put it in our docs as alternate ways to spread awareness.

"
"/cc @github @github 

I took a quick skim and didn't see anything obviously wrong at 50,000 ft, but I am not an expert yet.  @github, @github or @github likely have more context for reviewing this in depth."
"Yes I've read IEEE spec (I have access through my university).
So boost's implementation is effectively wrong, because it returns -0 for odd numbers.
I think I can write a new implementation."
@github @github once again I don't _really_ know what I'm doing...  How wrong is this?
"~~Failing tests seem like fallout from #67037, I'll revert the change around `EnableReceive` and we'll see if it helps.
My theory is that at that time of #67037 we already had updated msquic in the transport package for Windows so the CI didn't run the tests there (IsSupported would fail due to version incompatibility) and this is actually the first time they are run.~~

~~If my theory proves true, @github you might want to revisit this.~~

~~BTW, it seems to work on Linux, in CI and locally.~~

Theory was wrong, change reverted in #67481, `ReceiveComplete` became void. For some reason, the last runtime pipeline run on this PR didn't fail for me."
"I have news to you about the two Current Directory APIs: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/Directory.cs#L212 😁 

And I am quite sure that using it is wrong, because there's generally no guarantee that it is what we want even when the app starts, and because it's mutable, there's no guarantee what it ever is at any time.

`AppContext.BaseDirectory` sounds more interesting, but it is also not _semantically_ what we want, though I agree it is super likely to be correct. And, it's immutable, and set ""outside"" of the logic of the app (that is, the app doesn't decide for itself once it's running what the value should be). Same story with `Assembly.GetEntrypointAssembly().Location`.

How will the rest of MAUI figure out from where to load assets? Presumably the same exactly logic will apply, no? I think ``AppContext.BaseDirectory` likely the safest bet but we also need to be consistent with all of MAUI."
"If the server is doing caching wrong or not doing anything, wouldn't this be problematic?

If we didn't find the resource in the local cache, shouldn't we do {cache: 'reload' } to ensure we get the resource updated with the latest and greatest version? We don't want to be serving the potentially stale response, do we?"
"> I don't think tooling checks accessibility modifiers anywhere. If it is present in the serialized json, it should pick it up. Correct me if I am wrong, @github

You're  100 %  correct. With how t his is currently  the tooling will treat  all components as public. It's something that would have to be  added  as   part of  TagHelper  discovery  and then consumed by tooling to properly allow the correct TagHelpers for various  projects."
"It was at one point, until I realized that was wrong.

---
In reply to: [146976094](https://github.com/dotnet/roslyn/pull/22842#discussion_r146976094) [](ancestors = 146976094)"
"But there's no recursion here, is there? A ref assignment must have a variable on the left hand, so this can't go any deeper than one level. This also may make error production worse because CheckValueKind would produce an error on the LHS of the assignment, even though there's nothing wrong with the LHS here, only the expression as a whole."
This comment looks wrong.
"This feels like it's the wrong location. The chance for the null reference happens on the invocation of `.Value`, right? Unless this is reporting on the implicit conversion, in which case I feel like this isn't descriptive enough, and I would still have expected a warning on `.Value`. #Closed"
"I have a strong suspicion that this logic (i.e. `method.GcInfo = gcInfo;`) was wrong (and it is still wrong, my change is a pure refactoring that does not fix this yet).

The `gcInfo` parameter is computed through `ParseRuntimeFunctionsForMethod`, it appears to me that it should be associated with the `RuntimeFunction`, not the `ReadyToRunMethod`.

According to `ParseRuntimeFunctionsForMethod`, all but the first `RuntimeFunction` associated with the method could have `GCInfo`, but all of them have `UnwindInfo`."
how does this work.  what if the file has changed since the search started?  It feels like thsi is wrong and will need to map from teh original doc location to wherever it is now.
Indent looks wrong?
"Well `aspnetcore` is not really accurate anymore, and I the other two don't feel very informative (though I could be wrong).  My experience with this sort of thing is that folks put stuff there because it was in a template then it gets stale.  If on the other hand there was a concerted effort to deliberately set tags and make them meaningful then by all means keep them.  It doesn't hurt to just copy all these into the pkgproj for now and we'll fix the bug where they don't make it into nuspec."
this seems weird.  in the codepath to create and throw an exception that tells the user that something went wrong... we potentially cancel from doing that leading to what... just corrupt state that the user doesn't know anything about?  Seems very wonky.
"That explains why my build is green all of a sudden :). dumb error, will fix."
"@github this `!` was needed once I marked the parameter as `[NotNull]`. This doesn't line up to my intuition though. My intuition is that `[NotNull]` should ensure the state of the parameter on method exit, not transition states within the method body. Am I thinking wrong here?"
"Yes. Having 4 items out of 30 with the same hash code is already extremely rare but it happened. So with 76% trim this would have to be 5 items having the same hash... 
Let's give it a try - maybe my understanding is completely wrong. "
"They added support for the definition text, but not for classified text - but I could be wrong.  Miguel should know"
"> This method gets quite long in the branch where I implement diagnostics: [https://github.com/dotnet/roslyn/pull/43301/files#diff-b9a132a61804f82152a0f38aab1f9f47R665-R732](https://github.com/dotnet/roslyn/pull/43301/files#diff-b9a132a61804f82152a0f38aab1f9f47R665-R732)

I see no benefit to have this method in this type, it is better to not mix decoding of what is in attribute with its semantic analysis. For simple cases like this (nothing to decode, no args to decode, etc) we do all the processing inside ```DecodeWellKnownAttributeAppliedToMethod```, including all error reporting. Especially that some errors are context depended, i.e. when the attribute is applied to a non-static or an inaccessible method, etc. It is fine to extract the code into a local function within ```DecodeWellKnownAttributeAppliedToMethod``` or a private helper next to it.

Regarding diagnostics, I believe the rules are rather simple and there aren't that many of them. So, I am surprised to hear that the code is going to be that complex. But I might be wrong.  


---
In reply to: [409486138](https://github.com/dotnet/roslyn/pull/43281#discussion_r409486138) [](ancestors = 409486138)"
"Sorry for the review on wrong line, the review ui is bad at commenting for unchanged line. 

Need to bump the version a few lines below `""version"": ""6.1.6""`"
"I'm not so sure about that, it looks like the data for referenced assemblies are stored in the same database used by ""find package"", which means it share the same patching/updating mechanism as mentioned by @github above. I might be wrong though, @github could you please confirm if it is the case?"
I need help if there is something special we want to achieve with Pipe extensibility. Or is the dumb test similar to the one I added for Stream enough?
"> Why ""won't fix""?

I find nothing strange in this name. It was not introduced in this PR. This is just an abstraction to give out the number of parameters without creating parameters themselves. Completely makes sense to me for any method. I can see that you might want this method to have a different name, but changing it is not in scope for this PR. Overriding ```ParameterCount ``` would be the wrong thing to do, because we want it to do exactly what it does today, even for this method.  

---
In reply to: [456689715](https://github.com/dotnet/roslyn/pull/46053#discussion_r456689715) [](ancestors = 456689715,456676237)"
">(object)modifierType.ContainingAssembly == modifierType.ContainingAssembly.CorLibrary [](start = 19, length = 85)

Do we have a test where a modifier has the right name, but wrong containing assembly?  #Closed"
This is just purely wrong. I couldn't find a way to concat two `std::string_view`. Neither can I access the underlying text buffer. I had to allocate a new string to get the content I need. I'd love to hear some opinions.
"Is the message wrong then?

---
In reply to: [469431935](https://github.com/dotnet/roslyn/pull/46714#discussion_r469431935) [](ancestors = 469431935)"
"This is very likely wrong, there will be linker warnings for Mono's SPC codes"
"OK, fair enough, but that’s a matter of implementation.  That does not negate the need for this functionality.


From: Mohamad Alallan <notifications@github.com>
Sent: 31 May 2020 15:21
To: xamarin/Xamarin.Forms <Xamarin.Forms@noreply.github.com>
Cc: Mario Antoniou <mantoniou@accelerated-marketing.com>; Mention <mention@noreply.github.com>
Subject: Re: [xamarin/Xamarin.Forms] Added AutoClose property to SwipeView (#10756)


""Currently, the swipe behaviour of each row is independent of other rows in the list"" And that is how it should be. An object shouldn't have logic that facilitates it's client responsibilities. An object should encapsulate it's own behaviour knowing nothing about the world. If there should be a property like AutoClose, It should reside in the container that contains items because then that is it's responsibility. but to put AutoClose in an object for the sake of desired client behaviour is wrong OOP.

Can I use SwipeView outside listing scenario? Yes, hence AutoClose is violating OOP if you put in this class.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://github.com/xamarin/Xamarin.Forms/pull/10756#issuecomment-636477771>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ACZALIHDLLSXTAZDBSNV6QTRUJRTJANCNFSM4NEFNA2A>.

______________________________________________________________________
This email has been scanned by the Symantec Email Security.cloud service.
For more information please visit http://www.symanteccloud.com
______________________________________________________________________

______________________________________________________________________
This email has been scanned by the Symantec Email Security.cloud service.
For more information please visit http://www.symanteccloud.com
______________________________________________________________________
"
"@github this is the location I was talking about yesterday where I managed to get the binder usage down to just one call: http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Binder/Semantics/OverloadResolution/MethodTypeInference.cs,1334 (the rest of the usages in the chain can be replaced by passing the nested thing on the binder it's accessing). Unfortunately, that last call doesn't seem to be easily fixable. The only time `_binder` should be null is when we're binding the body of an unbound lambda, trying to figure out the return type of that lambda. I'm not certain getting the binder from the compilation is the right thing to do here, particularly around speculation and potentially getting the wrong binder for such cases. Do you have any thoughts?

I still have a bit of other work to do on this PR around using/foreach dispose argument binding, so no rush on this question. #Closed"
"`takeOwnership` will not help. Every result is written to the rented or stack-allocated buffer. So there is no way to escape it using this parameter. The buffer passed to `BigInteger(ReadOnlySpan<uint>)` ctor must be copied using `ToArray` in any case.

Anyway, I tried to use assumption that most operations don't have leading zeroes and use heap-allocated arrays instead of renting or stack-alloc. I can conclude that this assumption is wrong because in 50% of cases the result contains leading zeroes. `BigInteger(ReadOnlySpan<uint>)` ctor in attempt to conserve space creates truncated copy of the original array. As a result, we have redundant allocation of the array for the result.

Let me explain this fact in details and choose `Add` operation for example. Before doing arithmetic operation for non-trivial operands I need to pre-allocate buffer for the result. The size of the result buffer is `Max(Digits(X), Digits(Y)) + 1` where `Digits` pseudo-function is the number of digits in the specified operand. In our case it's a length of the uints array. After computation the reserved highest position in the buffer may remain unused and must be removed from the resulting array. I see no way to predict the usage of reserved position in the result buffer and apply decision about correct allocation strategy. That's why `takeOwnership` in the current implementation not useful."
"Note: Sometimes people open issues using the wrong template, leading to wrong labels applied. i.e, they open the API suggestion template, empty it out, and then write an issue unrelated to an API suggestion. I have a pending-review PR to remove the labeling from another issue template (https://github.com/dotnet/roslyn/pull/53155). However, if you think it's not a problem to have incorrect labels initially that later on you'll correct, then keep it."
Wrong indentation.
Minor but comment is wrong :P
"The comment here is just wrong, the block is `#if !WATCHOS` above."
"Nevermind, I was looking at the wrong thing. This one is only used under `DEBUG` and so I've conditioned it appropriately"
Coding style in this file is wrong in some places.
Do we have analyzers for this kind of mistake? It was passing to the wrong parameter.
Oops. Something went wrong in my VS. Should be fixed now.
"For `ldarga` opcodes we were creating locals that require normalization with the wrong type here. This could be problematic since we sometimes optimize `GT_IND (GT_ADDR (GT_LCL_VAR ...)))` to `GT_LCL_VAR` very early during import, in which case we could have problems."
"@github for thoughts on this.   Specifically, if i throw here, tests in CodeFixService tests fail.  but i think they're likely constructing this service wrong. "
"I think this was needed because of the wrong extension.

```suggestion
```"
"I agree @github. This is something we're discussing with the team. One of my proposals includes release type and support phase as two distinct values. But changing the format is a bit tricky since it's a breaking change given a lot of teams rely on this.

@github setting 6.0 to current would be wrong. The terminology is a bit confusing. Current is a release type - see https://github.com/dotnet/core/blob/main/release-policies.md#release-types for more info. We're also looking into this.

/cc @github"
"It was removed in [this commit](https://github.com/dotnet/runtime/commit/32918374655b5e1c3fc7810bbb0c06a0d03265b7#diff-92620f7c0c09c1d3093c6951abe4fa4101cd82e9020d6563ff0a2196f2f8d558). 

What's the point of adding it to the sources? This attribute is only for use by analyzers which go off reference assemblies. The actual implementation is substituted via facade assembly mapping. Correct me if I'm wrong here but this metadata would not actually be used for anything if added to sources."
"I know you're moving the code, but any sense if this comment is wrong?
"
But this function is called from ```getMeaningFromLocation``` so that means we need to handle this irrespectively to avoid any wrong usage being seeping out.
"We usually don't throw `NotImplementedException`. The [docs say](https://msdn.microsoft.com/en-us/library/system.notimplementedexception.aspx):

> 1. You've designed a type in which you want to include a particular member as part of its public interface, but intend to provide the implementation in a later version. In this case, you can throw a NotImplementedException exception for versions on which the functionality is not implemented, and provide an implementation for later versions.
> 2. You've designed a type with one or more members that are available on some platforms or in some versions but not on others. In this case, you can throw a NotImplementedException exception on platforms on which the functionality is not supported.
> 3. You're creating an abstract base class with some members for which you want to provide no implementation but expect derived class to provide the implementation when they override the member. In this case, your member can throw a NotImplementedException exception.

I'd say that (1) is extremely odd and you shouldn't be doing this. Until you implement something you don't know whether the design works. (2) is just plain wrong, the code should throw `PlatformNotSupportedException`. (3) seems more reasonable and is basically the case here.

My high-level feedback would be that you should avoid adding virtual members that throw. Instead, I'd try to ensure that design has a reasonable default implementation, for instance, by forwarding to existing APIs. If that's not possible, at least add some actionable message. Simply failing with `NotImplementedException` will look like a bug in Roslyn.
"
This didn't get updated. You can hit this code path by canceling a queued item and then replenishing. The side-effect wont be seen until the window fully wraps around to this segment again and adds back the wrong number of requests.
"@github 
I have a test failure due to this error case, which makes me think this is the wrong approach. 
I'm trying to figure out what to return when I get a tuple of 0, 1 or more than 8 arguments. The code above won't work for 0... Any tips? 
"
"It is sibling code to the below and is specifically meant to exercise non-UTF8 code paths. That's what I meant by ""intent"" - using the _u8_ literal suffix here just makes it seem like a normal null-terminated UTF-8 string and hides the fact that it's supposed to be the byte representation of a UTF-16 string.

https://github.com/dotnet/runtime/blob/c537cc6a45c4c75524ec98f6a8d4c9637438958e/src/libraries/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs#L456

If the code or the comment is wrong, it should be changed."
Should `f.f` be ignored too? Or am I wrong?
"Similar to deprecated function errors, there should still be an error even for a wrong type:

```ts
/** @github */
function depr() {
}
depr + 1
depr('hi')
```

Both have deprecation errors."
"this feels wrong - perhaps the `.types` printer tries to only lookup the ""target"" symbol of this assignment and doesn't try to look into `Function` here etc. Should I try to fix this as part of this PR?"
"> 
> 
> I cannot explain why remove failed to remove... I came to the (possibly incorrect assumption) that you cannot use a wildcard to remove from a list.

No, you can *usually* do this. See https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-items?view=vs-2019#BKMK_RemoveAttribute

But I remember observing a similar behavior in the past...

Maybe @github knows why? I put a link to the change with wrong behavior - https://github.com/dotnet/runtime/pull/36577/commits/65859c5373b1c6a96dacb177951c8dc2704f3477 "
"I'm going to close since the API proposal template is also using auto-labeling, and it probably doesn't matter a lot for the few issues that are using the wrong template."
"I cannot run the tests for some reason, it kept complaining about wrong .NET SDK version (global.json would've wanted ""preview 8"" which doesn't even exist, current preview is 7). I changed the version to preview 7 and now it errors with `System.IO.FileLoadException : Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A)`"
"Here is what seems to be working for me now.

```bash
./build.sh clr -arch arm64 -c Debug -runtimeconfiguration Debug
./build.sh libs -arch arm64 -c Debug -runtimeconfiguration Debug

# Use the following script to:
# - Remove the incorrectly built native binaries above
# - Build the osx-arm64 native binaries for clr+libs
# - Run build-test generatelayoutonly
# - Replace S.P.C.dll w/ the IL version (presumably crossgen for the wrong arch)
# - Remove replace stray x86_64 native binaries (appears to not be needed)
src/coreclr/generate-osx-arm64-layout.sh
```

With this methodology:
+ the simple C# still passes.
+ the hello world exception now looks like an interop issue.

```
Unhandled exception. Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at System.Diagnostics.StackFrameHelper.InitializeSourceInfo(Int32, Boolean, System.Exception)
   at System.Diagnostics.StackTrace.CaptureStackTrace(Int32, Boolean, System.Exception)
   at System.Diagnostics.StackTrace.InitializeForException(System.Exception, Int32, Boolean)
   at System.Diagnostics.StackTrace..ctor(System.Exception, Boolean)
   at System.Exception.GetStackTrace(System.Exception)
   at System.Exception.get_StackTrace()
   at System.Exception.ToString()
   at Interop+Sys.Dup(Microsoft.Win32.SafeHandles.SafeFileHandle)
   at System.ConsolePal+<>c.<OpenStandardOutput>b__9_0()
   at Microsoft.Win32.SafeHandles.SafeFileHandleHelper.Open(System.Func`1<Microsoft.Win32.SafeHandles.SafeFileHandle>)
   at System.ConsolePal.OpenStandardOutput()
   at System.Console.OpenStandardOutput()
   at System.Console.<get_Out>g__EnsureInitialized|25_0()
   at System.Console.get_Out()
   at System.Console.Write(System.String)
   at x64.console.Program.Main(System.String[])
```

"
"We have plans to bring it back, but with a different name, and without the error requiring its use - some contention was had that the name `bundledPackageName` potentially implied that we were some kind of full service bundler, rather than a relatively dumb concatenator."
"> Does that approach scale given how large the Unicode BMP is

Fortunately, we only need to test the ranges in `s_lcTable` that are tagged as `LowercaseAdd`. I wrote some simple code to find cases where `char.ToLower(AChar) != UpperCaseAChar + offset` from the ranges in `s_lcTable` and fixed all the cases I found were wrong."
"Re-reading it, I think I put the specifier in the wrong location on that comment -- I edited the description a couple months after the design meeting, so it's more up-to-date than the comment.

Basically, the change should exempt properties that whose declarations *all* come from outside a class, unless they're synthetic, in which case they are exempt if any declaration comes from outside a class.

I don't know what support we had for accessors in interfaces and type literals at the time, but it definitely sounds like they behave the same as classes now. I'll update the code to implement that."
"> @github Yes, ""unfortunately"" -- that would have been a hint indeed that something was wrong/changed from before.

Would adding a manual check for the presence of files under the Analyzers node be a good early warning sign, to avoid the long investigation through multiple teams to track this down? Or is it no better a signal than ""the whole document has red squiggles"" which got us here?"
"Suppressions are a hack for hacking your way out of issues a cast won't fix (like weird inheritance issues). But a cast will fix almost any issue (even those issues if you're creative with where you cast and to what) - every example you have here can be fixed with a single `any` cast (on the receiver, library itself, or argument), which is much better handled in the language. In other cases, where you have a massive chunk of unchecked code, the per-file directive is fine. If a third party lib has the wrong type, you cast to the correct type or `any`, up to you, a suppression is completely incorrect and the wrong solution to the problem.

Honestly, we thought suppressions were a bad idea to begin with and I had to argue they had uses when migrating JS projects to TS (essentially as automatable TODOs since per issue suppressions are easy to place automatically). But some people turn to them rather than the much simpler cast, and seeing the arguments here just reinforces that - suppressions aren't ""better"" than a cast - they're much much worse, and they leave the compiler in a silent error state where things may not behave as expected. They are an absolute last resort, and _honestly_ the presence of a suppression should itself be an error, to indicate that the project has unchecked code that may have unintended cascading effects on downstream code (like quietly leaking an `any` that isn't caught by `noImplicitAny`).

If anyone is left thinking a suppression like this is their only possible solution, then we've failed in our documentation somewhere - even in JS we support jsdoc casts now, so you can cast out of almost any issues in JS, too. (Even missing imports can be fixed with `declare module` declarations)"
"> To me, the way the parameter list is grayed out makes it look like informative context, rather than text that will be inserted.

Could we do something crazy where the type annotations are grayed out and the rest of the text is the usual color?"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

If cancellation is requested at just the ""wrong"" time, we may end up canceling the operation but reporting it as a successful completion, due to our relying on _registration.Token being the caller-provided token, but that not being the case if cancellation was requested prior to UnsafeRegister being called, in which case it'll return a default registration.

Fixes https://github.com/dotnet/runtime/issues/47360
cc: @github 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Threading.Tasks`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.0</td>
  </tr>
</table>
</details>"
"Everything is passing now except for two LLVM AOT scenarios. It isn't clear to me what's wrong here given that the regular Mono leg passed.

@github or @github, could you provide some guidance on how to root cause the failure here?"
"> Ah, so the native library (which sees the type as an enum/integer) still does single register, but since the P/Invoke Marshaller sees the type as a struct it tries unpacking it per struct rules, resulting in a mismatch?

Exactly.  The marshaller prepares a buffer on the stack, and passes a pointer to that buffer to the native routine, expecting the native routine to fill (what it thinks to be) the struct to be returned in.   But native code thinks it returns an integer, and so doesn't expect a buffer pointer but simply returns the integer in register.   (Plus the presence of the return pointer shifts the other arguments by one slot, which native code also doesn't expect, so the incoming arguments are already wrong.)"
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Related to #54417 

The contract is:
* The runtime defines `_MonoRuntimeAvailableComponents` which is an item list like `""hot_reload;diagnostic_tracing""`
* The workoad defines `_MonoComponent` which is some subset of the times that makes sense in the current configuration of the user app
* The workload calls the `_MonoSelectRuntimeComponents` target
  * The target returns `_MonoRuntimeSelectedComponents` (and `_MonoRuntimeSelectedStubComponents` if static linking) which are the _names_ of the comopnents that will be available (or stubbed out, if static linking)
  * The target returns `_MonoRuntimeComponentLink` which is a list of _filenames_ (relative to the runtime pack `native/` subdirectory) of the libraries that must be either copied (for dynamic loading) or statically linked (for static linking) with the runtime.  The items also have some metadata such as `IsStub`, `ComponentName` and `Linking`

---

**TODO**

- [ ] Right now the `component-manifest.props` is generated from `component-manifest.props.in` when the nuget is built.  this is **wrong**:
   - the `component-manifest.props` file is RID-dependent for two reasons: whether we do static or dynamic linking of components depends on the target platform, and the file extensions also depend on the platform.
   - the list of components is currently hardcoded in the pkgproj, but it should really come from the source of truth: src/mono/mono/component/CMakeLists.txt

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>lambdageek</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"PTAL @github/jit-contrib, I would like to sneak 1 more change into Prev7 if somebody has time to review this simple change. 

It actually fixes a wrong usage of `OptimizationEnabled()` so maybe we can merge it in the next one as a correctness fix, but still would be safer to merge it in Prev7."
"> do we have enough testing? what could go wrong? have we tested this locally ?

not sure what kind of testing we need here. I checked the assembly versions, and they are being correctly updated. @github @github 

> what could go wrong?

Roslyn analysers have been shipping them with this flag turned for a while now. generators are self contained so i don't expect to leak the assembly version to someplace else. The mitigation in case of a low probability event can be handled by pinning to a higher version.


"
"@github @github  Sorry, I linked the wrong issue (since updates). This is blocking all wasm/wasm-aot benchmark runs, not just a few. Here is the correct issue again (I also fixed it in the description): https://github.com/dotnet/runtime/issues/58906"
"Finally got a repro using random pgo and was able to validate my guess as to how things go wrong and the fix.

Here there is a potential loop from 57...137. We try and compact and move the range 60...109. But then we fail to compact after that.

The next loop runs from 71...136, but we've moved the first part of the loop down past the seocnd, so that 136 now sits above 71. And when we try to compact that loop we walk off the end of the bbNext chain.
```
Relocated blocks [BB60..BB109] inserted after BB137
New Basic Block BB149 [0333] created.
Setting edge weights for BB59 -> BB149 to [0 .. 3.402823e+38]
Added an unconditional jump to BB60 after block BB59
Failed to compact potential loop from [BB57 to BB137]
Did not find expected loop block when walking from BB148 [possible loop was from top BB71 to bottom BB136]
Failed to compact potential loop from [BB71 to BB136]
```
"
"What is this?  This is all wrong. IShape should have a `PathF PathForBounds(Rectangle rect);` Now we do it from the interface, no need to do this stuff in an extension."
Applied changes to fix the wrong behavior with the mouse hover state.
Clearly I was wrong :)
"> Maybe I am reading it wrong? Can't see any application events.

@github This is written in the [official android documentation](https://developer.android.com/reference/androidx/lifecycle/ProcessLifecycleOwner?hl=id):
 ""Class that provides lifecycle for the whole application process.""

Hmm it's funny but `ON_DESTROY` method is never called why is it needed?

> Can't see any application events.

I didn't quite understand this sentence. Yes, it collects events from all activity and processes them correctly for whole app"
"Should we skip this test instead? I don't really want to encode wrong behavior in tests. It's better to just skip if possible.

Put an other way, I don't really want a test that partially validates the expectations."
"> The one that signalr catches and handles gracefully is WebsocketException when reason = ClosedWithoutSendingCloseFrame

This is a behavior we've gone back and forth about. Customers have been adamant that this kind of error is too noisy, but it still feels wrong that we suppress it. The reality is that any failure to complete the closing process is considered an error by the spec.

Also, the underlying [WebSocket implementation](https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs) won't ever actually produce IOExceptions. It explicitly wraps them in WebSocketExceptions with the error code `ConectionClosedPrematurely`.

Perhaps having a way for a Hub to indicate that it's willing to see even these more ""noisy"" failures is appropriate. For a system like Blazor it makes sense to want to tell the difference here. I think we should've left this error in the `OnDisconnectedAsync` handler instead of suppressing it. Maybe 3.0 can justify changing that behavior but we'd need quite a bit of backup to get that through ask mode."
"@github feel free to correct me if I'm wrong here, but I'm pretty sure the idea is not to change HubMessage.java at all. The idea is to simply change this JsonHubProtocol.writeMessage method to serialize using a JsonWriter and put all the type-specific logic for serializing each HubMessage type to JSON inside of JsonHubProtocol.java itself.

So instead of having an `abstract void write(JsonWriter writer);` implementation on InvocationMessage and calling `message.write(writer)` from JsonHubProtocol.writeMessage, you would have a `if (message instanceof InvocationMessage) { ... } else if (message instanceof ...`. It's less object-oriented, but it will make adding non-JSON protocols like MessagePack easier in the future. Instead of every HubMessage needing to know how to serialize using JsonWriter, MessagePackWriter and whatever else, all the serialization logic stays within the protocol class this way."
"If the server is not caching at all, then it's not problematic. That's one of the benefits of this whole new feature.

If it's doing caching wrong in certain ways (e.g., returning headers to cache for a specific time period regardless of content changes) then there will be trouble but that's also true for all their other static resources, index.html, etc.

The only scenario I had in mind for why `cache: 'no-cache'` would be really beneficial is if, at some point, we support loading these resources from an external CDN. At that point, every site has its own `CacheStorage` but shares the browser's regular HTTP cache. By using `cache: 'no-cache'` you get to re-use the warm HTTP cache to populate a new site's `CacheStorage`.

However I recognize that's not a scenario that actually happens today so it's more ambiguous where the best tradeoff lies. I somewhat prefer keeping `cache: 'no-cache'` so nobody could say we were breaking them later if we changed from `'reload'` to `'no-cache'` in the future when adding CDN support.

Do you feel strongly about this? I'm open to changing it if so. Please ping me to discuss!"
"You're adding a test ensuring we get the wrong behavior. Can you please place the correct behavior in the test and mark it skipped with this URI?
"
"I think `null` is better and consistent with other APIs. For instance,  `GetUnreferencedAssemblyIdentities` doesn't throw when using the wrong kind of diagnostic. #Resolved"
This looks so wrong (member name that starts with underscore after dot).
">boundCollectionElementInitializer.Arguments[0]?.Kind == BoundKind.ImplicitReceiver [](start = 26, length = 82)

I think we might have a conversion on top of this node. Even if not today, I see nothing wrong in adding it in the future. It feels like the tests are good enough to verify our assumptions and we are not doing this for non-extension method case. #Closed"
"We're applying highlights to the DisplayText rather than FilterText. 
If the match is within FilterText but not DisplayText, then highlight will be wrong.
If the match is within FilterText and outside of the range of DisplayText, then VS will crash


I'm wrapping the UI code to prevent the crash, but the CompletionItemManager must return highlight against the DisplayText. #Resolved"
"dumb question, why the `(int)` and the `(PreferBracesPreference)` below?  Does InlineData not support enums?"
">type.IsValueType [](start = 19, length = 16)

Are we testing scenarios when concrete value type references within another type cannot be resolved from metadata (an assembly reference is missing, for example)? It looks like this might cause a confusion during ```ApplyNullableTransforms``` causing us to apply flags to wrong places."
I fixed it but might have done so in the wrong branch. Will edit here.
">summary [](start = 13, length = 7)

nit: was something wrong with the comment (aside from Unset->Unknown disparity)?"
"Yes, the previous output was wrong. Generic dictionaries should explicitly have `typeof(string)` as the key. I think this can be revisited when supporting non-string keys for dictionaries, cc. @github "
"><!-- A BoundStackAllocArrayCreation is given a null type when it is in a [](start = 4, length = 72)

I think this change got pushed to a wrong PR"
"So how _is_ VB working then? Is it just swapping the type/name roles to really get the 1 or 3 value it wants, even if it's wrong?"
"> Which only overwrittes the synchronous methods to extend the indentation function.

Isn't that the root of the problem?  There are other things wrong with that: it means that even when the underlying text writer robustly supports async operations, any async operations issued against the IndentedTextWriter are going to end up queueing sync operations.

Seems like the right fix is to override the XxAsync methods on IndentedTextWriter appropriately.  That will address both this issue (the overrides can do the right thing with regards to indents) and the async-over-sync issue."
"@github if something goes wrong loading that backup, a user will never be able again to open the file. I think a safe guard should be added to fall back to the content from disk. 
"
Alright. I figured something is going wrong here. Thanks!
"Used VS but it put Microsoft.Extensions namespaces above System.
It also was wrong in the sense that ""Remove and Sort unused usings"" removed more than it should have but that I fixed manually.

I'll fix this up."
"> Could you please write a bit more info, what does ""this breaks reuse of Element"" means?

the next time the element will be associated to a renderer, it'll miss the Behaviors and Triggers.

> This is a serious memory leak, I'm confused why this PR was closed.

This is a Pull Request, the PR is wrong, so we close it. This is not a bug tracking system. Closing the PR does not make any statement about the validity or the seriousness of the bug, only about the proposed fix.

"
"Oops, this is why you should not code late at night! 🥱
I accept, I got this wrong. 😞
Answer to your question is: **no**, `+` is perfect for this case."
"I am not entirely sure this does something useful? If we are trying to detect the case of the auto detection mechanism doing something wrong, how is that related to the initial mode? Shouldn't we rather maybe track the user explicitly changing the mode from the status bar as a indication?"
@github What did I do wrong? The build fails with the original error.
">DiagnosticInfo? info = type?.GetUseSiteDiagnostic(); [](start = 12, length = 52)

I think we are making a change in the wrong place. Could the issue be already fixed by [https://github.com/dotnet/roslyn/pull/38230](https://github.com/dotnet/roslyn/pull/38230)?"
"Can you just set the test to ensure that it stays the WRONG way until boogaloo flip flops it to the correct way? 

That way when the boogaloo work is implemented, this test will start failing and someone will have to consciously update it to the correct way and see the comment? Or make it so that the message that prints when it fails is `VERIFY_IS_FALSE(<condition>, L""If this failed because you're doing boogaloo and you made wrapping work, then fix the test, not your code!"")`.
"
"```suggestion
	[Issue(IssueTracker.Github, 3454, ""Picker accessibility text is wrong"", PlatformAffected.Android)]
```"
Thanks @github. I'll see what else is going wrong here...
"`OBSERVABLE_GETSET_PROPERTY` makes `_Icon` const.

<details>
<summary>OBSERVABLE_GETSET_PROPERTY Definition</summary>

```c++
#define OBSERVABLE_GETSET_PROPERTY(type, name, event, ...)                             \
public:                                                                                \
    type name() { return _##name; };                                                   \
    void name(const type& value)                                                       \
    {                                                                                  \
        if (_##name != value)                                                          \
        {                                                                              \
            const_cast<type&>(_##name) = value;                                        \
            event(*this, Windows::UI::Xaml::Data::PropertyChangedEventArgs{ L#name }); \
        }                                                                              \
    };                                                                                 \
                                                                                       \
private:                                                                               \
    const type _##name{ __VA_ARGS__ };                                                 \
    void _set##name(const type& value)                                                 \
    {                                                                                  \
        const_cast<type&>(_##name) = value;                                            \
    };
```
</details>

So I had to do this dumb thing. We're going to be hitting this problem _a lot_ with data binding. Does JsonUtils already support overriding setters? Or is there any guidance you can provide here? Like, could we override `=` operator maybe?"
"@github I added a test in InvocationExpressionSignatureHelpProviderTests:

```
        [Fact, Trait(Traits.Feature, Traits.Features.SignatureHelp)]
        public async Task TestInvocationOnTriggerParens_OptionalDefaultStruct()
        {
            var markup = @""
class Program
{
   static void SomeMethod(CancellationToken token = default) => throw new NotImplementedException();

    static void Main(string[] args)
    {
        [|SomeMethod($$|]);
    }
}"";

            var expectedOrderedItems = new List<SignatureHelpTestItem>();
            expectedOrderedItems.Add(new SignatureHelpTestItem(""void Program.SomeMethod([CancellationToken token = default])"", string.Empty, null, currentParameterIndex: 0));

            await TestAsync(markup, expectedOrderedItems, usePreviousCharAsTrigger: true);
        }
```

It fails with the following:

```
  Error Message:
   Assert.Equal() Failure
                                  (pos 51)
Expected: ···lationToken token = default])
Actual:   ···lationToken token = null])
                                  (pos 51)
```

The actual result from the test doesn't match the actual result that actually happens, and also doesn't match the expected behavior. Am I testing the wrong thing? 😄 

In any case, it's weird to see `CancellationToken token = null` as it's a non-nullable value type."
"```suggestion
        void GotFocus();
```
This is such a dumb nit, so feel free to not do it. XAML generally calls these `GotFocus` and `LostFocus`. Might be worth giving them the same name."
"so this logic isn't apperant to me.  why is overtype ok if the currentposition/closingtoken is ok?

for example, if the above code were just `CheckCurrentPositionAsync` or `CheckClosingTokenKindAsync` i would have no idea if that were right/wrong. "
"Can you please explain how this approach works?

It seems to take the same `Brush` instance, and update its `Parent` every time the brush is used somewhere. This change triggers a `PropertyChanged` event that is propagated to the other (past) parents (which are in different still-opened windows) from the ""Device Dispatcher thread""...
So, in my app, I still get the exception RPC_E_WRONG_THREAD.


By the way, should this fix be applied to MAUI?
It probably has the same issue:

https://github.com/dotnet/maui/blob/ac11efee51876880e4029f055fdd3976f6a09514/src/Controls/src/Core/VisualElement.cs#L224
"
"I'm concerned about the lifetime mechanics of this type.  It contains pointers, so we need to ensure that they're freed, which would imply that it should have a destructor.

...because *as is*, `names`/`assemblies_bytes`/`assemblies_bytes_len` will *not* be freed from [`add_or_replace_entry`](https://github.com/xamarin/xamarin-android/pull/3365/files#diff-23d896d4af9a6583e2643499634eb15fR115) or [`clear_for_domain`](https://github.com/xamarin/xamarin-android/pull/3365/files#diff-23d896d4af9a6583e2643499634eb15fR94).

OK, so there's a known memory leak here.  It needs fixing.

But *how*?  The *normal* C++ solution would be a ""proper"" constructor, plus destructor, plus assignment operator (plus others?):

```cpp
struct InMemoryAssemblyEntry {
    InMemoryAssemblyEntry()
        : domain_id(-1), assemblies_count(0), names(nullptr), assemblies_bytes(nullptr), assemblies_bytes_len(nullptr)
    {
    }
    ~InMemoryAssemblyEntry()
    {
        for (int i = 0; i < assemblies_count; ++i) {
            delete[] names [i];
            delete[] assemblies_bytes [i];
        }
        delete[] names;
        delete[] assemblies_bytes;
        delete[] assemblies_bytes_len;
    }
    InMemoryAssemblyEntry& operator=(const InMemoryAssemblyEntry& other) {
        // ...?
    }
};
```

The *other* SNAFU here is that `InMemoryAssemblyEntry` instances are used with `memcpy()`! https://github.com/xamarin/xamarin-android/pull/3365/files#diff-23d896d4af9a6583e2643499634eb15fR128

This *immediately* makes the ""normal"" C++ approach feel ""wrong"", because `memcpy()` knows nothing of destructors.  It's ""probably"" fine, but it *really* makes me side-eye it.

Which is where a `std::vector<InMemoryAssemblyEntry>` starts looking *much* nicer, but as you [mentioned earlier](https://github.com/xamarin/xamarin-android/pull/3365#discussion_r316209406) this has complications.

I'm thus not sure of the appropriate path forward.  THERE ARE MEMORY LEAKS."
"This line appears wrong, in that the generated `xa-build-status-11.1.99.16_8105993-Darwin-Release.zip` doesn't contain any `CGManifest.json` files. :-("
"ok, i checked on things.  we already throw in caes where there is a true invariatn issue.

What's going on here though is that we are resilient to legal things a caller might do.  For example, we may have the persistence service, but the user may just 'new up' a workspace/solution in memory that has no set solution-path.  It's totally legal to call into us, asking us to store data.  In that case we just return 'false' to say ""sorry, we couldn't do it"".  

THe value of this flag is that i'm effectively telling the system: you're in a context where this sort of behavior *of the caller* should be considered a bug.  It's useful when testing things out so that we can distinguish why we get certain results (for example, did we fail to read a stream because we truly didn't have it, or because the input was wrong)."
"> Maybe something is differently wrong, because the bad web request ""worked""?

Out of curiosity, what does the string returned by `GetStringAsync` contain?"
"I'm a bit confused about this stackalloc - usually you get stack allocated buffer back (esp) when you get out of the current scope which in this case is `}` from the `if` statement (might be wrong here) which would mean when buffer overlaps you always end up writing where you shouldn't be.

At the same time the variable scope is different so I'm not certain this will work as expected.

Is this guaranteed to work correctly on both core clr and mono?

cc: @github "
"A bit confused, or maybe i'm looking at the wrong place. Checking the header of `NSFileManager.h` - doesn't have `NSUserName`. Could only find `FOUNDATION_EXPORT NSString *NSUserName(void);` in `NSPathUtilities.h`. How do we know its a static property of the class?"
The indentation is wrong here (whitespace is significant in makefiles): there should be no indentation for this line.
"There are always default values:

* locProj:  ""Localize/LocProject.json""
* name: ""outDir: ""$(Build.ArtifactStagingDirectory)""
* lclSource: lclFilesInRepo""
* lclPackageId: """"
* lclPackageVersion: ""highestLclPackageVersion""
* lclPackageVersionVariable: : """"
* isEnablePseudoLanguagesSelected: ""false"",
* isCreatePrSelected: ""false"",
* repoType: ""azureReposGit"",
* prSourceBranchPrefix:  ""locfiles"",
* azureReposGitPatVariable:: """",
* gitHubPatVariable:  """",
* isAutoCompletePrSelected: ""true"",
* isDeletePrSourceBranchSelected:  ""true"",
* isUseLfLineEndingsSelected: ""false"",
* gitHubPrMergeMethod:""merge"",
* packageSourceAuth: ""credentialProviderAuth"",
* patVariable: """",
* lsBuildPackageId: ""lsBuildXLoc"",
* lsBuildXLocPackageVersion: """",
* lsBuildLegacyXLocPackageVersion:  """",
* lsBuildWarningLevel: ""0"",
* xLocConsoleLoggingLevel: ""information"",
* nugetCliVersion: """",
  
Looking at it, we are interested in 

**isCreatePrSelected** : 'Create a pull request to check-in localized files to the repo""', defaults to false, so should be false except when we are in 'Schedule' (correct in the PR
**isAutoCompletePrSelected**: ""Automatically complete a pull request for localized file check-in skipping review."" DEFAULT TRUE MUST BE FALSE This is where you are wrong since you added under the Schedule if it means that is true, should always be false no matter what.

Those are the two I have checked, please review all of them with the docs/src I fwd you.

"
">if (previousDictionary.Count > currentDictionary.Count) [](http://example.com/codeflow?start=12&length=55)

Is there something wrong with removing the delegate? #Closed"
"If we receive -1 something is quite wrong here. It would mean that we got passed JSObject instance which was already disposed/collected.
I will add assert."
annotations most of the the time are supposed to express the intention and not implementation bugs/inconsistencies. I'd prefer we've filed a bug if that feels wrong (not going from returning nullable to non-nullable is ok so it's fine to leave the base as nullable for now and change it when bug is fixed)
I was wrong. `partial ref struct` is [not allowed](https://sharplab.io/#v2:EYLgtghglgdgNAFxBAzguATEBqAPgJwFMAzAAgAcJ8EoIAbUtfAVwGMFSBlARlIG9SAXwCwAKDGVqtBkTJM2HTgCZ+QoA===). You have to say `ref partial struct`.
"I should write a keylogger that detects when I write any word with an i and an e next to each other, and have it pop up a message box saying ""you probably got that wrong"""
I think the ```)``` was added in the wrong place
i think you may be using 'model' to refer to two separate things (please correct me if i'm wrong).  but it soundsl ike you're using it to reference the data that LSP returns *And* to reference the wpf UI you're building.  THat's a bit confusing reading these methods as it's unclear which you're referring to.
"Might be crazy idea but:
How common is the `Count == 0` case in practice? If less common than `Count > 0`, isn't it worth to define an embedded storage to avoid the array allocation?

```C#
internal struct HeaderStore
{
    private HeaderEntry _e000, _e001, _e002, _e003, _e004, _e005 /*...*/ ;

    public Span<HeaderEntry> Entries => MemoryMarshal.CreateSpan<HeaderEntry>(ref _e0, MaxHeaderCount);
}
```"
"Thank you for the debugging advice. I've spent few days trying comparing dasm files. It is very hard for me to tell what is exactly wrong, but I found some suspicious facts:
1. Regressions mostly occur when 'x' is a pointer (or ref variable). 
Here is the diff example https://www.diffchecker.com/fQLJQ4YW
2. Regressions mostly occur in `MoveNext()` method 
<details>
  <summary>Example</summary>
 <img width=""1201"" alt=""image"" src=""https://user-images.githubusercontent.com/18483133/147747869-a32338bd-d4fb-4ff3-89ad-2ea67fcc1b0f.png"">
</details>
3. Some regressed dasms show terrible PerfScore. Here is the example https://www.diffchecker.com/BQUzlt9K"
"What this function actually does is a little unclear from the names. If I understand it correctly, what's happening is it pulls a bound function's *wrapper* out of the handle table, and invokes the wrapper which is responsible for actually invoking the js function. so ""js_fn"" is a misleading name for this and I struggled at first to understand why we would be passing a single VoidPtr to an arbitrary javascript function.

My proposed names would be 'wrapper_js_handle' for the handle (so it's clear that it's not a handle to the *actual* js function target) and 'wrapper' for the local. We may also need to do a check here of some sort to ensure that the jsobj we got is actually a bound function and not something else, since they appear to live in a global handle namespace and someone writing broken code could accidentally pass the wrong kind of handle to the invoke icall. (We could just set a property on the wrapper function objects to check for)"
"@github Thanks for waiting for me! This PR is incorrect. 
I think this is a by product of the lcl's being put into the wrong locations (the PRs that we have been getting recently) and the Sunday build that tries to move the translations from the lcl files into the LocProject.json's output paths. Notice that none of these files contain the translations.
I'll close this one and hopefully if the lcl paths are corrected, we won't get this again next week"
"Apparently I'm delusional. Apparently either I blurred old VB semantics with VB.Net, or I'm just wrong, but there are no true omitted arguments in VB. I'll give Gen's suggestion some thought.
"
Also this minor wrong error message was fixed here. Now on negative length it actually signals about negative length and not about some indexing errors.
"This seems very wishy-washy.  On what were these ""guesses"" based?  What are the chances these are wrong in a direction that causes us to do the wrong thing?"
"My understanding (that could be very wrong) was that the JIT tried to compile your _entire_ method as soon as you entered it, so it would demand IErrorList2 must exist _before_ your code ever gets to the point where it's checking. Generally the pattern has been separate methods get involved, sometimes marked NoInline. But as long as you've tested, :+1:.
"
"Notably the above assert is also wrong, it should be `||` not `&&` at a minimum. But I agree if the `radix == 10` path is dead code, we don't need the comparison."
"Huh, you're right about it returning the wrong value when _on_ `namespace`, but it doesn't seem to be causing any problems. Subsequent checks in the recommendation service must be mitigating it. I'll need to investigate this a bit more.
"
"This is wrong, it should be `Foo` or maybe `{ a: boolean, b: boolean }`"
"@github 

> Can you elaborate on why this limitation was placed on partial methods previously. Having a small history or the design reasons would be informative.

The feature `partial` methods was originally created to help out designer code generation patterns. Developers wanted to add code at the end of certain designer generated methods like ctos, `InitializeComponent`, etc ... In the early days of generators the only way to do this was to go edit the generated file and add a call into your user defined code. This was really brittle because every time the generator re-ran the added user call would be ""deleted"" because it wasn't a part of the standard code gen. 

Generators could have helped here by emitting a call to a well named method at the end of `InitializeComponent`. However if that method didn't exist it would be a compilation error and a breaking change. 

The `partial` methods feature helps this because it's a conditional hook method. The generator both emits the call to `OnInitializeComponentCompleted` and the `partial` method signature. 

```cs
partial void OnHookCompleted();
```

This is safe to do because if the user doesn't define `OnHookCompleted` then the compiler will just delete the call to it at the end of `OnInitializeCompleted`. Now designer generators can safely emit hook behavior in a completely back compat fashion. 

The `void` restriction exists because the feature specifically allows for the `partial` method invocation to be deleted. If the language allowed non-void return methods then it would allow for scenarios like this:

```cs
partial int SomeMethod();

...
// what is the value of ""i"" if the call to SomeMethod is deleted?
int i = SomeMethod(); 
```

My thinking here is that we could relax the `void` restriction and supplement with a rule essentially like the following:

> partial methods which are non-void returning **must** have an implementation method

That didn't really make sense in the context of the original feature but would make sense in the context of source generators. There the `partial` would just be the template the user is directing the source generator to implement for them. Hence return values make a lot of sense.

Again caveats: take this more as my internal musings vs. actual direction idea. I wasn't on the C# team when `partial` methods were added so I may lack some context. Will bring this up though with others next week to get their opinion on it. 

Note: it's been a while so I'm sure I got a few of the method names wrong. The overall scenario though is correct. "
"@github dumb question... is this step different in the linux vs windows nano tests? In Windows it is taking 46s to execute. "
"@github There are some open questions. It would be nice to get feedback on these.

### Should be addressed

1. ~Wrong/inconsistent behaviors in some `GetChangeAsync` implementations:~
https://github.com/dotnet/roslyn/pull/47511#discussion_r502922003
Done in b894788c ff

1. ~Superfluous `SymbolCompletionItem.CreateWithSymbolId` overloads~
https://github.com/dotnet/roslyn/pull/47511#discussion_r502914019
Done in 1455039

1. ~How does OmniSharp/omnisharp-roslyn#1986 affect this PR? As far as I understood, OmniSharp/omnisharp-roslyn#1986 would enable these providers in other IDEs without any changes on our side.~
See discussion below

1. ~Sorting of the `this[]` completion item~
https://github.com/dotnet/roslyn/pull/47511#discussion_r515146845
Done in 8c31f7f9.

### Minor improvements/inconveniences

5. ~Support for combinatorial operators:~
https://github.com/dotnet/roslyn/pull/47511#discussion_r500343211
Not now (if ever). See the discussion above.

5. ~Use `inlineDescription` for operators (e.g. to distinguish `+`: `a + b` vs. `+a`)~
https://github.com/dotnet/roslyn/pull/47511#discussion_r502912863
Done in 517f59f.

5. Some oddity with linked documents and symbol descriptions
https://github.com/dotnet/roslyn/pull/47511#discussion_r502914934

5. ~Sorting of built-in type conversions:~
https://github.com/dotnet/roslyn/pull/47511#discussion_r500530822
No. Can't be realized consistent for all cases and is inconsistent with other providers.

5. ~Prefix verification in tests:~
https://github.com/dotnet/roslyn/pull/47511#discussion_r500608348
Done in 305b723 ff"
"This is wrong. This was fixed by #8786 in master and indicates a change we also need to make here.
"
"> it meant I couldn't use ""add checks for all"" at the public entrypoints after annotating without immediately auditing to make sure it didn't add one I didn't want.

I understand :)  it's just not something i think meets any sort of bar here.  It's in line with all our other refactorings that do something wrong some of the time."
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=79104&_a=summary))."
"The dumps occurred on the wrong machine (the host machine, not the helix target)"
"> It seems like the HTTP callback is not ready to called multiple times.

This is specific to HttpClientHandler (you're not hitting this when using SocketsHttpHandler directly, right?).  The callback signature from HttpClientHandler expects the HttpRequestMessage to be passed in, so we need to capture the instance into the closure used for the underlying RemoteCertificateValidationCallback so that it can be in turn passed to the handler's ServerCertificateCustomValidationCallback.  But as a result of capturing it in that way, the HttpRequestMessage would end up being referenced for the lifetime of the callback, thus keeping it alive and from being garbage collected.  The fix for this issue (https://github.com/dotnet/runtime/issues/36979) was to null out the field after the callback was invoked (https://github.com/dotnet/runtime/pull/37021), with the assumption that it wouldn't be invoked again.  If it is invoked again, then it triggers the assert put in place to validate it wasn't being invoked again.

So, we have a choice to make, either:
1. Ensure the callback is never invoked multiple times.  But it sounds like that's not actually viable, that it's expected to be invoked multiple times in the face of renegotation if the certificate changes.
2. Allow null to be passed instead of the original message on renegotation.  This is in fact what's happening today, and the nullable annotation on the parameter is wrong.  But if we want to accept that, then a) we need to remove the assert, and b) we need to change the first argument of the callback from `HttpRequestMessage` to `HttpRequestMessage?` to signify that it can actually be null, so that callbacks guard against it if they happen to be using the request message.
3. Hold on to the message for the lifetime of the connection in case it may be needed for a subsequent callback invocation, essentially reverting #37021.
4. Expose something on HttpClientHandler to allow this choice to be made by the dev, e.g. exposing AllowRenegotation.  But as it would default to true as is currently the case, this choice alone is likely insufficient.

None of these options seem great, but (2) is probably the best.  @github? (@github, FYI on nullable annotations)"
"Yeah, you're not wrong; I just can't immediately think of another way to fix the original issue (at least not one that doesn't totally overhaul inference, anyway), so trying to make this performant sounds like the best avenue to pursue."
"What methods specifically do you need optimized? The only one that is likely to regress is `Equals(StringSegment)`, because it's now bouncing through an indirection. But I can hand-tune that if needed.

Reiterating my earlier comment: if this is _really_ in a hot path, seriously consider allowing some behavioral changes here. For instance, the fact that there's special-casing all over the place to distinguish between `default(StringSegment)` and `StringSegment.Empty` leads to unnecessary complexity + slower perf. Allowing the two to be treated as equivalent would optimize things.

Allowing this change in behavior would make existing methods dumb wrappers around the already highly-optimized span versions. For example:

```cs
// Pretty much the whole call stack gets inlined into the caller at this point.
public bool Equals(StringSegment other) => this.AsSpan().SequenceEquals(other.AsSpan());
```"
">  allowing to reference managed-only linux RID-specific implementations that e.g. just p/invoke (which work and we want to have) versus pulling in native .so files for linux that definitely won't just work on android.

Do packages need to provide a different native asset in order to work on android?  If so they can provide that in the `android-arm64` folder.

Do packages need to not provide any native asset to work on android?  If so they can make that happen by adding an empty `android-arm64` folder.  Can't change the package?  Consumers can add `ExcludeAssets=""native""` on the PackageReference.

There's no promise that a package that specializes for a platform will just work on a brand new platform that they've never considered.  RIDs try to do their best to represent useful reuse, so that more often than not folks can avoid duplication when they specialize by platform.  They can't get it right 100% of the time, but when its wrong there should be a way to make a package specialize for the new platform once the author understands it needs to.  We should only be changing RID hierarchy if there is data out there showing that a majority of the time the RID graph leads to duplication rather than reuse."
"@github it looks like I misremembered the behaviour of Windows links.
(Current behaviour) It gets the time on the link file, but sets the time onto the target file (this seems inconsistent to me).
What should the expected behaviour be? I personally feel like it should be both get and set on the link itself (which is what I've implemented for Mac), which would make more sense with the eventual completion of https://github.com/dotnet/runtime/projects/41 to me, and also how I'd like to use it in my code.
In my code it looks like I just disabled setting time on links on Windows because it could crash if the target doesn't exist.
I didn't/haven't yet invested time into seeing how to set the time on links using low-level Windows APIs.
Also, it should be noted that my test would pass if the set and get both did either the target or the link itself.
How should we continue @github, should I just add Windows to the ActiveIssue attribute as well as the other failing platforms, or do something else? I'm happy for discussion to be had about what the correct behaviour should be, but personally I need some way to set it on the link itself: whether it's using a different api or not doesn't bother me.
Explanation of my logic with links:
Functions that work with the target (windows afaik): Set times, Reads and writes (it makes sense that it would be this to me)
Functions that work with the link itself (windows afaik): Delete, Exists, Get times, GetAttributes
I'm not sure where other APIs are.
To me it would make sense for all the APIs to work with the link itself, except for reading/writing the content (since link files have no visible content and this is the point of links). With the link API proposed in #24271 one could simply get the target and set attributes (time, attributes, etc.) on the target if they so desired.
Obviously if we're setting it on a file in a symlink folder then it makes sense to do it on the real file.
Also of note: I currently emulate a large portion of the logic in #24271 in one way or another as I wanted to be able to manipulate links, but I couldn't find a different way to do it other than writing interop code myself for Windows, and on Mac I just called the `ln` executable.
Edit: also my test seems to be failing on Mac despite testing it locally, I must have done something wrong locally, I'll fix the test in the next commit.
Edit 2: I don't seem to be able to repro the issues with the test locally yet (specifically SettingUpdatesPropertiesOnSymlink), which is odd. I've confirmed that the dates are set on the link files by pausing it just before the test finishes, not sure what's happening here."
"> Do you mean, can I add an error if both az_storage_key is set and upload-private (or `upload --private_store`) is set? I could do that.

Yes, that way we don't accidently upload things in wrong storage."
@github Do you think you could help Jo figure out what may be wrong?
"@github for some reason one of the tests fails on ARM64 for `uint`.

```txt
Assert failure(PID 93 [0x0000005d], Thread: 112 [0x0070]): Assertion failed 'isVectorRegister(reg1)' in 'System.Numerics.Tests.GenericVectorTests:TestSum(System.Func`2[[System.UInt32[], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.UInt32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]])' during 'Generate code' (IL size 52)

File: /__w/1/s/src/coreclr/jit/emitarm64.cpp Line: 4387
```

I am unfamiliar with the assertions there. Can you provide assistance to figure out what is wrong, please?"
"> On Unix, this test seems to be prone to IPv4-IPv6 port collision.
> @github what does this mean? How does it fail?

I realized that I was likely wrong with this. Even if `DoAccept` accepts some unrelated sockets, it shouldn't timeout.

> Should we not increase the timeout?

In my experience this is insufficient on a slow overloaded CI machine, we don't really know how much the timeout should be. Disabling parallelism usually makes thing much more deterministic.

@github do you think we may be masking a bug with the serialization?"
"Looks like we have test failures on Ubuntu 18.04, possibly becuase we are calling `SSL_renegotiate` on TLS 1.3 session. The only way this can happen IMO is that we are compiling against older openssl headers and thus the branch calling `SSL_verify_client_post_handshake` is left out due to preprocessor define.

<details>
<summary>CI Log</summary>

```
===========================================================================================================
/datadisks/disk1/work/9FBA08A2/w/A8980923/e /datadisks/disk1/work/9FBA08A2/w/A8980923/e
  Discovering: System.Net.Security.Tests (method display = ClassAndMethod, method display options = None)
  Discovered:  System.Net.Security.Tests (found 290 of 475 test cases)
  Starting:    System.Net.Security.Tests (parallel test collections = on, max threads = 2)
    System.Net.Security.Tests.SslStreamEKUTest.SslStream_SelfSignedClientEKUClientAuth_Ok [SKIP]
      Condition(s) not met: ""IsRootCertificateInstalled""
    System.Net.Security.Tests.SslStreamEKUTest.SslStream_ServerEKUClientAuth_Fails [SKIP]
      Condition(s) not met: ""IsRootCertificateInstalled""
    System.Net.Security.Tests.SslStreamEKUTest.SslStream_ClientEKUServerAuth_Fails [SKIP]
      Condition(s) not met: ""IsRootCertificateInstalled""
    System.Net.Security.Tests.SslStreamEKUTest.SslStream_NoEKUServerAuth_Ok [SKIP]
      Condition(s) not met: ""IsRootCertificateInstalled""
    System.Net.Security.Tests.SslStreamEKUTest.SslStream_NoEKUClientAuth_Ok [SKIP]
      Condition(s) not met: ""IsRootCertificateInstalled""
    System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_NegotiateClientCertificateAsyncTls13_Succeeds(sendClientCertificate: True) [FAIL]
      Interop+Crypto+OpenSslCryptographicException : error:1420410A:SSL routines:SSL_renegotiate:wrong ssl version
      Stack Trace:
        /_/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(298,0): at System.Net.Security.SslStream.<RenegotiateAsync>d__172`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()
        /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamNetworkStreamTest.cs(463,0): at System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_NegotiateClientCertificateAsyncTls13_Succeeds(Boolean sendClientCertificate)
        --- End of stack trace from previous location ---
    System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_NegotiateClientCertificateAsyncTls13_Succeeds(sendClientCertificate: False) [FAIL]
      Interop+Crypto+OpenSslCryptographicException : error:1420410A:SSL routines:SSL_renegotiate:wrong ssl version
      Stack Trace:
        /_/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(298,0): at System.Net.Security.SslStream.<RenegotiateAsync>d__172`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()
        /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamNetworkStreamTest.cs(463,0): at System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_NegotiateClientCertificateAsyncTls13_Succeeds(Boolean sendClientCertificate)
        --- End of stack trace from previous location ---
  Finished:    System.Net.Security.Tests
=== TEST EXECUTION SUMMARY ===
```
</details>"
"I am just being dumb... Of course you want to use the context of the button... What else are you supposed to use? Another view? 🤦 "
"This is the only ""breaking"" change, but anyone using this value without it being set by the user is getting a wrong value. I could use `0`?"
"Sorry if my comments gave off the wrong impression, I just thought it was a neat idea to avoid having to end up with lots of `Absolute~` methods – I do get that this makes it a bit more difficult to implement since you can’t trust the parameter to be a result from another URLHelper method."
What's the behavior if there are multiple `CaptureExtraAttributes = true` and one or more is of the wrong type?
We do it in ConfigureAppConfiguration to avoid adding a new lifecycle method in hosting. This happens early enough in the configuration process that makes it really hard to observe the wrong WebRootFileProvider
"Not sure why this file is being added to git here, but I don't think it should be.

My guess is that, at some point, there was a mistake and the file was generated in the wrong place (here) instead of the obj/bin directory.

So, can you delete this file?"
"@github This is now failing with:

> F:\workspace\_work\1\s\src\Grpc\test\testassets\InteropClient\InteropClient.cs(103,35): error CS1061: 'SimpleConsoleFormatterOptions' does not contain a definition for 'DisableColors' and no accessible extension method 'DisableColors' accepting a first argument of type 'SimpleConsoleFormatterOptions' could be found (are you missing a using directive or an assembly reference?) [F:\workspace\_work\1\s\src\Grpc\test\testassets\InteropClient\InteropClient.csproj]

Should I not merge this forward from preview8? Did I resolve the conflicts wrong?"
"> Frankly, this feels like the wrong approach. That you're getting an error here means the returned `DateTime`s aren't `DateTimeKind.Utc`, which seems... not correct for their intended use.

I do agree that the times from the JWT library should be in UTC, and you can see that they tried to do that in most cases
https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/d6f2b66d788195b50f2b1f700beb497851194c73/src/Microsoft.IdentityModel.Tokens/EpochTime.cs#L70

However, whenever `DateTime.MinValue` is used, the library does not convert it to UTC:
https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/d6f2b66d788195b50f2b1f700beb497851194c73/src/System.IdentityModel.Tokens.Jwt/JwtSecurityToken.cs#L452
https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/d6f2b66d788195b50f2b1f700beb497851194c73/src/System.IdentityModel.Tokens.Jwt/JwtPayload.cs#L730
https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/d6f2b66d788195b50f2b1f700beb497851194c73/src/System.IdentityModel.Tokens.Jwt/JwtPayload.cs#L742

I recommend filing an issue at https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet and perhaps even contributing a change for it!"
"So this one is a bit confusing.. `typeof(HubServerProxyAttribute)` raises an exception during build of unit test project. (attached debugger to build process) Not exactly sure what's wrong since generator itself builds fine and intellisense works OK in `HubServerProxyGenerator.cs` as well as `HubServerProxyGenerator.Parser.cs`.

```
System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.AspNetCore.SignalR.Client.Core, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.
File name: 'Microsoft.AspNetCore.SignalR.Client.Core, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60'
   at Microsoft.AspNetCore.SignalR.Client.SourceGenerator.HubServerProxyGenerator.Parser.GetSemanticTargetForGeneration(GeneratorSyntaxContext context)
   at Microsoft.AspNetCore.SignalR.Client.SourceGenerator.HubServerProxyGenerator.<>c.<Initialize>b__1_4(GeneratorSyntaxContext ctx, CancellationToken _)
   at Microsoft.CodeAnalysis.UserFunctionExtensions.<>c__DisplayClass0_0`2.<WrapUserFunction>b__0(TInput input, CancellationToken token)
```"
The sample at https://stackoverflow.com/a/63029759 appears to show that it does prevent loading a file with a wrong hash.
"I recommended it because people often specify the wrong slash when deploying their app cross platform. E.g. developing on windows and deploying to linux. The alt separator still works in most APIs, and is invalid to combine with the primary separator (right?).

E.g. all of these are valid and we wouldn't want to add an additional separator to any of them, regardless of platform:
C:\dir/
C:\dir\
C:/dir\
C:/dir/"
"So turns out I used the wrong base branch to create a new one, brb."
"I was wrong with my last comment. Task captures the ExecutionContext when it's constructed so it uses that ExecutionContext rather than the ExecutionContext of the thread it's completed on (thankfully thinking about this more).

This makes me want to return a ConfiguredTaskAwaitable from InitializeConnectionAsync so the entire tests run without the sync context like I thought was happening before, but it doesn't have to be this PR. E.g.

```C#
protected ConfiguredTaskAwaitable InitializeConnectionAsync(RequestDelegate application, int expectedSettingsCount = 3, bool expectedWindowUpdate = true)
{
    return InitializeConnectionInnerAsync(application, expectedSettingsCount, expectedWindowUpdate).DefaultTimeout().ConfigureAwait(false);
}
```"
">captureIdForResult [](start = 114, length = 18)

This is wrong, ```captureIdForResult``` should never be propagated by default. To give you more context, it is ```id``` for the result of the entire node, this portion doesn't represent the final result. Pass ```null``` instead #Closed"
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
"> Does the same comment apply to all the cases, such as the the Boxing case, or not?

It probably does. This, however, doesn't mean that there is something wrong with this comment, or there is something wrong with its placement. This is an existing comment that I intend to keep because it was accurately describing and still accurately describes intent of the code it is associated with.

---
In reply to: [236781749](https://github.com/dotnet/roslyn/pull/31264#discussion_r236781749) [](ancestors = 236781749,236779328,236492967,236482834,236482286)"
I don't think this blocks the PR. I don't see anything wrong with this code. Could you file a bug so I know to revisit this later?
"The former would give the wrong type to the variable, and the latter would incorrectly let through null.

---
In reply to: [301773105](https://github.com/dotnet/roslyn/pull/37052#discussion_r301773105) [](ancestors = 301773105)"
"359 is wrong.  Since we declare the variable as `out` in the P/Invoke the shim must look exactly like

```C
if (outVar != NULL)
    *outVar = default;

if (requiredVar1 == NULL || requiredVar2 == NULL || ...)
    return -1;
```

Otherwise we're not clearing out things that we promised we'd clear."
indentation seems wrong.
This seems just wrong.  I think we should remove.
">startIndex [](start = 17, length = 10)

Does this name match underlying parameter name? Consider testing with a ""wrong"" name as well. #Closed"
"> It uses fmov and addv. See https://godbolt.org/z/uFN5dv

You probably want `__builtin_popcountl` for the `long` case otherwise the result is wrong.

> So I am thinking of changing uint implementation to just call ulong implementation by doing PopCount((ulong)value); because the generated code of ulong is efficient and matches what gcc generates.

Yeah I agree that you should stick to the `addv`. 

> That adds 1 extra mov w0, w0 to zero extend and then use x0 for further operations, but still slicker and don't incur any performance penalty.

If the extend the same problem as with `CreateScalar`? i.e. it doesn't know that only the bottom 32-bits will be used so it doesn't need to extend? To be fair we did only clean that up in GCC 9."
wrong param
"> Can we call this something more descriptive, like PerformWriteAsync or something like that?

Sure

> Can we fold the call to FinishWrite in to this routine? That would avoid having to pass the writeBytes again to FinishWrite.

I think so; we can just have the delegate return the flush mode that's desired.

> Previously, callers would deal with failure cases here with just try/catch. Can we continue to do that rather than adding failedAcquireAction?

If we're not concerned about what might go wrong if the delegate threw an exception (e.g. an OOM), then sure.  It sounds like you're saying that's the case."
That first exclamation mark is completely wrong.
What's wrong with it? I don't see the ambiguity.
"Correct me if I'm wrong, but aren't these al actually only checking for `.R` and `.A`? If I had a type with only those members, what would happen?"
"Why are language specific messages and descriptors being created in language agnostic layer? This seems wrong, the sub-type should have all language specific code and abstract type should have no mention of language specific types, objects or resource strings."
this is a really dumb thing that is happening with clang 9.0 -- VS will corrupt the format now until we fix
"If there's not a callback, and we `S_FALSE` here, there's effectively no way for the hosting app to recover, right? they won't even _know_ that something went wrong, right?

Should we instead still fail-fast if there's no callback?"
"The rename prevents a wrong overwrite of the modeAtPosition which then ends up with wrong calls in the getRangesToPosition.
getRangeToPosition in Mode html for selection grow/shrink doesn’t work because the function does not return anything if not embedded. I don’t have the in depth knowledge of the code to return the necessary implementation for the case that html is not embedded.

Von: Johannes Rieken [mailto:notifications@github.com]
Gesendet: Dienstag, 22. März 2016 12:13
An: Microsoft/vscode vscode@noreply.github.com
Cc: Stefan Schneider Stefan.Schneider@connectiv.de
Betreff: Re: [vscode] Bugfix: Prevent overwrite of modeAtPosition (#4505)

In src/vs/languages/html/common/htmlWorker.tshttps://github.com/Microsoft/vscode/pull/4505#discussion_r56969239:

> - ```
>          return callback(modeAtPosition.getId() !== this._modeId, modelAtPosition);
>   ```
> - ```
>          return callback(modeAtPositionMode.getId() !== this._modeId, modelAtPosition);
>   ```
>   
>     }

This is just a variable rename. Is there more to come?

—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHubhttps://github.com/Microsoft/vscode/pull/4505/files/8b77f3c26f5924f683246d56ef8cb5f39e4c375b#r56969239
"
"I would add some sort of note about about this since it's basically a hack to get around the fact we only register images based on the filename. It's quite possible someone is confused by this down the line.

I'd probably also add a note in `mono_image_open_a_lot_parameterized` about the function's lack of awareness of this hack. If you load a satellite image by name for one culture with it and then attempt to load a second culture after, you should get the wrong image. This is not a regression, and I believe is how this has worked for a long time now, but it's the one place we *didn't* fix this."
"This assert looks wrong. We're asserting on two test data parameters? "
"This is basically wrong - for example `win81-arm64-aot` is a valid RID (see https://github.com/dotnet/runtime/blob/master/src/libraries/pkg/Microsoft.NETCore.Platforms/runtime.json and scroll to the end of the file).:
* Since this is test-only code - we should take the second part after splitting on `-`"
"The code style is wrong, we use tabs, you can also remove the summary.

I think we should do this internal. "
"@github Correct me if I'm wrong but I think it instantiates 2,097,152 (`1 << 21`) dictionaries. 

Is there something that we could do to reduce this number while keeping the coverage? Perhaps you could do `Serialize<MyEnum>` until you have the cache at the desired number and then call `Serialize<Dictionary<MyEnum, int>>` on the desired edge cases."
"EZ mentions that maybe this is because we named it wrong? `ITextView` might be better? 

>  ""Does IText mean 'this is a control that displays text' or 'here are some properties of a thing that displays some text'?"""
"> 
> 
> @github can you move all of the badge properties to Shell as Attached properties? When we put the `FlyoutIconProperty` on the BaseShellItem that was wrong.

Are you sure? Just curious because I was asked before to move that to the BaseShellItem. If you can double-check and confirm I will make them attached properties again."
"Sorry about the delay, I'm pretty sure this branch is causing the problem since you're targeting a different element? I might be wrong but you should resync with `main` since it definitely doesn't happen on the latest."
"There's a ton of work that needs to be done on the conapi interface before we can merge. Other than that, we need to make sure that everything that's currently only implemented in `TerminalDispatch` is also copied across to `AdaptDispatch`. And as I said above, if you're copying functionality from `AdaptDispatch` (like these tabs), it's preferable if the code is essentially identical between the two.

So as long as you're doing that, I don't think there's anything wrong with this PR. I'm just not sure why we actually need the functionality in `TerminalDispatch` at this point. Are we intending to pass these tab sequences through conpty?"
A nit - wrong indentation
It started out with the elipses. Then I swear I saw a different processing pop up without it and thought I had made the wrong choice.
nit: `regRec` is wrong here.
"I'm not sure this is right for unpackaged versions of the Terminal. I might want to tap in @github for this bit, hes a bit more familiar with running the Terminal unpackaged. 

Just looking at my own files, I've only got a `%localAppData%\Microsoft\Windows Terminal`.

Heck, I'm not sure this is ever relevant for Preview builds running unpackaged - I think they always just use `%localAppData%\Microsoft\Windows Terminal` anyways. I might be wrong here. "
"For type declarations like `partial record C ...`, we were relying on `IsPartialMember` returning `true` (didn't investigate how/why), which resulted in same behavior but arguably for the wrong reason.

---
In reply to: [580451252](https://github.com/dotnet/roslyn/pull/51252#discussion_r580451252) [](ancestors = 580451252)"
"> I like the idea. But this does not seem to really fit in with Windows Terminal trick. It's more about zsh itself. Don't get me wrong. I love zsh and use it almost everyday. But you can zshell anywhere you want, right? Be it iTerm2, Gnome Terminal. Konsole, etc. You know what I mean.

Yup I understand but in readme Microsoft terminal member said add tips and tricks and this trick can help others that's why added what do you think ?  "
"This test fails IOperation validation in CI on one leg: https://dev.azure.com/dnceng/public/_build/results?buildId=1046502&view=ms.vss-test-web.build-test-results-tab&runId=32377276&resultId=129370&paneView=debug

@github @github do you want a bug filed? Or have I done something wrong?"
"Random musings as play around with `tools/xat/run.sh`…

I would suggest attempting to make the `tools/xat/run.sh --help` output less anemic/more useful:

```
% tools/xat/run.sh --help

Locating essential tool binaries
  • git
     Found: /usr/local/bin/git
  • homebrew
     Found: /usr/local/bin/brew
  • pkgutil
     Found: /usr/sbin/pkgutil
usage: xat COMMAND [OPTIONS]

Xamarin.Android v11.2.99 test shell

Global options:
  -v, --verbosity=LEVEL      Set console log verbosity to LEVEL. Level name may
                               be abbreviated to the smallest unique part (one
                               of: silent, quiet, normal, verbose, diagnostic).
                               Default: normal
  -c, --configuration=CONFIGURATION
                             Set build CONFIGURATION instead of the default '
                               Debug'
  -D, --dull-mode            Run xat in ""dull mode"" - no colors, no emoji
  -E, --no-emoji             Run xat without using emoji, but still allow color

Available commands:
        list                 List known tests/categories/etc
        run                  Invoke selected tests/categories
```

I want to read top-down, assuming that information at the top is ""more important"".  (See also: every `man` page?)

Yet here we have a `Locating essential tool binaries` *section*, which *isn't* useful.  Then we get to a brief description, but nothing really useful.

(Actually, *every command* prints out this `Locating essential tool binaries` section, which is *useless noise*.  Unless something goes wrong, why do I want to see this?  Why should `xat list` show me the path to `git` or `brew`?)

I would suggest output similar to:

```
% run.sh --help
usage: xat COMMAND [OPTIONS]

Runs xamarin-android unit tests and applications.

See tools/xat/README.md for more information.

Global options:
  -v, --verbosity=LEVEL      Set console log verbosity to LEVEL. Level name may
                               be abbreviated to the smallest unique part (one
                               of: silent, quiet, normal, verbose, diagnostic).
                               Default: normal
  -c, --configuration=CONFIGURATION
                             Set build CONFIGURATION instead of the default '
                               Debug'
  -D, --dull-mode            Run xat in ""dull mode"" - no colors, no emoji
  -E, --no-emoji             Run xat without using emoji, but still allow color

Available commands:
        list                 List known tests/categories/etc
        run                  Invoke selected tests/categories

Examples:

  …

```

A month+ later, I'm still not able to remember, understand, or conceptualize the difference between a ""group"" and a ""suite"".  Perhaps different nouns should be used?

I can't quickly see what `xat list -m` *does*, other than emit more blank lines.

I wonder if a concept of ""tags"" would be more useful?  E.g. `AOT_Mono_Android` could have tags `{ aot Mono.Android.dll }`, `AOT_Xamarin_Forms_Performance_Integration` could have tags of `{ aot forms timing }`, etc.?

Is there/should there be a way to *search*/*filter* `xat list` output? `xat list -g`/`xat list -s` does a form of filtering, but -- as per above -- I don't *understand* this difference.

***EXAMPLES***.  The ""Documentation"" -- both in the commit message, and `xat --help`, and `xat run --help`, *everything* needs examples.

I should have read `tools/xat/README.md` first.  Doh.  It still lacks examples.

""test"" is possibly an overused noun.  Consider the `xat run --help` output:

```
% tools/xat/run.sh run --help
…
usage: xat run [OPTIONS]
By default the command runs all the tests.
```

OK, it runs tests.

```
  -g, --group=GROUPS         Run the specified GROUPS. Takes a comma-separated
                               list of test group names or can be repeated on
                               command line
  -s, --suite=SUITES         Run the specified SUITES. Takes a comma-separated
                               list of test suite names or can be repeated on
                               command line
```

what's the relation between these, again?

```
The arguments below use suite-specific format for each entry. 
```

Oh boy.

```
… They are ignored if a test suite runs as part of predefined group:
```

I have no idea what this means. What makes a ""group"" a ""predefined"" group? Why would they be ignored?  Why should they be ignored?  If I do `xat run -g APK_all_tests`, shouldn't `-n`/`-d`/`-a` be applicable?  This header suggests ¯\_(ツ)_/¯.

```
  -t, --test=TESTS           Run the specified TESTS. Takes a comma-separated
                               list of test names
```

So run the specified tests.  What happens with `-t` is used in combination with `-g=` or `-s=`? Is it additive? Set intersection?  Other?

```
  -i, --include-categories=CATEGORIES
                             Run tests in the specified CATEGORIES. Takes a
                               comma-separated list of test categories
```

So tests have categories?  (This is presumably the NUnit/xUnit concept of categories?) How does this relate to groups & suites?  *Does* it?  *Should* it?

What *is* `Unit_No_Node`? It doesn't appear to *do* anything:

```
% tools/xat/run.sh run -g Unit_No_Node
… prints out tool paths …
```

Some of the suite names also contain ""duplicative"" strings, and not necessarily in a way that ""conveys meaning"":

  * `JavaInterop_Java_Interop_Tests`
  * `JavaInterop_Java_Interop_Dynamic_Tests`
  * `JavaInterop_Java_Interop_Export_Tests`
  * …

Both ""Java"" and ""Interop"" are repeated twice in each suite name, but what's it *mean*? It needs to be unique, certainly, but why not trim off the `JavaInterop_` prefix?  (Perhaps another place where ""tags"" could be a useful concept?)

I suggested earlier that ""names"" -- not sure if I meant group name or suite name, and I still don't know the difference -- could/should be *filesystem paths*, because then at least I *know* what it corresponds to.  I have no idea what `JavaInterop_Java_Interop_Tests` is.  There are *at least two separate projects* for ""`Java.Interop-Tests`"":

  * `external/Java.Interop/tests/Java.Interop-Tests`: Desktop unit tests for `Java.Interop.dll` (in `Java.Interop-Tests.dll`)
  * `tests/Mono.Android-Tests/Java.Interop-Tests`: Unit tests for `Java.Interop.dll` for use within the `Mono.Android-Tests`.

With some thought, I *think* the second one isn't ""applicable"", because it'll be ""included"" in `Mono.Android-Tests`, but this is *thinking* that I don't necessarily want to perform. Reading the source code doesn't immediately help either!

```csharp
{ ""Java.Interop-Tests.dll"",                            Path.Combine (""Java.Interop-Tests"",                            ""Java.Interop-Tests.csproj"") },
```

How many `Java.Interop-Tests/Java.Interop-Tests.csproj` files are there?

```
% find . -iname Java.Interop-Tests.csproj
./tests/Mono.Android-Tests/Java.Interop-Tests/Java.Interop-Tests.csproj
./external/Java.Interop/tests/Java.Interop-Tests/Java.Interop-Tests.csproj
```

That's right, 2.

In short, the `JavaInterop_Java_Interop_Tests` suite name does me no favors, the ""Host Unit"" name of `JavaInterop: Java.Interop-Tests` doesn't help me, and the *source code* doesn't help me.  The only thing that *might* help, maybe, *if I got it right*, is mental effort to *exclude* one of the tests projects I know of, on the assumption that it's inclusion ""doesn't make sense.""

I'm thinking too hard already. :-(

What *would* be a useful ""grouping"" to me would be ""all AOT tests"".  No such grouping exists.

```
% ./tools/xat/run.sh run -s Mono_Android
…
```

What's the output look like when there's a *failure*?  Examples welcome!

As-is, output is, again, *verbose* (yay?), but not all is necessarily *useful*?

```
% ./tools/xat/run.sh run -s Mono_Android

Locating essential tool binaries
  • git
     Found: /usr/local/bin/git
  • homebrew
     Found: /usr/local/bin/brew
  • pkgutil
     Found: /usr/sbin/pkgutil
Main log file: …/xamarin-android/bin/TestDebug/tests-20210115T210001.log
Tool paths:
  • ADB: /Users/jon/android-toolchain/sdk/platform-tools/adb
  • AVD Manager: /Users/jon/android-toolchain/sdk/cmdline-tools/1.0/bin/avdmanager
  • BundleTool: …/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/bundletool.jar
  • Emulator: /Users/jon/android-toolchain/sdk/emulator/emulator
  • Java: /Users/jon/android-toolchain/jdk-11/bin/java
  • NUnit: …/xamarin-android/packages/nunit.consolerunner/3.11.1/tools/nunit3-console.exe

Running suite: Mono.Android
Running global initialization steps for suite kind 'APK', family 'APK'
 | 29
 | package:/system/priv-app/Shell/Shell.apk
 | List of devices attached
 | 98211FFBA006ND	device
 | 
Detected ADB target: 98211FFBA006ND
Building suite 'Mono.Android'
xabuild ""/p:Configuration=Debug"" /v:normal ""/bl:../../bin/BuildDebug/msbuild-20210115T210001-build_test_Mono_Android.binlog"" ""/r"" ""/t:SignAndroidPackage"" ""Mono.Android-Tests.csproj"" 
[MSBuild] running
[MSBuild] log file: bin/TestDebug/tests-20210115T210001.msbuild.build_test_Mono_Android.log

 | Success
Deploying package: Mono.Android_Tests-Signed.apk
 | Performing Streamed Install
 | Success
Running instrumentation tests
Starting test run for:
  Package: Mono.Android_Tests
  Instrumentation: Mono.Android_Tests/xamarin.android.runtimetests.NUnitInstrumentation
 | INSTRUMENTATION_RESULT: failed=0
 | INSTRUMENTATION_RESULT: filtered=0
 | INSTRUMENTATION_RESULT: inconclusive=0
 | INSTRUMENTATION_RESULT: nunit2-results-path=/storage/emulated/0/Android/data/Mono.Android_Tests/files/Documents/TestResults.NUnit.xml
 | INSTRUMENTATION_RESULT: passed=871
 | INSTRUMENTATION_RESULT: run=873
 | INSTRUMENTATION_RESULT: skipped=2
 | INSTRUMENTATION_RESULT: total=0
 | INSTRUMENTATION_CODE: -1
Logcat output path: …/xamarin-android/bin/TestDebug/logcat-Debug-Mono.Android_Tests.txt
Test results output path: …/xamarin-android/bin/TestDebug/TestResult-Mono.Android_Tests.xml
 | /storage/emulated/0/Android/data/Mono.Android_Tests/files/Documents/TestResults.NUnit.xml: 1 file pulled, 0 skipped. 27.7 MB/s (223350 bytes in 0.008s)
Processing timing results
   Results path: …/xamarin-android/TestResult-Mono.Android_Tests-times.csv
   Definitions path: …/xamarin-android/build-tools/scripts/TimingDefinitions.txt
Renaming test cases for 'Mono.Android': instrumentation 'xamarin.android.runtimetests.NUnitInstrumentation'
File fixed up: …/xamarin-android/TestResult-Mono.Android_Tests-Debug.xml
Running global shutdown steps for suite kind 'APK, family 'APK'

Suite execution times:
  • Mono_Android (APK): 00:00:27.1318713
Test suite succeeded
Main log file: …/xamarin-android/bin/TestDebug/tests-20210115T210001.log
```

`Locating essential tool binaries` isn't helpful. `Tool paths` isn't helpful, and tool invocations will be in the generated log files, so if they are needed, they can be obtained.


```
Running global initialization steps for suite kind 'APK', family 'APK'
 | 29
 | package:/system/priv-app/Shell/Shell.apk
 | List of devices attached
 | 98211FFBA006ND	device
```

I have no idea what this means. Is this *needed* for console output, and not log file output?

```
Building suite 'Mono.Android'
xabuild ""/p:Configuration=Debug"" /v:normal ""/bl:../../bin/BuildDebug/msbuild-20210115T210001-build_test_Mono_Android.binlog"" ""/r"" ""/t:SignAndroidPackage"" ""Mono.Android-Tests.csproj"" 
[MSBuild] running
[MSBuild] log file: bin/TestDebug/tests-20210115T210001.msbuild.build_test_Mono_Android.log

 | Success
```

Yay, success!  All useful!

```
Starting test run for:
  Package: Mono.Android_Tests
  Instrumentation: Mono.Android_Tests/xamarin.android.runtimetests.NUnitInstrumentation
 | INSTRUMENTATION_RESULT: failed=0
 | INSTRUMENTATION_RESULT: filtered=0
 | INSTRUMENTATION_RESULT: inconclusive=0
 | INSTRUMENTATION_RESULT: nunit2-results-path=/storage/emulated/0/Android/data/Mono.Android_Tests/files/Documents/TestResults.NUnit.xml
 | INSTRUMENTATION_RESULT: passed=871
 | INSTRUMENTATION_RESULT: run=873
 | INSTRUMENTATION_RESULT: skipped=2
 | INSTRUMENTATION_RESULT: total=0
 | INSTRUMENTATION_CODE: -1
Logcat output path: /Volumes/Xamarin-Work/xamarin-android/bin/TestDebug/logcat-Debug-Mono.Android_Tests.txt
Test results output path: /Volumes/Xamarin-Work/xamarin-android/bin/TestDebug/TestResult-Mono.Android_Tests.xml
 | /storage/emulated/0/Android/data/Mono.Android_Tests/files/Documents/TestResults.NUnit.xml: 1 file pulled, 0 skipped. 27.7 MB/s (223350 bytes in 0.008s)
```

Notably absent from this section: ""Success"", or any ""clear"" indicator that it was successful, *unless* you *know* that `INSTRUMENTATION_CODE: -1` means ""👍"". An explicit ""Success"" message might be nice here?


```
Processing timing results
   Results path: /Volumes/Xamarin-Work/xamarin-android/TestResult-Mono.Android_Tests-times.csv
   Definitions path: /Volumes/Xamarin-Work/xamarin-android/build-tools/scripts/TimingDefinitions.txt
Renaming test cases for 'Mono.Android': instrumentation 'xamarin.android.runtimetests.NUnitInstrumentation'
File fixed up: /Volumes/Xamarin-Work/xamarin-android/TestResult-Mono.Android_Tests-Debug.xml
Running global shutdown steps for suite kind 'APK, family 'APK'
```

Not sure if it's useful for console output.  `Main log file` contains all the same information and more; perhaps ""Processing timing results"" doesn't *need* to be in the console output?

"
"No. There was a huge discussion that was done before July where we had suggested names, and it died in review. I'm going to resurrect it for discussion in 2017 - https://trello.com/c/cZAT7B4h/314-renaming-mobile-xm-4-5-target-frameworks

But we're going to have to do aliases or something in mmp anyway, since all of the names will be wrong (including mobile)."
"Ahh sorry wrong thread haha, yeah these need to be internal my bad :D"
"Whitespace (and wrong too, spaces instead of tabs) noise."
"This is wrong, you're passing `owns=false` to the `CGPath` constructor: https://github.com/xamarin/xamarin-macios/blob/caa1e702a9a0bf7e19054aa4c48d0a96aa471979/src/CoreGraphics/CGPath.cs#L105

Which means our `CGPath` binding will retain the handle: https://github.com/xamarin/xamarin-macios/blob/caa1e702a9a0bf7e19054aa4c48d0a96aa471979/src/CoreGraphics/CGPath.cs#L107-L108

The problem is that `CGPathCreateMutableCopy` already returns a retained handle (Apple's documentation states `You are responsible for releasing this object` [[1]])

The end result is that now we'll leak the returned CGPath.

The correct behavior would be to pass `owns: true`.

[1]: https://developer.apple.com/documentation/coregraphics/1411196-cgpathcreatemutablecopy?language=objc
  "
actually logic is wrong (it's not a `Skip` API) and it works. Updating PR
"ooh, I don't have a test for multiple generics and it's likely broken. Let me add that... Likely wrong here. 

I don't love regex either. Thinking of a better way but this seemed the simplest so far. As it gets more complex it might be better to hand write"
- [x] find out what portion in else block is wrong
"This is wrong, but also I spoke to David Barbet and can do telemetry in a way that makes querying it easier, so there will be another update"
can you clarify how it will be wrong?
"Right, the docs were already wrong on this. Let me refine this."
"Found another issue with my own PR. Building in debug (how could I have missed that before?) seems to fail :

```
  Undefined symbols for architecture arm64:
    ""_xamarin_dyn_objc_msgSendSuper_stret"", referenced from:
       -u command line option
    ""_xamarin_dyn_objc_msgSend_stret"", referenced from:
       -u command line option
    ""_xamarin_dyn_objc_msgSendSuper"", referenced from:
       -u command line option
    ""_xamarin_dyn_objc_msgSend"", referenced from:
       -u command line option
  ld: symbol(s) not found for architecture arm64
```

This is caused by this code in Target.cs :

```
				if (App.Platform == ApplePlatform.MacOSX) {
					has_dyn_msgSend = App.MarshalObjectiveCExceptions != MarshalObjectiveCExceptionMode.Disable && !App.RequiresPInvokeWrappers && Is64Build;
				} else {
					has_dyn_msgSend = App.IsSimulatorBuild;
				}

				if (has_dyn_msgSend) {
					dynamic_symbols.AddFunction (""xamarin_dyn_objc_msgSend"");
					dynamic_symbols.AddFunction (""xamarin_dyn_objc_msgSendSuper"");
					dynamic_symbols.AddFunction (""xamarin_dyn_objc_msgSend_stret"");
					dynamic_symbols.AddFunction (""xamarin_dyn_objc_msgSendSuper_stret"");
				}
```

Those functions are only defined for i386/x86_64. For arm64, the variation without `xamarin_dyn` are also defined. However, we hit a bit of a bind here in the definition of this because it's both required (for the x64 build) and not available (in the arm64 build). From what I understand, on arm64, we don't actually need those functions for things to work, so if I'm not wrong, we should probably refactor the symbol requirement per targeted architectures (so that we pass those symbols when building for x86_64, but not when building for arm64)."
"This looks wrong.

This test file is wrong.

`class C { set X(...v) {} }`, which this file is testing, is invalid syntax. `set` methods, on either classes or objects, only accept exactly one valid `FormalParameter`, which does _not_ allow for `FunctionRestParameter`.

See https://tc39.github.io/ecma262/#prod-PropertySetParameterList"
"Sorry, this was me signed into the wrong account.
"
You need to have this message in the resources and not hardcoding it. What was wrong in the original message? It is unlikely now to throw this exception anyway.  #Closed
"can y ou make this to just throw when wrong bool is given?
"
"Much later: I was wrong. It is called when `node` is a QuestionQuestionToken and `node.parent` is a LogicalAssignmentExpression. From the new test, when node is `x` in `d ??= x ?? ""string""`, and `node.parent` is `??=`.

I guess the deleted line was added because `??=` is a logical expression...but it's also an assignment expression."
"This error seems to be wrong, since `Bar` is `Foo` and thus it has the `#m` property."
"This seems wrong.  The _statement_ of the 'with' block should not be checked, but the _expression_ of the with block should still be checked.  Yes?
"
"> The problem is that the intrinsics doesn't exist for a type of byte since you can't narrow that any further. So using the return type here is wrong.

Are there any issues with encoding the instruction based on the return type, rather than the input type? Is the input type size needed for importation or codegen elsewhere?"
"> So i strongly follow the opinion that exceptions should be exceptional. 

It would indeed be exceptional if the compiler passed us tokens of an unexpected syntax. 

> They should indicate bugs in our code. i.e. if we're just processing data we can't make certain assurances about, that shouldn't be an exception, that should be 'TryXXX'.

Yes, it would be a bug in the IDE code that we are not handling some kind of new token syntax or a bug in the compiler that they are producing some kind of bad tokens. In both cases it's our code!

> That way, when we're wrong about an invariant, things legit crash (possibly caught by a boundary exception layer), and we can get info in a non-crashing way for things we're uncertain about.

OK, now I'm confused. Isn't that what I'm saying?


"
"Something has gone wrong here.
"
"Oh, then was it wrong to do it here? https://github.com/Microsoft/TypeScript/blob/master/src/compiler/checker.ts#L410
"
"@github In https://github.com/dotnet/roslyn/blob/master/src/Analyzers/VisualBasic/Tests/NamingStyles/NamingStylesTests.vb, all VB tests contain a PascalCase module. Not sure what's wrong. Also, I'm not sure how to continue with explicitly supporting ""Module"" in editorconfig."
"@github I'm still having difficulty debugging the unittests, but I've fixed them so that they run correctly from a copy of VS, as well as fixing the issues that popped up when run in that mode. (The ExplictLayoutSize test was wrong, and the TestMethodLookup test was not specifying the correct signature."
"> I don't know what this means, but I guess I might need to try again to add the project from Visual Studio.

It just means that the GUID used in the SLN file is incorrect. The line which declares the project , and likely the subsetquent consupmions, use the wrong GUID. "
"Looks like control-flow is wrong as well:

##### Case 1

![image](https://user-images.githubusercontent.com/3902892/97092011-26611700-15f5-11eb-9e63-964dcd5762d0.png)

`y` should be `0` because the default is evaluated before the computed property name. 

##### Case 2
![image](https://user-images.githubusercontent.com/3902892/97092000-03366780-15f5-11eb-9bb3-5610a1dbf46a.png)

Here `y` should be `9` because the default evaluates first.

##### Cases 3 & 4
We also don't seem to narrow when we know the default *won't* be evaluated:

![image](https://user-images.githubusercontent.com/3902892/97092073-9a032400-15f5-11eb-99ea-f571fd32d2e1.png)
![image](https://user-images.githubusercontent.com/3902892/97092083-c028c400-15f5-11eb-99c1-f9cf4acdae07.png)

In both cases above, `y` should be `8` because the default will never be evaluated due to the fact the outer destructured value is a tuple with a  fixed length.

##### Case 5
![image](https://user-images.githubusercontent.com/3902892/97091961-a63ab180-15f4-11eb-9c02-80a1db93755b.png)

In this case `y` should be `0 | 8` because we don't know the length of the outer destructured array, and `0` should be the constituent instead of `1` because of Case 1 (above).

##### Case 6

![image](https://user-images.githubusercontent.com/3902892/97091977-bbafdb80-15f4-11eb-97d0-bbfcb922b011.png)

This case should probably be considered correct. `y` should be `0 | 8` because we don't know the length of the outer destructured array.
"
"Sorry to bother you @github, I just created a similar PR as #40906 but with all the options I found on MDN page.  
Could you tell me what would be wrong with this fix please? _(First PR in TypeScript)_"
"Tagging subscribers to this area: @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Moving Microsoft.NETCore.Platforms and Microsoft.NETCore.Targets  to csproj so that we can directly add project references to these csprojs. 
This will also correct the assets.json file which is currently missing this dependencies or contains the wrong version.
This will further help in pack task in calculating dependencies. Currently this is done on the dynamically in a target.
We can utilize this to use the live version of these projects in the installer as well.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>Anipik</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-libraries`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> I'm not thrilled with summarily setting inlinee counts to zero if the call site count is zero, but for now it's the best we can do

I guess it means if the profile for callsite's block is wrong - we're also losing usefull profile of the inlinee?"
"> The x86 failure looks like a bug exposed by this change, it is probably not caused by this. We should open an issue about it/disable the test in this PR and merge it before the feature complete.

actually, I was wrong, it is the issue in this change because one `size>0` condition was dropped, so now we are failing with assert on such tree:
```
                                                              /--*  t36    int
Generating: N083 (  3,  2) [000107] -c-X---N----       t107 = *  IND       struct REG NA <l:$441, c:$440>
Generating: N085 (  1,  1) [000035] ------------        t35 =    LCL_VAR   int    V04 loc3         u:2 ecx REG ecx $3c0
                                                              /--*  t35    int
                                                              +--*  t107   struct
Generating: N087 (  3,  2) [000106] -A-X--------              *  STORE_BLK struct<0> (copy) (Unroll) REG NA $189
```

sounds like we should have deleted that tree during importation:
```
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldarg.1
    [ 2]   2 (0x002) ldarg.2
    [ 3]   3 (0x003) unaligned. 1cpblk

               [000108] -A----------              *  ASG       struct (copy)
               [000106] -------N----              +--*  BLK       struct<0>
               [000035] ------------              |  \--*  LCL_VAR   int    V04 loc3         
               [000107] -------N----              \--*  IND       struct
               [000036] ------------                 \--*  LCL_VAR   int    V05 loc4 
```
but we did not, maybe because it has to throw when the address is null?
"
"@github by my accounting this fixes all the test cases you sent me except for these 3:

```
11656046881568048475.cs
2692166044414030864.cs 
11738605779775786426.cs (hits jit assert)
```
The first two look like cases that should be handled by my fixes, so I will need to dig into them to see what is going wrong. In both cases the write/read sequence happens after a nested loop."
"Sorry for my delay, I decided to rewrite the 256 bit spilling and made some improvements for the scalar loop.
Here's a gist of a much bigger bechmark suite: https://gist.github.com/yesmey/2e7a7868bb10043553b78d77cbc3f2b8 taken from the same benchmark as the top post in issue 38001

(note: am I running the benchmarks wrong? not sure why it would pick my branch as baseline)

<details>
<summary>benchmark code</summary>

```csharp
public class Benchmarks
{
    private static string _testStr;
    private static System.Text.StringBuilder st;
    private static char[][] _testChar = new char[3][];

    static Benchmarks()
    {
        st = new System.Text.StringBuilder(5_000_000);
        _testChar[0] = new char[1] { ' ' };
        _testChar[1] = new char[2] { ' ', 't' };
        _testChar[2] = new char[3] { ' ', 't', 'f' };
    } 
    
    private static string BuildStr(char c, int stringLength, int sepFreq, char sep)
    {
        for (int i = 0; i < stringLength; i++)
        {
            if (i % sepFreq == 0)
            {
                st.Append(sep);
            }
            else { st.Append(c); }
        }
        string t =  st.ToString();
        st.Clear();
        return t;
    }

    [GlobalSetup]
    public void Init()
    {
        _testStr = BuildStr('a', Size, SepFreq, _testChar[2][SplitCount - 1]);
    }

    [Params(16, 64, 200, 1000, 10000)]
    public int Size { get; set; }
    
    [Params(1, 2, 5, 200)]
    public int SepFreq { get; set; }
    
    [Params(1, 2, 3)]
    public int SplitCount { get; set; }
    
    [Benchmark]
    public string[] Split()
    {
        return _testStr.Split(_testChar[SplitCount - 1]);
    }
}
```

</details>

Updated numbers from previous benchmarks:

<details>
<summary>csv + dotnet/performance</summary>

``` ini

BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19042.1526 (20H2/October2020Update)
AMD Ryzen 7 3700X, 1 CPU, 16 logical and 8 physical cores
.NET SDK=7.0.100-preview.2.22108.4
  [Host]     : .NET 7.0.0 (7.0.22.10302), X64 RyuJIT
  Job-AJDBJE : .NET 7.0.0 (42.42.42.42424), X64 RyuJIT
  Job-XTZHCY : .NET 7.0.0 (42.42.42.42424), X64 RyuJIT


```
|   Method |        Job |                                                                                                          Toolchain |            CorpusUri |       Mean |     Error |    StdDev | Ratio | RatioSD |
|--------- |----------- |------------------------------------------------------------------------------------------------------------------- |--------------------- |-----------:|----------:|----------:|------:|--------:|
| **SplitCsv** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** |  **http(...).csv [107]** |  **11.493 μs** | **0.1911 μs** | **0.1787 μs** |  **1.19** |    **0.02** |
| SplitCsv | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe |  http(...).csv [107] |   9.631 μs | 0.1624 μs | 0.1519 μs |  1.00 |    0.00 |
|          |            |                                                                                                                    |                      |            |           |           |       |         |
| **SplitCsv** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **https(...)e.csv [50]** |  **60.477 μs** | **0.2351 μs** | **0.2200 μs** |  **0.96** |    **0.01** |
| SplitCsv | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | https(...)e.csv [50] |  62.927 μs | 0.9685 μs | 1.5078 μs |  1.00 |    0.00 |
|          |            |                                                                                                                    |                      |            |           |           |       |         |
| **SplitCsv** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **https(...)A.csv [77]** | **343.339 μs** | **3.5451 μs** | **3.3161 μs** |  **1.19** |    **0.01** |
| SplitCsv | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | https(...)A.csv [77] | 287.859 μs | 2.7981 μs | 2.6174 μs |  1.00 |    0.00 |


``` ini

BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19042.1526 (20H2/October2020Update)
AMD Ryzen 7 3700X, 1 CPU, 16 logical and 8 physical cores
.NET SDK=7.0.100-preview.2.22108.4
  [Host]     : .NET 7.0.0 (7.0.22.10302), X64 RyuJIT
  Job-AJDBJE : .NET 7.0.0 (42.42.42.42424), X64 RyuJIT
  Job-XTZHCY : .NET 7.0.0 (42.42.42.42424), X64 RyuJIT


```
|    Method |        Job |                                                                                                          Toolchain |                    s | chr |     arr |            options |      Mean |    Error |    StdDev | Ratio | RatioSD |
|---------- |----------- |------------------------------------------------------------------------------------------------------------------- |--------------------- |---- |-------- |------------------- |----------:|---------:|----------:|------:|--------:|
| **SplitChar** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **A B C(...)X Y Z [51]** |   ** ** |       **?** |                  **?** | **312.40 ns** | **3.786 ns** |  **3.541 ns** |  **1.08** |    **0.11** |
| SplitChar | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | A B C(...)X Y Z [51] |     |       ? |                  ? | 284.75 ns | 8.865 ns | 26.139 ns |  1.00 |    0.00 |
|           |            |                                                                                                                    |                      |     |         |                    |           |          |           |       |         |
|     **Split** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **A B C(...)X Y Z [51]** |   **?** | **Char[1]** |               **None** | **292.72 ns** | **2.842 ns** |  **2.519 ns** |  **1.17** |    **0.02** |
|     Split | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | A B C(...)X Y Z [51] |   ? | Char[1] |               None | 251.01 ns | 4.483 ns |  3.974 ns |  1.00 |    0.00 |
|           |            |                                                                                                                    |                      |     |         |                    |           |          |           |       |         |
|     **Split** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **A B C(...)X Y Z [51]** |   **?** | **Char[1]** | **RemoveEmptyEntries** | **368.19 ns** | **5.179 ns** |  **4.591 ns** |  **1.09** |    **0.02** |
|     Split | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | A B C(...)X Y Z [51] |   ? | Char[1] | RemoveEmptyEntries | 337.88 ns | 0.900 ns |  0.841 ns |  1.00 |    0.00 |
|           |            |                                                                                                                    |                      |     |         |                    |           |          |           |       |         |
| **SplitChar** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **ABCDE(...)VWXYZ [26]** |   ** ** |       **?** |                  **?** |  **19.20 ns** | **0.035 ns** |  **0.032 ns** |  **0.76** |    **0.00** |
| SplitChar | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | ABCDE(...)VWXYZ [26] |     |       ? |                  ? |  25.16 ns | 0.044 ns |  0.041 ns |  1.00 |    0.00 |
|           |            |                                                                                                                    |                      |     |         |                    |           |          |           |       |         |
|     **Split** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **ABCDE(...)VWXYZ [26]** |   **?** | **Char[1]** |               **None** |  **18.71 ns** | **0.028 ns** |  **0.025 ns** |  **0.63** |    **0.00** |
|     Split | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | ABCDE(...)VWXYZ [26] |   ? | Char[1] |               None |  29.67 ns | 0.052 ns |  0.046 ns |  1.00 |    0.00 |
|           |            |                                                                                                                    |                      |     |         |                    |           |          |           |       |         |
|     **Split** | **Job-AJDBJE** | **\runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe** | **ABCDE(...)VWXYZ [26]** |   **?** | **Char[1]** | **RemoveEmptyEntries** |  **17.71 ns** | **0.026 ns** |  **0.024 ns** |  **0.55** |    **0.00** |
|     Split | Job-XTZHCY |   \yesmey_runtime\artifacts\bin\testhost\net7.0-windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\CoreRun.exe | ABCDE(...)VWXYZ [26] |   ? | Char[1] | RemoveEmptyEntries |  32.04 ns | 0.050 ns |  0.045 ns |  1.00 |    0.00 |

</details>

There seems to be regressions on the strings with no split chars in them"
"@github , probably, I'm wrong but ECMA-335 says
> A conforming CLI shall guarantee that read and write access to properly aligned memory
locations no larger than the native word size

Dissasembly of the code confirming my assumption (see linked discussion)."
"Several of bindhandle tests failing in jit-experimental. Can't repro locally so far
```
      BindHandle call succeeded
      Got wrong error: System.ApplicationException: Error in the application.
         at System.Threading.PortableThreadPool.RegisterForIOCompletionNotifications(IntPtr handle)
         at System.Threading.ThreadPool.BindHandle(SafeHandle osHandle)
         at BindHandle1.RunTest()
```
There is a concurrent run in main going on right now, will see if it hits those as well."
"@github PTAL
cc @github/jit-contrib 

~~No diffs from this~~. I have an SPMI repro case from libraries-pgo which this fixes. Will work on turning that into a test case.

(realized I was running diffs on the wrong build, let me re-run).

Handful of diffs

6 total methods with Code Size differences (0 improved, 6 regressed), 5 unchanged.
5 total methods with Code Size differences (3 improved, 2 regressed), 8 unchanged.
3 total methods with Code Size differences (2 improved, 1 regressed), 2 unchanged.
5 total methods with Code Size differences (3 improved, 2 regressed), 8 unchanged.
9 total methods with Code Size differences (0 improved, 9 regressed), 19 unchanged.
5 total methods with Code Size differences (4 improved, 1 regressed), 7 unchanged.

including the probematic method

          14 ( 3.12% of base) : 7688.dasm - System.Linq.Expressions.Compiler.LambdaCompiler:AddReturnLabel(System.Linq.Expressions.LambdaExpression):this"
"Overall I like it, because many times I've referenced the wrong builder in nested cases and wasted time figuring out why my middleware didn't do the right thing."
Interesting. I think something deeper is wrong in this case. Any chance you have an MSBuild binlog of a build like this? Even a build that didn't fail due to the race would be instructive.
"I pushed up another commit using the path for stackalloc + SkipLocalsInit. This included enabling the `<AllowUnsafeBlocks>` flag in `Microsoft.AspNetCore.SignalR.Client.Core.csproj`.

@github a couple of things:
* Do you think it is worthwhile to investigate conditionally allocating the list based on streaming arguments?
* I spun up an Azure B4ms VM (4 vCPUs, 16GiB RAM, Debian 10.7), ran the benchmarks and the results for `Update` vs. `With256` were pretty consistent.
* I also ran [some small tests](https://gist.github.com/joncloud/0f4934def0c1c292eccdb877d66c44ab), which tested my initialization vs. `Span<T>.Clear()` and it appears that in this situation the `else` block may be more efficient. Though that said, I may have something implemented wrong.

Let me know if there is anything else I can do."
We had tests that unfortunately tested the wrong behavior. I have updated the tests.
"Can you just [enable this in IIS](https://docs.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/#configuration) and see what it does? The [spec](https://www.w3.org/TR/WD-logfile.html) says the `uri-query` is a ""Query portion alone of URI, field has type \<uri\>"". I assume they just want `request.QueryString`.

We should make sure the logs this middleware produces is a close to IIS's W3C logs as possible unless we know IIS is doing something wrong."
Wait what?  This seems wrong.
Ah it looks like I did merge the wrong commit. Woops bad scripting.
"> https://dev.azure.com/dnceng/internal/_build/results?buildId=1582912&view=results

This will probably also fail, because I think you need to take the /s out (/s is needed for the sdl-tsa-vars.config file because of where Validate-DotNet clones repos, but will be wrong here, I think)"
"That was the same comment Julien had but every attempt to change it caused an existing test to fail. I has to do with how the errors for the new code are handled. In the original code if there were scanner issues False was returned and there was a single error message that listed all the ways your code might be wrong but it was not specific. Here if we are in the new code we never return an errors to a higher level to deal with. We parse the code, decide that we are in new code and then if we find an error we add the diagnostic with specific new message about what is wrong. This has the advantage that we didn't have to retest everything (it was @github  idea)."
"Skipping tests risks that we forget unskipping. 
The comment is there to clarify that the expectation is ""wrong"". #Resolved"
"Discussed offline: yes, this is gonig the wrong way but implicitly relying that the C# buffer is also a projection of an HTML buffer. I've asked @github to just have this SpanMapper take a IProjectionBuffer for the surface, have us map up to that, and simplify all of this."
"it's worth commenting that this is a weak heuristic and will be wrong for implicit interface implementations across symbols.  We should comment when we're aware that something isn't relaly correct, but which we hope is good enogh.  it helps explain to the maintainer the difference between intentional and mistaken feature deficiencies. #Resolved"
"@github and I plan to look over this today and see where I went wrong. My point was that it shouldn't block this checkin, since the code before had similar behavior. I'll do what I can to do the right thing though. "
"Ok.  Just wrote out the table and convinced myself you are correct.  :D   So, as long as you odn't see any crazy behavior where this is actually causing 5 second slowdowns, then i'm good."
"I seem t o recall there was a reason for doing a syntax check, but I could be wrong.
Looking at `VisitForEachStatement`, I see it does a syntax check. But `VisitUsingStatement` does a check on `.AwaitOpt`...

Note: when you merge recent bits from master into this branch, you'll need to add a check for `AwaitUsingAddsPendingBranch` (which has since been renamed `AwaitUsingAndForeachAddsPendingBranch`). I don't remember the scenario to hit this though.
Here's the relevant PR: https://github.com/dotnet/roslyn/pull/31527

---
In reply to: [243702724](https://github.com/dotnet/roslyn/pull/31980#discussion_r243702724) [](ancestors = 243702724)"
"> I get that it is confusing for you. not sure what I can do when you are confusing. if you know 2 are same thing. what confuse you? are you saying just do context.cancellation? if that's what you want, just say, hwo about just put ""context.UserCancellationToken"" since scope.context and context here is same thing?

> if you know 2 are same thing. what confuse you? 

You are referencing what should be the same thing through entirely different paths of poperties/expressions.  That is fundamentally confusing.  It makes the code harder to read and understand.

The person reading the code now has to go: wait... i thought these wer ethe same... are they not?  Why is the code referencing it in different ways.

And, because there is no comment, one now has to go: ""is this intentional?  would it be subtly wrong if to switch one to use the same expression as the other?""

This sort of coding is brittle and leads to difficulty with maintaining things.  it should be avoided, especially around exceptionally subtle stuff like cancellation/threading.
"
"having inheritance, and a 'kind' enum makes me feel that something is wrong about thsi design.  If we're using inheritance, i would expect that 'Operation' woudl be unneeded, and all specific behavior to Comment/Uncomment or 'Toggle' would be in teh respective subclasses."
i'm dumb.  ignore me.
"I had a temporary API change at one point, and the ref generator picked up this change along with it. Kept it as it fixes an inconsistency.

These are [documented APIs](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.headers.namevaluewithparametersheadervalue.-ctor?view=netcore-3.1) but were not in the ref. Was documentation wrong?"
"When the legacy overload that didn't specify applicableToSpan is used. We could've gone with providing either `default` or user span but the first option is just wrong and the second one makes all ""legacy"" refactorings automatically the closest. And that also didn't feel right.

There's a whole discussion about that on the PR this one is based on. #37777"
"The reason why I changed this was because this will run twice and the second time it runs it will overwrite the .zip with the wrong .zip.

The reason for that is because we have an inner and outerbuild."
"@github I might be wrong but I believe this won't work in the big picture. Remember that a gridview is a tree of splitviews. In order to fully deserialize a whole gridview in one step, you're very likely going to have to use the deserializer pattern in which a `fromJSON` method is called, even down in the splitview."
"I'm not crazy about the italic styling, to me it doesn't match anything else in vscode"
"@github I added this event on this service so I could detect only when untitled files have changed. Please let me know if this was the wrong change, and I can look for a different way to do this."
"This may be crazy, but is this better written as a `do{}while()`?"
">That seems wrong to me, but if it's already been discussed and resolved then it's okay. Where did the discussion happen? 
I didn't see it in [https://github.com/dotnet/roslyn/pull/44803](https://github.com/dotnet/roslyn/pull/44803)

You are correct, it is quite possible I confused it with this thread [https://github.com/dotnet/roslyn/pull/44803#pullrequestreview-423731255](https://github.com/dotnet/roslyn/pull/44803#pullrequestreview-423731255). In any case, there is a syntax explicitly declaring the constructor - at least the parameter list. There is also other user code in it - base arguments. Likely there will be a body in the future as well. Even today we should fire analyzers actions for the constructor, due to presence of user code. Analyzer driver filters out implicitly declared symbols all over the code. The work to get analyzer actions fired as appropriate is on the books.

---
In reply to: [454547147](https://github.com/dotnet/roslyn/pull/45898#discussion_r454547147) [](ancestors = 454547147,454465241,454451705)"
"There are really 3 options for what to do if a mutating request fails:
1. Throw away the mutations and hope for the best (which is what this code is doing)
2. Apply the mutation and hope for the best
3. Environment.FailFast

I don't have a strong feeling either way really, as I think 1 and 2 both have an equal chance of resulting in a solution state in memory that doesn't match what the user is seeing, but I went with 1 because I am working on the theory that people will be more likely to understand if the server seems to be ""lagging"" the state they're seeing, and try reconnecting or re-opening the document.

Note that the user experience for errors is unchanged in this PR, so they'll still see the yellow bar etc. and know that something went wrong."
I think you have the wrong resource key here
"Hokay, so I _think_ I've got it re-expanding the list of commands each time the list of tabs changes, and I don't think it's noticable. 

I hate it, because it involves having `TerminalPage` _make a copy_ of the commands from `CascadiaSettings`, then expand that copy, every time the list of tabs changes. But on the bright side, `CascadiaSettings` won't need to know anything about the list of tabs when the expansion happens. `CascadiaSettings` would only keep the original blob of commands around, and they'd _need_ to be expanded before the palette could use them. This seems not horrible.

The copying is going to be more annoying when the map of commands isn't just an `unordered_map`. We'd need to be able to clone the original `winrt::...Map` into a new one, then expand the commands using only methods that are exposed by the _projection_. Assuming that we want to have `ExpandCommands` eventually take a list of the current tabs, this means that the projected `ExpandCommands` would either need to:
* be implemented in `Microsoft::Terminal::Settings::Command`, and accept a `TerminalApp::Tabs`. This would be a layering violation. 
  - We could work around this by having our tabs expose something dumb like `Terminal::Settings::ITabInformation` and have `ExpandCommands` accept that instead.
    - this is the solution I'd be _least_ opposed to
* be implemented in `TerminalApp`, but then we wouldn't be able to inspect the implementation details of `Command`, which means we wouldn't be able to easily access the original json used for the command (which we need to be able to expand the command).
  - we could do something extra dumb like exposing the original json as a projected method on `Command`, but that's definitely silly

So I've pushed just this change to [`dev/migrie/f/6856-let-terminalpage-expandcommands`](https://github.com/microsoft/terminal/compare/dev/migrie/f/command-palette-iterateOn...dev/migrie/f/6856-let-terminalpage-expandcommands?expand=1). This doesn't have the madness above included, obviously. We can keep it if people agree it's good"
">DisallowNull [](start = 9, length = 12)

I am now wondering what DisallowNull will do? does it will prevent the setter from using null values? if so then this will be wrong."
"> This seems wrong, please explain those changes 

I misunderstood how the code was working. I initially thought that the implementation for adding a new view col was expecting non zero based indexing as explained in the docs. https://code.visualstudio.com/api/references/vscode-api#ViewColumn 

My changes fixed the issue but I can see from the failed integration testing and comments that this isn't the right solution. I will convert this pr into a draft and attempt this again."
"@github has mentioned in the past that the latest Textmate grammars are scraped roughly once a month, so—correct me if I'm wrong, Alex—I believe no action is needed to get the upstream changes from Rust Syntax merged.  In the interim, you can use the Rust Syntax extension, which should play nicely with Rust Analyzer now that RA is not shipping a grammar. The Textmate scopes will only be visible with `""[rust]"": { ""editor.semanticHighlighting.enabled"": false }` in your `settings.json`, otherwise RA will override with semantic scopes.

Regarding #64488, I think it should probably be closed at this point. The grammar still needs minor improvements—which I am working on—but the essence of the issue has been fixed. In truth, most serious Rustaceans are using semantic highlighting via Rust Analyzer, but the current grammar provides reasonable default VS Code highlighting."
"After looking at it for a while, I think it's not worth it. We calculate the minimum size of each pane (and snap it to the text buffer grid) using pixels. We could probably rewrite all of that to just create a ratio. But that's risky and not really worth it.

Also, I could be wrong about this, but I'd imagine it's not a huge perf impact anyways."
"I'm slightly concerned about this, because synthesized code can contain explicit conversions, and NullableWalker can take such conversions and try to re-classify them, passing its `ExplicitCastInCode` value to `ClassifyConversion`'s `forCast` argument (indirectly). Then Conversions will say that the conversion doesn't exist. Wrong information could be propagated out, or unwanted diagnostics given. See #51631.

Basically, it's a rather small corner case, but I think if `ExplicitCastInCode` *requires* that a cast is present in user syntax, we may want a follow up item to make sure the NullableWalker avoids using it as an argument to `NullableWalker.GenerateConversion`, and to make sure that synthesized code never passes a 'true' value for this flag. Possibly with `Debug.Assert(!(WasCompilerGenerated && ExplicitCastInCode))` when creating a BoundConversion or something like that.
 #Closed"
"Yep, which is not wrong because the library is not supported on ""Unix"". I'll open another issue if you don't want to mix the fix with this change"
You want to use `NSUserInterfaceCompression` instead or generator will pick the wrong interface.
"I get the why :) but I'm fairly sure it will cause confusion (because we'll forget) when people set the wrong one. Considering `xibuild` is a smaller wrapper I'm not sure how much value we get (now) versus the future confusion.

As for the different syntax it would be easy to have `xibuild` accept both (so the one for `msbuild` would be usable/shareable)."
"@github good question :)

They are very common but _usually_ `bgen` (the binding generator) generates them for you (on every ObjC bindings), e.g. look into generated `src/build/ios/native/AVAsset.g.cs` and you see many lines like this one:

```csharp
[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
```

This tells other tools (like the managed linker) that it was generated code (so we know how it looks in IL) and that it is safe to be optimized.

Some C-based API (like this one) are using _ObjC_ blocks (not C-function-based) callbacks (which are much easier to bind). Those API are bound manually (not using `bgen`) but `mtouch` still knows how to optimize them (because that block logic is identical with ObjC ones). In such case we _hint_ our tools that the code can be optimized by adding the attribute manually (obviously we don't pretend it's `GeneratedCode`, just `Optimizable`).

Finally our test suite do run tests with optimization enabled (so it's tested under both normal and optimized paths) and also detect if we have code that linker cannot remove (because some code lack the attribute to optimize them). IOW it's hard to get wrong and forget them :)"
"We don't.. but it is an error in the current implementation, and the [current proposal](https://github.com/dotnet/csharplang/blob/3a6c79012a8c53fe84330c09080105ac177ff93d/proposals/null-arg-checking.md) doesn't mention it.

It seems not-wrong to me to support pointers with the feature. We did after all even make `ptr is null` legal at some point. Perhaps an email to LDT would be reasonable and it's more motivation to restore the ""non-helper"" code path.
"
"Wrong comment, removing, is not supported on tvOS."
"This ""worked"" but was technically wrong - the padding amount is always based on the feedback size. However, since the only other feedback size supported other than CFB8 was block-size CFB, (CFB64 for 3DES and CFB128 for AES) it all worked anyway. This just does it ""right"" without changing the behavior."
"This is going to throw an exception. It is assuming that in file is present, which if it is not will result in an ugly exception given to the user:
```
File name: '/Users/mandel/Xamarin/xamarin-macios/xamarin-macios/tools/nnyeah/wrong.txt'
   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)
   at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)
   at nnyeah.Program.Main(String[] args) in /Users/mandel/Xamarin/xamarin-macios/xamarin-macios/tools/nnyeah/nnyeah/Program.cs:line 35
```"
🤷‍♂️ it seems like the subsequent assertion will reveal if the assumption is ever wrong
"Nevermind, I saw wrong."
"@github In tests I get a error here (`Fatal error. 0xC0000005`). I think a segfault or so...

Do you know if here is something wrong with the implementation?
```cpp
BOOL GetFileInformationByHandle(
  [in]  HANDLE                       hFile,
  [out] LPBY_HANDLE_FILE_INFORMATION lpFileInformation
);
```

https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfileinformationbyhandle
"
Maybe DotNetExports is the wrong name for this if 'createDotnetRuntime' is the only public export from dotnet.js? If the parameter name is 'api' maybe it's DotNetPublicAPI or something
"Using sequential layout turned out to be the easiest way to enforce that enum types get the right alignment (with auto layout, 8-byte enums were getting the wrong alignment on x86)"
"The combinations of the testcases are really good. It would be nice if the asserts fall into its own testcase. This way, when something fails, there is just one scenario that is at fault and we dont want to be looking at which assert, among the 4, that failed the whole testcase.

Also a different name instead of `expected00` would be more readable. In this case, it would be something like `expectedWithNoSpaceBeforeCommaAndAfterComma`. When this particular assert fails, the user will automatically know what the expectation is instead of trying to understand the naming convention and finding out what went wrong. Descriptive variable names are always preferred over cryptic names
"
"IMO, it makes sense to put the error where the code is likely wrong. In this case, the code is wrong to attempt to call or construct the thing, but that might be because it's the wrong thing (not because the calling or constructing of the thing is wrong); so we don't really know if the issue is because the import is wrong or because the usage is wrong, but we'd like to provide some hints as to how to fix it in either case."
"It's possible that there are multiple symlinks to the same module, although it's not technically *wrong* to use one or the other since it works either way; we could iterate over all known symlinks though and take the best, would that be better?"
"> btw. this looks wrong in the existing native/libs code since we use cmakedefine01 for it too: 

Yes, we should fix that too."
"Here's how far I got:
```ts
export function areCompilerOptionsEqual(option: CommandLineOption, a: unknown, b: unknown) {
    switch (option.type) {
        case ""boolean"":
        case ""number"":
        case ""string"":
            return a === b;
        case ""list"":
            return arraysEqual(a as unknown[], b as unknown[], (aa, bb) => areCompilerOptionsEqual((option as CommandLineOptionOfListType).element, aa, bb));
        case ""object"":
            return equalOwnProperties(a as MapLike<unknown>, b as MapLike<unknown>, isJsonEqual);
        default:
            something with maps;
    }
}
```
Doesn't seem worth it since I need to call `isJsonEqual` in the nested case anyway, and I need some casts which might not be valid if someone put a wrong value in their tsconfig."
"I don't think this is right - checking is `any` prop in the indexed access's type is optional and then returning `never` for its type if so seems very wrong - the potential type of the LHS is completely lost here, and it loses the nuance of the individual property accessed. This needs #29317 to be correctly solved - the LHS type should be `leftType & not 0 & not null & not undefined & not """"`, which handles generics appropriately."
"Or, let me ask a more specific question about `permissiveMapper` and the error scenarios you mentioned—what would be the consequences of, rather than early returning the input `type`, just proceeding to return the reverse mapped type with an instantiated source, but with `mappedType` and `constraintType` simply copied:

```ts
function instantiateReverseMappedType(type: ReverseMappedType, mapper: TypeMapper) {
     return inferTypeForHomomorphicMappedType(
         instantiateType(type.source, mapper),
         type.mappedType,
         type.constraintType
     ) || type;
}
```

I think this would have been my instinct, and I don’t understand what would go wrong, in what cases."
"@github thanks for this..I missed it. @github owns this area perhaps he can review it. It looks like your change matches what I suggests.

Btw if MSDN docs are wrong perhaps you could offer a PR for that in their repo? "
"@github/roslyn-compiler I need some help with this PR.  I've made a change on the IDE side to call some public methods on a Compilation after we create it.  Specifically: `compilation.Assembly` and `compilation.GetAssemblyOrModule(ref)` here: https://github.com/dotnet/roslyn/pull/43207/files#diff-a49d90e995e113586d4d5701395914d2R118

However, these calls now cause a *crash* *inside* the compiler during some integration tests.  Specifically, i get a crash here:

<details>

```
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.CodeAnalysis.CSharp.Imports.ExpandPreviousSubmissionNamespace(NamespaceSymbol originalNamespace, NamespaceSymbol expandedGlobalNamespace)
   at Microsoft.CodeAnalysis.CSharp.Imports.ExpandPreviousSubmissionImports(Imports previousSubmissionImports, CSharpCompilation newSubmission)
   at Microsoft.CodeAnalysis.CSharp.Imports.FromGlobalUsings(CSharpCompilation compilation)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.BindGlobalImports()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at System.Lazy`1.get_Value()
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEvents(AnalysisScope analysisScope, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerDiagnosticsAsync>d__55.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
```

</details>

The specific crash is here:

```
            var expandedNamespace = expandedGlobalNamespace;
            for (int i = nameParts.Count - 1; i >= 0; i--)
            {
                // Note, the name may have become ambiguous (e.g. if a type with the same name
                // is now in scope), but we're not rebinding - we're just expanding to the
                // current contents of the same namespace.
                expandedNamespace = expandedNamespace.GetMembers(nameParts[i]).OfType<NamespaceSymbol>().Single();
            }
```

Which is because `GetMembers(""System"")` returns zero items.

I've only been able to get this to crash in integreation tests like CSharpInteractive.BclConsoleCall.  I've really tried spelunking into the code here, but it all relates to things in the ReferenceManager and involve deep state manipulation in the core compilaiton/assembly that i really don't understand.  

Because this is repro'ing in interactive scenarios, my guess is that something in the compiler responsible for setting up symbols with submission-compilations is going wrong, and ends up with invalid internal state.  Unfortunately there are just so many parts to this in that layer that i have no idea what the actual problem is or where it starts from.

I would very much appreciate if i could get help with someone knowledgeable here about what is going wrong in the compiler that is causing a crash.  @github @github/roslyn-compiler who is a good source for info on Assembly-symbols, ReferenceManager and interactive?  Thanks!
"
"Yep, I got it backwards. `never` is wrong.

We're trying to prevent both reads and writes of the variable since it's only there so Closure can have a name for the associated type alias. I think an error on value-space usage of the variable is better than changing the type, plus suppression of the implicit any error."
"I'm not sure if there's a single bug for razor. The fix is to unify the design time and build time experiences, until they do that they need to be able to compare in the way that they're doing to achieve any sort of perf.

Agree we shouldn't encourage it, but my point was with this approach a broken comparer produces correct code slowly, rather than wrong code quickly. "
"I've added tests, but they might be in the wrong place 😅 "
"> it looks the doc is wrong and this parameter is always out parameter

I think that comment is outdated.  The parameter is marked as in/out and it is used when the MUI_ALL_LANGUAGES flag is passed (which we do not pass)."
"> I would expect that conflict resolution would trim out the first pdb in favor of the second as that one comes via the runtime pack.

Conflict resolution doesn't look at ProjectReference output https://github.com/dotnet/sdk/issues/2674.  This is related.  It looks like RAR is the one discovering the PDB:
```
Primary reference ""System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"".
    Resolved file path is ""/__w/1/s/artifacts/bin/System.Runtime.CompilerServices.Unsafe/net6.0-Release/System.Runtime.CompilerServices.Unsafe.dll"".
    Reference found at search path location ""/__w/1/s/artifacts/bin/System.Runtime.CompilerServices.Unsafe/net6.0-Release/System.Runtime.CompilerServices.Unsafe.dll"".
    Found related file ""/__w/1/s/artifacts/bin/System.Runtime.CompilerServices.Unsafe/net6.0-Release/System.Runtime.CompilerServices.Unsafe.pdb"".
    The ImageRuntimeVersion for this reference is """".
```
Then it gets added to `ReferenceCopyLocalPaths` along with the DLL since it comes from a ProjectReference, however `ReferenceCopyLocalPaths` was already conflict resolved by `_HandlePackageFileConflicts` *before* RAR, so it does not remove this .  Later on `_HandlePackageFileConflictsForPublish` runs but for some reason it looks like this isn't considering `ReferenceCopyLocalPaths`.  That seems wrong, since it used to handle this https://github.com/dotnet/sdk/blob/84706598659a625b1ffaaea6665f22f4ce789433/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Publish.targets#L229

The binlog shows the `_ComputeResolvedCopyLocalPublishAssets` target running *after* `_HandlePackageFileConflictsForPublish` and appending to the input to conflict resolution `_ResolvedCopyLocalPublishAssets`.  This is a bug.  Conflict resolution should be seeing all the files that get copied to the output in order to do its job.  I think something is broken in the Target sequencing that is causing `_ComputeResolvedCopyLocalPublishAssets` to run after `_HandlePackageFileConflictsForPublish`, I see the same thing happening in a normal file-new-project-app.  @github 

"
"Ah, well, that was dumb. Hooray unit tests."
"First, a preface: I am by no means experienced with JIT dumps. But I took a stab at looking at a JIT dump of this pattern:

```C#
using System;

Console.WriteLine(new FooImpl().Bar());

interface IMarker {}

public abstract class FooBase {
    public virtual int Bar()
    {
        if (this is IMarker)
        {
            Console.WriteLine(""marker"");
            return 1;
        }
        else
        {
            Console.WriteLine(""no marker"");
            return 1;
        }
    }
}

public sealed class FooImpl : FooBase, IMarker
{
}
```

At least on macOS ARM, I don't see the `this is IMarker` check get elided. It ends up as a helper call to `CORINFO_HELP_ISINSTANCEOFINTERFACE`.

```
IN0001: 00000C                    ldr     x1, [fp,#24]
IN0002: 000010                    movz    x0, #0xa600
IN0003: 000014                    movk    x0, #0x80e9 LSL #16
IN0004: 000018                    movk    x0, #2 LSL #32
IN0005: 00001C                    bl      CORINFO_HELP_ISINSTANCEOFINTERFACE
etc
```

I'm not sure how much we care, but it was a fun exercise.

@github I am marking this as ""ready"", but if we want to go back to overrides because we end up with interface checks, or if we can figure out how my testing was wrong, I am happy to adjust."
"~I can't seem to repro the Mono failure locally~ edit: 🤦  I was running the wrong test. I can repro the Mono failure locally. It looks like there's a SIGABRT when trying to get a wait handle from the GC:
```
=================================================================
Managed Stacktrace:
=================================================================
  at <unknown> <0xffffffff>
  at System.Runtime.InteropServices.GCHandle:InternalGet <0x00079>
  at System.Runtime.InteropServices.GCHandle:get_Target <0x00028>
  at HandleManager:FromHandle <0x00077>
  at System.Threading.WaitSubsystem:SetEvent <0x0001f>
  at System.Threading.EventWaitHandle:Set <0x0005a>
  at System.Diagnostics.Tracing.EventPipeEventDispatcher:StopDispatchTask <0x00042>
  at System.Diagnostics.Tracing.EventPipeEventDispatcher:CommitDispatchConfiguration <0x0008b>
  at System.Diagnostics.Tracing.EventPipeEventDispatcher:SendCommand <0x000dc>
  at System.Diagnostics.Tracing.EventListener:EnableEvents <0x000c2>
  at System.Diagnostics.Tracing.EventListener:EnableEvents <0x00023>
  at Tracing.Tests.SimpleEventListener:OnEventSourceCreated <0x00061>
  at System.Diagnostics.Tracing.EventSource:AddListener <0x00194>
  at <>c:<.ctor>b__10_0 <0x00044>
  at System.Diagnostics.Tracing.EventListener:CallBackForExistingEventSources <0x00268>
  at System.Diagnostics.Tracing.EventListener:.ctor <0x000b3>
  at Tracing.Tests.SimpleEventListener:.ctor <0x0001e>
  at Tracing.Tests.NativeRuntimeEventSourceTest:Main <0x000ab>
  at <Module>:runtime_invoke_int_object <0x00069>
=================================================================
```
<details>
<summary>Details</summary>

```

=================================================================
External Debugger Dump:
=================================================================
[New LWP 20477]
[New LWP 20478]
[New LWP 20479]
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
warning: the debug information found in ""/datadisks/disk1/work/B9570A9B/p/libcoreclr.so.dbg"" does not match ""/datadisks/disk1/work/B9570A9B/p/libcoreclr.so"" (CRC mismatch).

0x00007f27c9e3a32a in __waitpid (pid=20595, stat_loc=0x7fff6d150ec0, options=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30
30../sysdeps/unix/sysv/linux/waitpid.c: No such file or directory.
  Id   Target Id         Frame 
* 1    Thread 0x7f27ca461740 (LWP 20476) ""corerun"" 0x00007f27c9e3a32a in __waitpid (pid=20595, stat_loc=0x7fff6d150ec0, options=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30
  2    Thread 0x7f27c63ff700 (LWP 20477) ""SGen worker"" 0x00007f27c9e35ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x7f27c90c16b8) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
  3    Thread 0x7f27c4871700 (LWP 20478) ""corerun"" 0x00007f27c920cbb9 in __GI___poll (fds=0x7f27c0002d50, nfds=1, timeout=-1) at ../sysdeps/unix/sysv/linux/poll.c:29
  4    Thread 0x7f27c4670700 (LWP 20479) ""Finalizer"" 0x00007f27c9e387c6 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f27c90b2560) at ../sysdeps/unix/sysv/linux/futex-internal.h:205

Thread 4 (Thread 0x7f27c4670700 (LWP 20479)):
#0  0x00007f27c9e387c6 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f27c90b2560) at ../sysdeps/unix/sysv/linux/futex-internal.h:205
#1  do_futex_wait (sem=sem@entry=0x7f27c90b2560, abstime=0x0) at sem_waitcommon.c:111
#2  0x00007f27c9e388b8 in __new_sem_wait_slow (sem=0x7f27c90b2560, abstime=0x0) at sem_waitcommon.c:181
#3  0x00007f27c78e64b6 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#4  0x00007f27c78bf6ea in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#5  0x00007f27c78bf579 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#6  0x00007f27c9e2f6db in start_thread (arg=0x7f27c4670700) at pthread_create.c:463
#7  0x00007f27c921961f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 3 (Thread 0x7f27c4871700 (LWP 20478)):
#0  0x00007f27c920cbb9 in __GI___poll (fds=0x7f27c0002d50, nfds=1, timeout=-1) at ../sysdeps/unix/sysv/linux/poll.c:29
#1  0x00007f27c7b4811a in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#2  0x00007f27c7b45605 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#3  0x00007f27c7b43e69 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#4  0x00007f27c7b47531 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#5  0x00007f27c9e2f6db in start_thread (arg=0x7f27c4871700) at pthread_create.c:463
#6  0x00007f27c921961f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 2 (Thread 0x7f27c63ff700 (LWP 20477)):
#0  0x00007f27c9e35ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x7f27c90c16b8) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
#1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7f27c90c1668, cond=0x7f27c90c1690) at pthread_cond_wait.c:502
#2  __pthread_cond_wait (cond=0x7f27c90c1690, mutex=0x7f27c90c1668) at pthread_cond_wait.c:655
#3  0x00007f27c7969143 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#4  0x00007f27c9e2f6db in start_thread (arg=0x7f27c63ff700) at pthread_create.c:463
#5  0x00007f27c921961f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

Thread 1 (Thread 0x7f27ca461740 (LWP 20476)):
#0  0x00007f27c9e3a32a in __waitpid (pid=20595, stat_loc=0x7fff6d150ec0, options=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30
#1  0x00007f27c7a818b7 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#2  0x00007f27c7a2372e in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#3  0x00007f27c7a81048 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#4  <signal handler called>
#5  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51
#6  0x00007f27c91387f1 in __GI_abort () at abort.c:79
#7  0x00007f27c7afb045 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#8  0x00007f27c79115a3 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#9  0x00007f27c7afb405 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#10 0x00007f27c7afb53e in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#11 0x00007f27c7938c86 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#12 0x00007f27c78c2fda in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#13 0x00007f27c78756d1 in ?? () from /datadisks/disk1/work/B9570A9B/p/libcoreclr.so
#14 0x00000000418eacea in ?? ()
#15 0x000056390eb8c0c8 in ?? ()
#16 0x00007f27c53ff000 in ?? ()
#17 0x0000000000000000 in ?? ()
/datadisks/disk1/work/B9570A9B/w/AA38092D/e/tracing/runtimeeventsource/nativeruntimeeventsource/nativeruntimeeventsource.sh: line 395: 20476 Aborted                 (core dumped) $LAUNCHER $ExePath ""${CLRTestExecutionArguments[@]}""

Return code:      1
Raw output file:      /datadisks/disk1/work/B9570A9B/w/AA38092D/uploads/Reports/tracing.runtimeeventsource/nativeruntimeeventsource/nativeruntimeeventsource.output.txt
Raw output:
BEGIN EXECUTION
/datadisks/disk1/work/B9570A9B/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false nativeruntimeeventsource.dll ''
Why are we accessing an entry that is not allocated

=================================================================
Native Crash Reporting
=================================================================
Got a SIGABRT while executing native code. This usually indicates
a fatal error in the mono runtime or one of the native libraries 
used by your application.
=================================================================

=================================================================
Native stacktrace:
=================================================================
0x7f27c7a81772 - Unknown
0x7f27c7a2372e - Unknown
0x7f27c7a81048 - Unknown
0x7f27c9e3a980 - Unknown
0x7f27c9136e87 - Unknown
0x7f27c91387f1 - Unknown
0x7f27c7afb045 - Unknown
0x7f27c79115a3 - Unknown
0x7f27c7afb405 - Unknown
0x7f27c7afb53e - Unknown
0x7f27c7938c86 - Unknown
0x7f27c78c2fda - Unknown
0x7f27c78756d1 - Unknown
0x418eacea - Unknown

=================================================================
Basic Fault Address Reporting
=================================================================
Memory around native instruction pointer (0x7f27c9136e87):0x7f27c9136e77  d2 4c 89 ce bf 02 00 00 00 b8 0e 00 00 00 0f 05  .L..............
0x7f27c9136e87  48 8b 8c 24 08 01 00 00 64 48 33 0c 25 28 00 00  H..$....dH3.%(..
0x7f27c9136e97  00 44 89 c0 75 1f 48 81 c4 18 01 00 00 c3 0f 1f  .D..u.H.........
0x7f27c9136ea7  00 48 8b 15 b9 bf 3a 00 f7 d8 41 b8 ff ff ff ff  .H....:...A.....

=================================================================
Managed Stacktrace:
=================================================================
  at <unknown> <0xffffffff>
  at System.Runtime.InteropServices.GCHandle:InternalGet <0x00079>
  at System.Runtime.InteropServices.GCHandle:get_Target <0x00028>
  at HandleManager:FromHandle <0x00077>
  at System.Threading.WaitSubsystem:SetEvent <0x0001f>
  at System.Threading.EventWaitHandle:Set <0x0005a>
  at System.Diagnostics.Tracing.EventPipeEventDispatcher:StopDispatchTask <0x00042>
  at System.Diagnostics.Tracing.EventPipeEventDispatcher:CommitDispatchConfiguration <0x0008b>
  at System.Diagnostics.Tracing.EventPipeEventDispatcher:SendCommand <0x000dc>
  at System.Diagnostics.Tracing.EventListener:EnableEvents <0x000c2>
  at System.Diagnostics.Tracing.EventListener:EnableEvents <0x00023>
  at Tracing.Tests.SimpleEventListener:OnEventSourceCreated <0x00061>
  at System.Diagnostics.Tracing.EventSource:AddListener <0x00194>
  at <>c:<.ctor>b__10_0 <0x00044>
  at System.Diagnostics.Tracing.EventListener:CallBackForExistingEventSources <0x00268>
  at System.Diagnostics.Tracing.EventListener:.ctor <0x000b3>
  at Tracing.Tests.SimpleEventListener:.ctor <0x0001e>
  at Tracing.Tests.NativeRuntimeEventSourceTest:Main <0x000ab>
  at <Module>:runtime_invoke_int_object <0x00069>
=================================================================
Expected: 100
Actual: 134
END EXECUTION - FAILED
Test Harness Exitcode is : 1
To run the test:
> set CORE_ROOT=/datadisks/disk1/work/B9570A9B/p
> /datadisks/disk1/work/B9570A9B/w/AA38092D/e/tracing/runtimeeventsource/nativeruntimeeventsource/nativeruntimeeventsource.sh
```

</details>

"
"> Any icalls we change the signature of like these need to have their name changed, because any third party callers (like blazor, uno etc) will crash or corrupt the heap by passing the wrong number of arguments (or reading a return value that isn't there). The convention I selected is a 'Ref' suffix at the end of the name for C#/C methods, and for JS methods either 'ref' (if they take a MonoObjectRef) or 'root' (if they take a WasmRoot)

Thanks! Now I see it in your PR, I should have read it before."
"I guess my reasoning was that if we're trying to load a file, it seems like we should give the developer the option to open it in an external app/browser (i.e., we only load URLs in the view without invoking the `ExternalNavigationStarting` callback if they refer to other pages in the app). I could be making a wrong assumption here so I'm certainly happy to change it."
"I'm having an issue with the command, I'm getting:
> A compatible installed .NET Core SDK for global.json version [5.0.100-preview.7.20330.3] from [c:\aspnetcore\global.json] was not found

Am I doing something wrong? I'm executing `dotnet msbuild /t:GenerateReferenceSource` inside `src/Components/Web/src`."
"I suspect this assertion could be wrong in erroneous code, for example
```cs
foreach (int arr[out int size] in data) {}
```
 #Resolved"
"I tried this at first, but got error. If I'm not wrong the reason is `Connection` is a default interface property and is implicit and here `Response.Headers` type is `HeaderCollection` and not `IHeaderDictionary`."
Is this definitely correct? What was wrong with it before? The previous definition was more specific about the potential for null/undefined which looks more relevant.
"Also note: I'm currently looking for the root cause of this error, as I believe there's something wrong with something in the assumptions in that shared code since as far as I can tell, those 15 retries never help when no worker process is found"
"> @github does this affect discovery in tooling?

Right now, non-public types won't even be recognized as components. See https://github.com/dotnet/aspnetcore/blob/master/src/Razor/Microsoft.CodeAnalysis.Razor/src/ComponentDetectionConventions.cs#L23. 

I don't think tooling checks accessibility modifiers anywhere. If it is present in the serialized json, it should pick it up. Correct me if I am wrong, @github "
"@github should I proactively merge this to unbreak the build, letting @github and @github follow up on the C# change if there's something wrong there❔"
Can you link to that review?  I'm curious waht woudl be wrong with that approach.  Thanks!
"> Updated the test and got it to pass.

What was I doing wrong before?"
"It can throw but only in cases where there is a programming error: called from wrong thread for example. Want those cases to throw vs. swallowing an error here. "
"> It is being used to determine if the two assembly symbols identify the same assembly.

This is wrong, identity cannot answer this question.

---
In reply to: [185161761](https://github.com/dotnet/roslyn/pull/26367#discussion_r185161761) [](ancestors = 185161761)"
">return [](start = 12, length = 6)

This appears to attach the wrong syntax node to the generated bound node. #Resolved"
"> As far as I am aware, there is not an async command handler (correct me if I'm wrong). This method could be async, but I'd just be moving the wait up a method call
1/3 will do.

Yes, tha'ts appropriate.  We try to make it all async underneath, and we do the one final wait all the way up at the actual command handler entrypoint.  Thanks!"
📝 Some changes snuck into the wrong commit here
"The ""runtime-ci"" link seems wrong, it actually goes to the ""old"" coreclr-ci build definition. Based on your below clarification that this is about the PR run, I assume this should rather be runtime-coreclr i.e. <code>definitionId=649</code>. Either that or just point out in the doc that this is currently in flux and needs updating once things settle down."
"I thought about discarding them but it _feels wrong_. You don't want to discard the disposer, you want to be explicitly aware of it's existence. 

That's just a personal opinion, however. "
"If this fails, the socket will be in a bad state. I'd rather we just let it throw.

That said, I don't know why this would fail as I'd expect socket duplication to not work if the address is wrong."
"Yes. `EatToken` will return the natural kind of the token, which, if it's a predefined type, will be of the wrong kind. We need to convert anything that isn't an `IdentifierToken` to a missing token, which `EatToken` will not do.

---
In reply to: [348849497](https://github.com/dotnet/roslyn/pull/39879#discussion_r348849497) [](ancestors = 348849497)"
I'd say taking dependency on that behavior was wrong... Let's make it consistent and predictable
"We only get here with input parameters. `[NotNull]` takes a special meaning on inputs, namely ""the method will not return if the input is null"". This contract can only be represented with the `[NotNull]` attribute and cannot be represented with types. So we need the attribute regardless of substitution.

~~I'll double-check the behavior for `ref` scenarios. The `!forRef` check might be wrong.~~ The behavior of `[NotNull] ref` parameter is correct. There `[NotNull]` strictly has it's post-condition meaning. #Resolved"
"Given the code that uses this, if we get a null that means something went Really Terribly Wrong™. Can we just throw on null or annotate this particular one differently?"
"I feel like the marshaller bypasses ctors when it creates SafeHandles as a return value, (maybe I'm wrong and it just finds a ctor that looks like one it knows how to call? or maybe a default is required and I'm having a very bad recollection day).  I'm not sure this code actually prevents invalid handles.

A more canonical representation of this would be to declare the ldap_init call to return a SafeConnectionHandle (instead of IntPtr) and the caller should do

```C#
SafeConnectionHandle handle = LdapPal.Initialize(null, 389);
```

// In LdapPal.Windows.cs
```C#
internal static SafeConnectionHandle Initialize(string host, int port)
{
    SafeConnectionHandle handle = Interop.wldap32.ldap_init(host, port);

    if (handle.IsInvalid)
    {
        handle.Dispose();
        // this error handling code
    }

    return handle;
}
```"
"I am not sure this is really much more complex when all is said and done, but I understand the concern.  

This is already parsing for `{@github}` so this is simply adding conditions to that same parsing which should not add much overhead unless it gets a match. Also, does this not only run on the `previewer.ts` context which would always get benefit from these changes?  Any time rendering preview hovers with markdown this would be useful and relative linking should be a benefit to all files and content regardless if they are Typescript.

The only real thing this adds would be beneficial 100% of the time in that case.  The parsing fixes `[](file://./)` linking and `file://./` linking in the markdown text.  Those are not Typescript-specific.

You should probably not support linking at all if it doesn't really work.  At least just ignore relative urls as well as {@github} because:

1. @github will never work when cmd+clicking them if they have a label since it will try to open the wrong url but in the hover it will be correct, which means the behavior is not only inconsistent but broken.
    - Another option is to not support the `|` syntax at all for link and just have the `{@github url this is the text}` which this PR does make work.
    - Only supporting `{@github https://www.google.com Google}` syntax also resolves the issue brought up in `contrib/links/links`. Only the fixes to allow `../` style relative linking would be needed there then.
2. relative urls will only work in some case, but not most such as `../` or when rendered from another path in the project.
3. file:// urls also do not work currently when relative and using @github 
4. file:// urls will never work when using markdown `[test](file://./plugins.ts)`
5. file:// urls will never work with fragments - which this does not really make more complex to support `file://./plugins.ts#3,6`

Probably should just remove relative link support completely so-as not to cause problems since at the moment it will fail almost 100% of the time."
"It seem be wrong. 
e.OldItems.Count can smaller than e.OldStartingIndex

I think , it should be e.OldItems[0]

And, e.NewStartingIndex also has problem, 
If e.NewStartIndex was greater than e.OldStartingIndex, 
It should be (e.NewStartIndex - 1) instead of e.NewStartIndex
Because, You removed the item before insert.

  "
"Does it really worth? It could happen only in case of custom converters when someone implemented them in wrong way. If it should be, maybe add `try`-`catch` block when delegates are invoked? There you have much more information about types and even a JSON property name which could help, plus all code can be expressed in C# which is much better idea because:

1. It will be much easier to maintain the code,
2. Code will be shared for emitting and non-emitting accessors."
"Sory, i was wrong, cache initializer will be for first 64 enum values.
https://github.com/dotnet/runtime/pull/42302/files/2a7699d12692176a00de0d3892960d383a13e2c5#diff-1836df549fbe8f438e0cfc38f3fc07daR59-R64
https://github.com/dotnet/runtime/pull/42302#discussion_r490357066"
"Maybe a dumb question, but is there no better way to deal with a possibly null handle than to do it manually? Seems like we should be able to pass null or some special SafeHandle value here..."
"Technically this is the old way. Modern browsers, for example, Firefox will attempt to use no more than 8 processes (based on the core count of the machine) to host all the tabs, in order to limit the process overhead when people opens large amount of tabs, like 100 tabs in a window. 

Update: I've search the web and found [this blog](https://medium.com/mozilla-tech/the-search-for-the-goldilocks-browser-and-why-firefox-may-be-just-right-for-you-1f520506aa35) claiming that Firefox uses no more than 4 processes. So maybe I'm wrong about it. But it's an article from the year 2017. And web technology evolves really fast these days. Anyway, the point is there is a hard limit on how many processes Firefox will have, to reduce the overhead caused by too many processes."
"Thank youf again for working on this. 
I'm sorry for adding even more confusion, but I don't think we should fix it like this.
Please correct me if I'm wrong, but the most common scenario during the transfer of baggage is something like this:
```CSharp
foreach (var item in baggage)
{
    activity.AddBaggage(item.Name, item.Value);
}
``` 
Here a sample of how Kestrel doing this: https://github.com/dotnet/aspnetcore/blob/c97a0020d8bab6d895bf821f6e47ee8722aa17d5/src/Hosting/Hosting/src/Internal/HostingApplicationDiagnostics.cs#L276

This means that with this change if before the transfer we had baggage like this
```
Key1=NewValue;Key1=OldValue
```
After transfer that would be:
```
Key1=OldValue;Key1=NewValue
```
So the result of `GetBaggageItem` will be changing on each transfer and would be totally unpredictable (Or we would need to require reversal of the baggage collection before adding that is very unintuitive)

This is what actually happening now in net core 3.1 and at lease from my point of view it's better to have a change in behavior then changes in order between transfers.

Alternatively, you could change `GetBaggageItem` method itself to return the last item with that key in the list, but that would mean fully iterating over the list each time (or making list double-linked), so I'm not sure if it worth it.

I do know how complicated is the process of exposing new public method is for your team, but in terms of our use case having something like `SetBaggageItem()` or `RemoveBaggageItem()` would solved all of the problems and it would've allowed to avoid all of the problematic cases discassed here. I don't think somebody actually want's two items with the same key (or if they do they could work with `Baggage` enumeration), but it's quite posible and easy to call `Add` twice in diffirent places or have the need to update value. 

Having the ability to update the list, you could always suggest people use it instead of `Add` when they are facing simular problems and it will prevernt inceasing baggage size when it's not needed."
"Looks like this diagnostic message is wrong, maybe due to passing the wrong `sense` value to `enforceMemberNotNullWhenIfAffected`? #Resolved"
"I always thought the plan of record was to ship the ""sidecar"" annotation information in the analyzer itself, in the cases where we got the attributes wrong in the ref pack.

Granted - I don't think these issues in ComponentModel are enough to warrant doing that work. But if we were to try to fix the annotations (say something else critical was found), I thought that was the way we were going to do it."
"@github 

Our pickers (regular pickers) have gone crazy after updating from SR3 (yes, we lagged) to SR9.

Text color in popup is white. It wasn't white before :)

I have absolutely no idea what to change and where to fix this.

This is what our styles.xml theme derives from:

`<style name=""MainTheme.Base"" parent=""Theme.AppCompat.Light.DarkActionBar"">`"
"Yeah, that’s how I got confused and did the wrong thing earlier.

in this case, ins_Store needs to take srcType because we might have a float variable in an int register. For example we hit this case on x86 when calling an unmanaged method that returns a struct of floats and we want to store the floats on the stack, which is what prompted my fix in the first place."
"Yep, nothing wrong with gotos"
"Be aware that this whole file is going to be nuked in my next PR, so this code should be essentially duplicated in `AdaptDispatch`, otherwise there's something wrong with the architecture. Instead of `_terminalApi`, you'd obviously have `_pConApi`, but you'd still then need an `AddMark` stub in the `ConhostInternalGetSet` class, possibly returning false to indicate that it's not supported.

For now, it's fine if the `AdaptDispatch` version has some additional code to handle the conpty stuff. Typically that would be wrapped in an `IsConsolePty()` test which would always be false for WT."
"Oh, I got that wrong. It does pass in the -1 as the last parameter, but the length parameter is set to the encoded length. I don't know which special constant -1 maps to. "
"The root cause of #2100 causes two bugs:
1. When a dialog is open, the titlebar is the wrong color (#2100)
2. When a dialog is open, the color that is painted temporarily while resizing the window until the XAML Islands window is resized is the wrong color

This fixes the first issue but not the second.

I don't think that this is really important because when this is fixed: https://github.com/microsoft/microsoft-ui-xaml/issues/759, we will be able to get rid of this workaround and this issue will go away.

So I don't think it's necessary to open a new issue for this small thing."
"so this case is def interesting.  why did it break?  can you clarify?  i have a guess, but i don't want to go down a wrong path of assumptions."
"Just this part is wrong,  `mscordaccore` would be the TARGET_FILE. But at this point of time it is not signed.  "
"Now that I think of it, all these should be inside a `NOT DEFINED CLR_CROSS_COMPONENTS_BUILD`, right @github? 

Also, was the purpose of not having cross-components generate index files? If so, this predicate feels wrong as the x64 DAC for ARM64 and the native ARM64 binaries will both generate them. "
">ContainingType [](http://example.com/codeflow?start=18&length=14)

it looks like I was wrong and we shouldn't recurse into the containing type here given that base implementation doesn't do that. There is also an explicit comment about that there:
```
            // When we are binding a name with a nested type, Goo.Bar, then we ask for
            // use-site errors to be reported on both Goo and Goo.Bar. Therefore we should
            // not recurse into the containing type here; doing so will result in errors
            // being reported twice if Goo is bad.
``` #Closed"
"add `[DisableDefaultCtor]` here since
* it's not used anywhere;
* the base type is abstract without an `init`
* we can remove it (it's not a breaking change) if we're wrong"
"I wrote that rule :)  A diagnostic means that the tree is not valid in some fashion.  Indeed, that's precisely what the incremental parser uses to make this determination.  So the presence of a diagnostic saying ""you're using the wrong lang version"" ends up impacting all higher up versions which then interpret this as ""there is a problem fitting the text to the syntax model"".  

In this case this is purely a semantic check.  The tree is 100% syntactically valid (definitionally so), but there is an ambient external check that impacts it (specifically the idea of a lang-version).  This also violates the other syntactic rule i specified which is:

> The parser should, as much as possible, be context-free. 

this makes parsing not context free.  In order to parse you have to pass additional context in as it affects the nodes that you might produce.  This also means that if you change compiler, you have to reparse everything (which really doesn't make much sense since the text is all the same, and as such the syntactic structure is truly the same).

Where we have bent this a bit is with record-parsing, where there truly is a different in syntactic structure produced based on options.  But outside of that, where we generate teh same trees otherwise, putting version diagnostics in the parser violates these design principles. "
"Based on the alignment, it seems to be treated as HFA.  But I am surprised that `m_hfaFieldSize` is not `4` since it seems to be HFA.

I pushed a hack which inferred the alignment from the m_byteStackSize.  It feels wrong, but I don't really have a better idea.  I suspect it is sufficient to work for the current test coverage.

I wonder if `m_hfaFieldSize` should change to `m_stackAlignment`..."
Coding style is wrong in this file as well.
"The old message was wrong since the API always return `false`, even if macOS was lower than 10.6 (as we're not calling anything)"
"The breaking API changes are expected:

- public const string CFNetworkLibrary = ~""/System/Library/Frameworks/CoreServices.framework/Frameworks/CFNetwork.framework/CFNetwork""~ ""/System/Library/Frameworks/CFNetwork.framework/CFNetwork"";

Unsure if this was a mistake or if CFNetwork was a part of CoreServices at some point, but in any case CFNetwork is not a subframework of CoreServices anymore (in 10.15).

- public const string CallKitLibrary = ~""/System/Library/Frameworks/CallKitLibrary.framework/CallKitLibrary""~ ""/System/Library/Frameworks/CallKit.framework/CallKit"";

The previous value was just wrong.

- public const string CoreBluetoothLibrary = ~""/System/Library/Frameworks/IOBluetooth.framework/Versions/A/Frameworks/CoreBluetooth.framework/CoreBluetooth""~ ""/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth"";

Moved from inside an umbrella framework (IOBluetooth) into its own framework in 10.10

- public const string CoreImageLibrary = ~""/System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/CoreImage.framework/CoreImage""~ ""/System/Library/Frameworks/CoreImage.framework/CoreImage"";

Moved from inside an umbrella framework (QuartzCore) into its own framework in 10.11

- public const string CoreTextLibrary = ~""/System/Library/Frameworks/ApplicationServices.framework/Frameworks/CoreText.framework/CoreText""~ ""/System/Library/Frameworks/CoreText.framework/CoreText"";

It's own framework since at least 10.9

- public const string ImageIOLibrary = ~""/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ImageIO.framework/ImageIO""~ ""/System/Library/Frameworks/ImageIO.framework/ImageIO"";

It's own framework since at least 10.9

- public const string ImageKitLibrary = ~""/System/Library/Frameworks/Quartz.framework/Frameworks/ImageKit.framework/ImageKit""~ ""/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/ImageKit"";

The same path, because of symlinks (now follows the same pattern as other paths).

- public const string PdfKitLibrary = ~""/System/Library/Frameworks/Quartz.framework/Frameworks/PDFKit.framework/PDFKit""~ ""/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/PDFKit"";

The same path, because of symlinks (now follows the same pattern as other paths).

- public const string QuartzComposerLibrary = ~""/System/Library/Frameworks/Quartz.framework/Frameworks/QuartzComposer.framework/QuartzComposer""~ ""/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/QuartzComposer"";

The same path, because of symlinks (now follows the same pattern as other paths).

- public const string QuickLookUILibrary = ~""/System/Library/Frameworks/Quartz.framework/Frameworks/QuickLookUI.framework/QuickLookUI""~ ""/System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/QuickLookUI"";

The same path, because of symlinks (now follows the same pattern as other paths).

- public const string SearchKitLibrary = ~""/System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/SearchKit""~ ""/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/SearchKit"";

The same path, because of symlinks (now follows the same pattern as other paths).
"
"I'm not crazy about stating exact dates when they are not certain.  How about simply saying the EOS date is `February, 2022` with a possible indicator that this is an estimate?"
"@github something is very wrong with this PR, you I'm sure you have not changed 400+ files for this, have you?"
"From https://developer.arm.com/documentation/100941/0100/Barriers, trying to understand what you stated.

![image](https://user-images.githubusercontent.com/12488060/147993407-f4664533-c43a-45a0-be9b-2c21fafec207.png)

![image](https://user-images.githubusercontent.com/12488060/147993434-c5a54027-7d09-4f36-82ab-158a9961b06e.png)

Basically, for `ishst`, loads can still be reordered around barrier and hence it is weaker than the `ishld` where loads/stores need to wait till the barrier is complete.

If we change from full barrier to `ishst`, we might have a load that should have been completed but got reordered and might end up reading the wrong value (pre-updated value). Is my understanding correct?
"
"This is the wrong way to modify this file, but also I wouldn't modify this file to get the desired behavior as it will prevent us from reporting `false` and still partially accelerating functions on AVX only hardware (among other issues). -- You also can't do this without potentially breaking ABI handling...

The ""right"" fix would be to special case `get_IsHardwareAccelerated` around  here: https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/hwintrinsic.cpp#L288-L292

That way `Vector256` is treated as ""supported"" (this is important for interop/ABI handling) but `IsHardwareAccelerated` returns ""false"". You can then likewise force `Vector128` to report the same in the scenario a user disables `SSE2` (which just ensures we do the ""right thing"" even in the testing scenario)."
"Actually, it looks like this PR adds it, so I'm wrong. :smile:

IMO, `#!` isn't worth recommending (I think it probably clutters completion more than it helps given how infrequently this will by typed).  We should at least make sure it isn't the first thing that shows up in completion.
"
"not sure about string and number.. the possible values here are infinite, any thing we suggest will likely be wrong."
"This should just be 
```suggestion
                NonNullable<T[""args""]>[K][""name""]
```
but we get the constraint of `NonNullable<T[""args""]>[K]` wrong and error on that, it seems. I'm sure more future improvements will render this fixed and simplifiable, too."
"@github it's unlikely to help, since the predicates are very complicated. It's likely the kind of some deeply nested node that's wrong."
"this is wrong, but not sure why this is here..
"
"Finding ""Task"" when someone writes ""ContinueWith"" is akin to us finding types like `List<T>` when the user types ""foo.Count"".  I think it could be hugely useful.  But it needs to be done properly.  i.e. we should actually be finding types that contain that member and not just saying ""i'm _somewhere deep in an await_ ergo, my type is the same as the contextual type the await would find"".   

To be clear:

`string s = await Foo().ContinueWith(list => list.Count.ToString())`

It is simply wrong for us to say that ""Foo()"" is a `Task<string>`.  The only reason this was ok in the test was because the test was contrived.  It happened to be ok in this one case.  But htat's like saying:   ""string s = x.y.z.Florb()"" and saying that x, y, or z should have the ""string"" type.  It's just taking a type we see and drawing a very erroneous conclusion about it.

Similarly, if you had ""if (a.b)"" then ""b"" should have type 'bool', but 'a' should have nothing inferred about it**.

Up until #643 was ""fixed"" teh type inference service operated in a very considered and careful manner.  It infers types when there is a genuine connection between things.  i.e. if i have ""string s = a.b.c"" then ""c"" def can be inferred to have the ""string"" type.  similarly ""string s = await foo"" or ""string s = await foo.ConfigureAwait()"".  in both these cases 'foo' can be inferred to have type string.  

## 

*\* in the future it would be nifty to say ""try to find a type that has a 'b' on it, and pick something suitable"".  Until then though, i don't want this bad inference code in the type inferrer.
"
"I would readily believe, or at least hope, that those are equivalent, but this implementation gets to the core of what went wrong in the linked crash. You cannot ask for a name starting with `__#` in `checker.tryGetInModuleExportsAndProperties` and expect to get the private identifier symbol it came from back out, because the checker will underscore-escape that string and try to find a property whose _actual name_ starts with `__#`."
"this is interesting.. why was that missed before?
also the comment seems wrong.
"
"> 
> 
> > if there are multiple constraints that must come first, we now report that these constraints cannot be combined.
> 
> does it mean that `var` and `nameof` won't be allowed to be in the same line?

@github sorry, I copied the wrong URL in the description. This PR is unrelated to that bug."
"@github I now fixed all failing tests. By unifying the file banner parsing (relies only on `SyntaxFacts.GetFileBanner` now), I needed to find a middle ground in keeping existing behavior, fixing bugs, dropping features, and unifying behavior (this lead to a lot of changes, so the PR also contains lot's of refactorings of the existing code now, which makes it hard to review).

The most notable change I have done so far is the changes to `AbstractSyntaxFacts.GetFileBanner`. I essentially added support for leading whitespace, end of line, and preprocessor directives (e.g. to support `#region header` around the banner). This method was used by a bunch of other analyzers/fixers (see https://github.com/dotnet/roslyn/pull/49440#issuecomment-731590060). I needed to fix one test case after the change in `MisplacedUsingDirectivesInCompilationUnitCodeFixProviderTests`, but I think the behavior was wrong before and is right now.

Most adoptions to the new behavior in FileHeaderTests are also improvements IMO. I needed to drop support for block comments with missing end token, though.

`AbstractFileHeaderHelper` is only a shadow of its former self. I think it can be completely inlined now. What do you think about that?

What should we do with respect file banners in the editorconfig in XML doc comment style? Should those be allowed or should these be treated as text (editorconfig: `/// Some xml doc comment`  -> `// /// Some xml doc comment`)?

I still have to write some more tests, but a review of the current changes would be appreciated."
"@github @github There are actually several issues being debated here:
- Circularities occurring because we're more eager than we need to when _resolving_ (as opposed to _checking_) the type of an expression. As Jason points out, that's not a new issue. We could make progress on this issue by making a distinction between _resolving_ and _checking_ an expression, and only evaluate as much as we need to when resolving. Indeed, we could solve the actual cases in the compiler by doing this for type assertion expressions.
- Inability for symbols to have evolving _declared_ types. This one is much harder. I really don't want to go there unless we absolutely have to.
- Compute _narrowed_ types by iterating to a fixed point. We only do this in limited form today and, as Wes' example shows, we may need to do more here. I'm not super concerned with crazy examples that walk up a ladder of overloads, but I can indeed imagine real world examples where it occurs without overloading. Although I haven't actually seen any in the wild yet. I will continue to think about this issue.
"
"Ok, here's another oddity -- doesn't explain what goes wrong above, but does suggest why this method may be a fairly stressful case. 

https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Numerics/Matrix4x4.cs#L1329-L1343

We really should not be crossgenning an `SseImpl` method for arm64 as it can never be called on that platform, and the method assumes SSE support. But we do anyways. Because we're compiling this SSE method for arm64 most of the basic inlines fail as the inliner sees these methods will throw:
```
**************** Inline Tree
Inlines into 06001C4B System.Numerics.Matrix4x4:<Invert>g__SseImpl|59_0(System.Numerics.Matrix4x4,byref):bool
  [0 IL=0008 TR=000005 06003F53] [FAILED: does not return] System.Runtime.Intrinsics.X86.Sse:LoadVector128(long):System.Runtime.Intrinsics.Vector128`1[Single]
  [0 IL=0022 TR=000015 06003F53] [FAILED: does not return] System.Runtime.Intrinsics.X86.Sse:LoadVector128(long):System.Runtime.Intrinsics.Vector128`1[Single]
  [0 IL=0036 TR=000025 06003F53] [FAILED: does not return] System.Runtime.Intrinsics.X86.Sse:LoadVector128(long):System.Runtime.Intrinsics.Vector128`1[Single]
  [0 IL=0050 TR=000035 06003F53] [FAILED: does not return] System.Runtime.Intrinsics.X86.Sse:LoadVector128(long):System.Runtime.Intrinsics.Vector128`1[Single]
...
```
Currently, failed ""does not return"" inline methods don't result in control flow dead ends . So these all look like normal calls in the root method that might return. As a result we have a ton of call-crossing vector lifetimes and are giving the upper save/restore logic a good workout.

I don't know yet if crossgenning this method is an artifact of running cross crossgen (that is, I am running a crossgen hosted on x64 here) or a ""feature"".

I wonder if the `SseImpl` version should have another `IsSupported` check guarding some sort of not supported on this platform throw...?

cc @github 

"
"That depends on the relationship between the `outDir` of the importing file and the `outDir` of the imported file. Consider this non-monorepo project references scenario:

```
src/
  a/
    tsconfig.json - outDir: ../../out/a
    index.ts
  b/
    tsconfig.json - outDir: ../../out/b
    index.ts

out/
  a/
    index.js
    index.d.ts
  b/
    index.js
    index.d.ts
```

Because the `outDir`s of the two projects have the same relationship as the `rootDir`s, it’s safe and conventional to write imports from `a` to `b` as `import { B } from ""../b"";`. But as of #37482, you get two suggestions:

<img width=""569"" alt=""image"" src=""https://user-images.githubusercontent.com/3277153/85900003-e2c7df00-b7b3-11ea-9781-f3ae342143d1.png"">

I can’t see any reason why you would ever want the latter. It’s not wrong on disk now, but what happens if you use `out` as the context for a Docker build, copying files to a container image? That image will be broken unless the working directory on the container is also named `out`. These module specifiers aren’t portable."
"@github, this doesn't appear to be working correctly for attributes (or I'm doing something wrong):
<img width=""296"" alt=""image"" src=""https://user-images.githubusercontent.com/2642209/152821008-2d89fd36-bcd5-4ca0-84bc-b106182b662a.png"">
?"
"> There is absolutely nothing wrong in old static class with main method model. At least make this optional!!!

@github we're fixing our test-queues right now.  Once htey're running successfully again I'll restart this PR :)"
"> just curious, is there a specific change that you want to consume?

CompileDesignTimeChange and merge conflict was not resolved properly for the arcade where we end up using the wrong versions. Hence the restore is still removing the platform."
"> With this PR, it hits an instantiation depth limit error in about 3 seconds

I think that was also the case before this PR.  It doesn't hit the limit in 4.2 or 4.3 (or probably 4.4, though I didn't confirm), but it's possible that a depth limit is the correct outcome - maybe we used to silently do the wrong thing.  Since my repro is all hacked up, I think performance on the repro from #44851 is way more important.

Having said that, it would be nice to get confirmation from someone with more expertise that the depth limit is expected and acceptable."
"Per discussion, I'm going to split this into two PRs:

- Fix snippet completions appearing in the wrong place, targeting 4.5 and 4.6 (replacing my fix there)
- Eliminate `JSX attribute` text entirely, as it's been broken forever, targeting 4.6."
"> We _could_ keep the type annotations in the label (but no the insertText) if we think that makes it more clear or useful, but I think this is probably best.

Yeah, I considered that, but seems rather confusing. But I don't know, given how I didn't even noticed we could do without the type annotations, I could be very wrong.

"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20861,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>This change is released under the MIT license.

Signed-off-by: Zhenbo Li litimetal@gmail.com



<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> > We're including the right header <stdalign.h> so not clear what is wrong yet.
> 
> `stdalign.h` comes from Windows SDK (e.g. `C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt`). Maybe we are using a bad Windows SDK version on CI machines?

There was an image rollout yesterday that caused other issues with WinSDK, so entirely possible."
"I'm not sure if this is working. I still see `MAUI_VERSION_VALUE` in the generated template (in the NUPKG, and also once you `dotnet new` it). Not sure what might be wrong here.

The generated template NUPKG has this in template.json:

```json
      ""mauiVersion"": {
        ""type"": ""parameter"",
        ""dataType"": ""string"",
        ""replaces"": ""MAUI_VERSION"",
        ""defaultValue"": ""MAUI_VERSION_VALUE""
      }
```"
"I think something has changed in the build that is causing ResizetizeCollectItems to run super early in the build pipeline before dependent projects have been built, and that's why we are seeing this issue. If I'm not wrong, ResizetizeCollectItems is running before the dependencies have been built, and that is causing the failure.

![image](https://user-images.githubusercontent.com/6995051/142254110-859e33eb-b804-45d4-9156-30c5477875c4.png)

![image](https://user-images.githubusercontent.com/6995051/142254504-6dbdf7e5-3b1f-4dc8-887e-9dce2404d708.png)

It's not clear to me what the right solution for this is, I would expect that ResizetizeCollectItems only runs after all dependent projects have been built."
"This comment seems wrong. Even when are no remaining buffered bytes, returnEnd is set to _readTail."
"This page doesn't have a heading, it just has that select. I'm updating this to just drop `.Text` to make it clear that it's about seeing that element come up. I chose this because it's used in so many tests - which makes it very unlikely these tests would break without something going wrong."
"Yea that name sucks "
Parentheses in the wrong spot  - aren't you concatenating the `1` here?
This code all sucks.  I will fix up later today and will send out again.
"Oops, read this totally wrong. I need food&hellip;"
and then he clicks the wrong button as he apologizes....
"I prefer Stopwatch whenever I need timer like functionality since it reads easier and I feel like I have less chance of getting my arithmetic wrong through a simple authoring error.
Also, I assume that if the user changed his system time during the interval, that if that caused my code to malfunction it would be a bug in Stopwatch rather than my own datetime arithmetic logic."
"> @github Did you mean ""We can detect if we fell back to it instead of trying to detect if it was selected explicitly.""?

Yes.

This log should be removed https://github.com/dotnet/aspnetcore/blob/29d0f9c0fbb17211410ef7cc5ba211c35bff29c7/src/DataProtection/DataProtection/src/EphemeralDataProtectionProvider.cs#L60

It's currently in the constructor but shouldn't be here. It'll end up being logged anytime it's used, which is wrong. That said, I don't think there's any easy way to log if we're falling back based on the current logic."
(Deleted comment posted on the wrong PR)
"Wrong branch @github? Or rather, we should also merge this into the release/6.0.0-rc1 branch"
"That would return the wrong (`false`) result. A ""missing"" token is one that was inserted by the parser. There is no token here at all.

---
In reply to: [179895304](https://github.com/dotnet/roslyn/pull/25963#discussion_r179895304) [](ancestors = 179895304)"
"It is not functionally wrong to do this, even if there was a concatenation, because we remove it again in the lowering of the coalescing operator. I noticed this technique is used in lot's of places. (For example, the lowering of a non-binary string concatenation builds lot's of intermediary structures that are broken down again when lowering a higher level.) So I used the same technique here to clean up the code considerably. Also, notice that the unit tests all still pass, nothing has changed there.

But you are correct, a simple `if (length == 1)` avoids it in most cases.
 #Resolved"
"you say it's a workaround for a bug here: `// workaround for the bug`

But it's not clear to me that this is a bug, or that the above is a workaround.  As per the compiler API docs, it seems like the compiler is operating as per the spect.  In which case this isn't a workaround, it's just handling a case that needs to be handled.

> this PR is not about the info bar. I can open info bar tracking issue
#30553

Sure.  Though it would be good to just fix both now since hte bug reports are about the crash:

> this was never a crash, so not sure what you meant by crash.

The user perception of what is going on is that this is a crash.  VS gives a scary message saying something has gone wrong.  So it looks simply like a crash that was caught and then VS limped along.  "
"That part appeared to be incorrect, I have written a test case where we CSE wrong after that change, trying to find why.
After that I hope to change in the master branch or find how to keep the old behavior with the flag."
"the wrong thing :) "
"The only time SkipValue can fail is when the content is corrupt and moving forward again would not succeed.

It should generally be true that calling the wrong read method does not corrupt the reader (or, if you prefer, any wrong read call utterly destroys the reader).

So either this should avoid advancing at all until the end (which probably requires passing some offsets into some helpers that previously didn't need them), or the body should be something like

```C#
ReadOnlyMemory<byte> checkpoint = _buffer;

try
{
    // current code here
}
catch
{
    _buffer = checkpoint;
    throw;
}
```"
"The updated condition is also wrong:
- nothing will be written when `IgnoreDefaultValuesOnWrite` is true and the value is not `default`.
- `default` values will be written regardless of  the value of `IgnoreDefaultValuesOnWrite`.
- maybe a couple more things"
"Added:
```cpp
// TODO-Cleanup: Struct retyping means we have the wrong type here. We need to
//               manually fix it up so the simdType checks below are correct.
```"
I was under the impression that returning a `const` value was meaningless. Someone @ me if I'm wrong on this?
"I suppose that's a good point. I guess by that logic, I'm okay with 
* removing this code
* resolving #4170 as ""Investigated, this only happens when the user is holding it wrong""

and merging this PR. "
hrmm.. i'm probably wrong here.
I try to do `winrt::make` here and I get a bunch of errors in base.h. This feels wrong...
"I am not sure whats wrong here, I tested this branch locally for our custom repo by setting

`""electronRepository"": ""microsoft/vscode-electron-prebuilt""`

and set the env `VSCODE_MIXIN_PASSWORD`  variable with a github token to download from private repo. This works fine locally.

@github thoughts ?"
"We could just make `GenerateName()` return nothing here. That way we give the user the option to have it pop up in the command palette?

Personally, I don't think it makes sense to be included in the cmd plt because it's kinda in the wrong context. But that's just my opinion."
"@github  i comment your change and the test still passes, am i holding it wrong ? "
"Okay, this is gonna sound crazy, but hear me out - 

can we remove all of the other `#ifdef`s in this PR, and replace them with just one here?
```suggestion
#if TIL_FEATURE_TRAYICON_ENABLED 
        return _settings.GlobalSettings().MinimizeToTray();
#else 
        return false;
#endif
```

(here and in `AppLogic::GetAlwaysShowTrayIcon`)?

The code is a little confusing to read with them scattered throughout. Seems like it'd be easier to have all the code there and ready to go, just permanently disabled when the feature is off."
"> Does this change cause some expressions that used to be considered constant to no longer be considered constant?

Not really. We wouldn't get here if an expression was considered a constant. See the comment right below ```Case BoundKind.BinaryOperator``` and, based on review of the algorithm, I think it is accurate. Given that, unless there is a bug similar to the one I am fixing, an error is going to be reported anyway. What we could end up with before is that, despite an error, a ```ConstantValue``` for a left operand of a binary operator could be returned. That value, clearly, doesn't represent the result of a binary operator itself and perhaps could have wrong type. That probably could affect what our internal structures hold and the constant value that SemanticModel or a symbol reports, but I do not consider that a breaking change. Compiler simply becomes more ""accurate"" in error scenarios. 

---
In reply to: [540555923](https://github.com/dotnet/roslyn/pull/49912#discussion_r540555923) [](ancestors = 540555923)"
"Is this properly named, and/or what are the semantics *supposed* to be?

With a name like `get_full_dso_path()`, I'd *expect* it to return...a path to a `.so` file *which can be loaded with `dlopen()`.  I mean, *why else* would we need a dso path?

Implied in the above (wrong!) description is that it should likewise return a path *into* `.apk` files!  For example, `/path/to/app.apk!/lib/armeabi-v7a/libfoo.so` is *also* a full path, is it not?

But that's not what this function does.  It gets a path *rooted in `base_dir`*, and does nothing with `.apk` files.

Perhaps it should be named `get_full_external_dso_path()`, where ""external"" suggests that it won't return values within `.apk` files?"
"> > inb4 some crazy app that's calling `SetConsoleScreenBufferInfoEx` in a tight loop

That's not that crazy. Get/Set console screen buffer on each command is one of the few ways to bulk get/set that sort of state. I wouldn't be surprised if something like PSReadline was doing that without realizing."
"I think we should think a bit about what we can do to make the finger printing a little better (can we do anything at JIT time or runtime) and try to figure out if we need to have a heuristic with how to remove these blocking call sites from this list. That can be improved over time (I can think of some crazy ideas...) but we just need to make sure that the idea is sound (I think it is).

It's already currently scoped to sync over async which is think is the big thing we need to tackle."
Maybe I'm looking in the wrong place as not only do I not see anything testing parsing ending in `.` but also not starting with `.` or even with `0.` at least in SingleTests.cs
"> It feels like we don't need to make any changes in VisitParameter since we are handling everything in VisitMethod. I do not feel any sympathy to callers that display parameters on their own.

I've been trying to find a workaround to that case. Other than reimplementing all the logic to visit a FunctionParameter at the call site (which seems wrong), or exposing a new public method `SymbolDisplay.FunctionParameterToDisplayParts` I can't see anything better than handling a FunctionPointerParameterSymbol correctly in `VisitParameter`.

I'll go with adding `SymbolDisplay.FunctionParameterToDisplayParts` for now..."
"> It's how I've always interpreted it, certainly.

It's prescriptively correct, but as a reader of the doc alone, I don't know if it's intending it that way or if it might be ""wrong"". (If there were a `semi-` nearby, could infer.) Thanks."
"> Could you do something like ""if we received a notification event with the ID 'TerminalTextOutput', this is the newest iteration""?

Maybe? @github, @github, @github, @github is it possible to change the overlay class associated with an NVDA object in response to receiving a particular event? (I'm thinking not, but being proven wrong would ease this).

Other idea: maybe all terminals could inherit from `LiveText`, but we `stopMonitoring` and unregister for `textChange` once we get a UIA notification?

I think it'd probably be a lot simpler if they set the `automationId` on the terminal control to something unique (it's currently empty), then we can detect new/old overlay class as normal."
"Using the old enumerator here looks wrong, because nothing uses the new enumerators current value.. but the lower loop says ""old has _more_ lambdas"" which is doing my head in.

```suggestion
                var (newLambda, newLambdaBody1, newLambdaBody2) = newLambdaBodyEnumerator.Current;
```"
"> Seems like it would be wrong to fire NotifyStarted if we didn't successfully start but I'm not sure. It's weird to return from StartAsync without an error if we haven't successfully started.

I agree with both points here. If `StartAsync` wasn't successful, it should throw."
"I don't know what the pros and cons of using ArrayBuilder vs List are, and rely on PR comments to tell me when I've got it wrong :)"
"Isn't the result for `IsDynamicCodeCompiled` still wrong when the dynamic code is going to be interpreted? "
">GetMembers(GeneratedNames.MakeBackingFieldName(""P"")) [](http://example.com/codeflow?start=57&length=52)

Could we simplify the check to assert that there are no fields? The current check depends on us guessing the ""right"" name, but that is just another thing to get wrong and fail to detect a wrong behavior. #Closed"
"yes, as mentioned in the description, something is wrong with the build system so i can't get the ifdef to work. if anyone has any ideas i'd love to try them, i probably spent an hour trying"
"Dumb question.  Should we just include the original diagnostic itself?  That seems 'reasonable' to me in that you started with a diagnostic, and you're asking to ""fix all"" of the diagnostics like it in some scope.

I basically worry that we might need some of the other data on it in the future (like teh properties/etc.) so we might just include it now for completeness."
"I maintain that if this can't be successful just using Vector*, something is wrong. A key point of these APIs is to not have to use or understand the low-level intrinsics. "
"This is going to be wrong for `SSE` as its not the binary representation of `BitDecrement(0.5f)` for float

I'm also not sure that this implementation is correct in the face of all representable floats, I'm pretty sure there is going to be rounding and precision wonkiness in a number of corner cases."
Need to update this comment as it's now wrong.
"I just copied the same file from CSharpTest.  So if this is wrong then htey're both wrong. 
"
"This condition appears to be wrong. (`!=` should be `==`)

I know you didn't touch it, but this makes me very afraid.
"
"So... this is not really caused by your change, but was already there, but i think this is wrong.. the key to addToSeen should not be the name of the property, but rather the the pair [container symbol, property Name]. e.g. today this fails:

```ts
class C {
    method() { 
        this.a = 0;
    }
}


class D {
    method() {
        this.a = 0;
    } 
}   
```

it gets a bit more involved if one of the two classes inherit from each other."
"The type is wrong though, since it will actually be `Promise<number>`."
"C# implementation is using user-defined equality operator, this code is using reference equality.
Also, the comment I gave for C# implementation is applicable here, i.e. this place feels like a wrong place for the fix.
"
"Previously we just got computed properties wrong. We effectively ignored them when computing the rest type. Now we actually factor them in, and when a computed property has type `string` (i.e. a non-unit type) we remove _all_ properties from the rest type because we have no idea which ones were actually removed. This mirrors what `Pick<T, Exclude<keyof T, string>>` does."
"Well, here's my thought process, such as it was:

1. I want the Typescript equivalent of `Maybe` (aka `Result`), not `Either`, because I don't have anything useful to return in the error case.
2. That's `x | undefined` usually.
3. But my return type is a string literal union, so why not just return another string? It's going to be checked precisely anyway. And it'll be slightly more efficient and explicit.
4. Plus I get to come up with a hilarious failure string: BAMF? TRY AGAIN LATER? DON'T COPY THAT FLOPPY?

My baseline state is just dislike of exceptions so I didn't think of them.
In any case, the fallback-with-two-tries structure seems like it would be even clunkier with exceptions, although I could be wrong."
"I wouldn't have though so, but I could be wrong. I tried to think of a way how to test this, but couldn't come up with a way that would compile in C#. There might be a cunning way by building expressions dynamically, but I don't know if that'd be a supported mechanism for binding."
"@github Thanks for the feedback 👍. I think there is no need to add space for cases like so

```ts
@github
class Foo {}
```

```ts
class Foo {
  @github
  fn() {}
}
```

Or am I wrong?
Do I need to add logic to writing space for decorators in `emitNodeList`?
"
"note: this wasn't a complaint.  Just pointing out the difference between these two generators.  It's not necessarily right/wrong, just something to potentially look into depending on what semantics you want."
"> Something went wrong with clang-format download.

Is there a way to harden that path, by adding retries? Also as we are already there, should we switch jitutils to produce nuget package going forward and take part of the dependency flow system going forward instead of downloading from github directly?"
">                             var method = getTopLevelMethod(_symbol as MethodSymbol);

It seems like `_symbol` here should always be the top level method? Is there a time when it's not? If there is, the docs on `_symbol` are probably wrong.

---
Refers to: src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs:1218 in c5b1eec. [](commit_id = c5b1eec9e65eb7e4e706f951c5b756a9b319d40b, deletion_comment = False)"
"We should consider using FileMap to store these, and use its helpers to do the lookup. this comparison will fail if one of the files has the wrong slashes or casing,
"
"> The issue that we tried to fix by adding support on Unix was logged in 2017 and has 250+ upvotes meaning that most likely there are NCA2.0 and NCA2.1 apps out there that could benefit by adding this support today, and it seems wrong to me to drop 2.0 and 2.1 just because of a tiny implementation detail which is why for now we opted to cross compile.

Makes sense, just throwing the idea out there as that is what we ended up doing in System.Drawing -- but that was a very different scenario. "
"> I didn't add tests to MonoVM. I added tests in coreclr. I'd like this test to run standalone.

These tests are run also with MonoVM so expect failures there. I know the location is wrong, the naming is wrong but that's being fixed.

> I have no idea what SPC or PNSE means :) could you please elaborate

As you are adding public API into CoreCLR specific implementation you need to add same public API to Mono's specific System.Private.CoreLib -- https://github.com/dotnet/runtime/blob/master/src/mono/netcore/System.Private.CoreLib/src/System/GC.Mono.cs. It should be enough to add them with throw PlatformNotSupportedException (PNSE) for now.

"
"Yeah, maybe instructions are getting reordered?  Or this method is returning the wrong value (coincidentally @github just changed that).  Too much coincidence here, this is not a flaky test, and it's indeed supposed to run here."
"This change has made upgrading to TS4.0+ incredibly difficult for the [vscode-docker](https://github.com/microsoft/vscode-docker) extension. We share a UI framework with quite a number of other Azure-related VSCode extensions; this framework heavily (ab)uses the ability to override properties with accessors. Never had any problems. _Hundreds_ of files across dozens of repos would need to be fixed to be able to upgrade.

It would be very nice to have either the ability to suppress this specific error only in source (i.e. #19139) or globally.

Aside from it being weird, I'm not sure what would be wrong with overriding a `readonly` property with only a `get` accessor? Or vice versa?"
"> Do we agree that the test is definitely wrong?

Not sure.  There are plenty of situations where one disposable type wrapping another disposable type doesn't do anything in its Dispose except call Dispose on the wrapped instance, and Dispose is idempotent, so it's acceptable use.  There are also cases where objects are ref counted, e.g. with SafeHandle, and the wrapper would have taken a ref on the wrapped thing such that disposing the wrapped thing wouldn't have actually closed the wrapped thing until after everything was disposed and released ref counts.  I don't know what category these fall into nor what guarantees we've made in docs... but it seems like this works on Windows?

> if it's possible for libgdiplus to detect that it's being used incorrectly

My confusion is that the APIs being used here are managed.  Misuse of a managed API shouldn't cause a seg fault / crash.  If it's actually misuse, worst case it should throw an exception.  e.g. if I misuse FileStream, it shouldn't crash the process (even though FileStream P/Invokes as an implementation detail), worst case a use-after-dispose would produce an ObjectDisposedException.  So I'm trying to understand what makes this special; it's possible there some aspect of this I'm just missing that makes it different :)"
"@github Can you take another look? One important question for the TODO comments is ""Are there any problems if some options are removed from AutomationObject?""

I can't think of any backcompat issues, while this comment mentions otherwise:

https://github.com/dotnet/roslyn/blob/8fd033cd948a2eb33e4af650b7a1b3dd18e914d2/src/VisualStudio/CSharp/Impl/Options/AutomationObject/AutomationObject.ObsoleteAndUnused.cs#L12-L18

I don't know if the comment is outdated/wrong?"
"Tagging subscribers to this area: @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The `AvoidRestoreCycleOnSelfReference` workaround was causing
DiagnosticSource to get the wrong PackageID in the assets file when
referenced by other projects.  This wasn't a problem when using pkgproj
since we'd calculate dependencies from assembly references, ignoring
the assets file.  This is a problem now that we're using csproj pack,
since that gets dependencies from the assets file.

Fixes #52459 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ericstj</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-libraries`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Ah fair point. Which do you suppose is more wrong, the code or the documentation?"
"> * Catalyst has a different directory structure for dumb Apple reasons, and greatly complicates things because symlinks aren't allowed in nupkgs. Might need to hide the .frameworks inside archives of some kind (suggestions gratefully received)

If you zip them up to Mono.framework.zip, we can implement logic to handle that at build time and extract the framework."
I'm pretty sure the point of the `if` was not to inline the `ThrowHelper` itself since that's supposed to be a cold path. Was the condition at wrong place?
"@github thank you for providing the details.
@github let me give you some more info on the ""this"" pointer alignment issue. We have an in-memory data structure that's loaded from disk or generated. Items of the problematic type are correctly aligned, however when we are computing an address of such an element, we were using an unaligned pointer and then aligning it. We are walking that in-memory structure and locating elements in there. When we move past the previous element, we can get an unaligned pointer for some previous element's size. What we were doing wrong was that we have first cast the pointer to a data structure that needs 8 byte alignment and then called its member method that aligned ""this"" and returned the aligned result for further use. With this fix, we align the pointer (which is a BYTE*) first and then cast it to the specific type that needs the alignment."
"There is really something wrong with the EH in this test. The EH gets into an infinite loop, so there is something subtle that I must have missed. "
"This seems to be the wrong approach. During `genFnProlog` we scan for on-frame locals that will require tracked reporting, and explicitly exclude dependently promoted structs. However, we keep track of these locals by a pair of frame offsets.

So evidently something goes wrong here (perhaps just with OSR) and we get this range wrong, or are not properly ordering the frame so that we're intermingling locals improperly or something. Continuing to investigate."
"Forgot a screenshot, I think the toolbar is the same at the top:

![screencap](https://user-images.githubusercontent.com/840039/159526309-28018a59-df7c-4606-97a2-9b9c3e37ebfc.png)

But let me know if I'm looking at the wrong view..."
"I initially found `System.IO.Pipelines.Pipe` a little awkward to work with and it seemed to behave about 10% slower, but it's likely I was doing something wrong - I'll give this another go."
"While this is a constant that should never change so technically correct, it feels wrong to repurpose the constant for `Upgrade: ` header name to compare against the value of a potential `Connection: Upgrade` header."
"❔ Should this go under the ReSharper settings above? I vaguely remember seeing people put it there in the past, but I could be wrong and/or things could have changed."
Nit: I think we might have given this the wrong name in the original PR. https://github.com/dotnet/aspnetcore/pull/38860#discussion_r766255157.
"Correct me if I'm wrong, but it looks like as long as any 'fix' is present, we're returning 'ErrorFix' as one of the categories with applicable actions.

Based on the mappings in the IDE :
- ErrorFix is of higher precedence than CodeFix
- ErrorFix maps to the 'error' lightbulb icon
- CodeFix maps to the 'default' lightbulb icon

Therefore, if 1 or more fixes are applicable, the error lightbulb icon will always be displayed on mouse hover over squiggle, or on set caret position.

The thing to keep in mind is that the lightbulb API 1) calls GetSuggestedActionCategoriesAsync(), picks the category of highest precedence, and then displays the icon for that category. On lightbulb expansion with Ctrl+. however the lightbulb displays the icon for the highest precedence category name in the list of SuggestedActionsSets."
"If possible, this should be backported to 2.1 and 2.2 as soon as possible. It pottentially can cause serious issues to existing applications with wrong impersonation."
"We have an application which works with different servers using some protocol X. End users are interested in working with the only server at the same time. Usually the user doesn’t even have an access to several servers. So some users work with server1, other users work with server2, etc.

On the app side we have a health check to monitor the state of each server. The server server1 might be Healthy, server2 - Unhealthy and server3 - Degraded. It is absolutely okay because we don’t control the servers (they are external third party resources). Some of them are actually just demo servers so that they are often down. We also have an application-wide check to monitor the app itself. There we check the things which are not related to the servers directly, e.g. databases on our side. But we also include the servers to that app-wide check so that if all the servers are Unhealthy, then the app is Unhealthy too because we don’t expect such situation and most probably something is wrong on the app side. Anyway, even if everything is fine with the service itself we still want a notification that nobody is able to use the service. But the thing is that the default logic results Unhealthy when at least one check (e.g. server2) is Unhealthy.

Eventually, we use a workaround which works normal enough. I don’t think that our specific case is enough reason to change the framework behavior. I just found that kind of flexibility useful for the community. I can imagine some other calculation logic in other apps. That’s why I created the PR."
"I was wrong. Pascal casing is preferred when tuple names appear in metadata. 

---
In reply to: [141434265](https://github.com/dotnet/roslyn/pull/22291#discussion_r141434265) [](ancestors = 141434265)"
"This is a deletion of wrong code, so the question doesn't really apply to this change.

---
In reply to: [171347438](https://github.com/dotnet/roslyn/pull/23921#discussion_r171347438) [](ancestors = 171347438)"
">9385, [](start = 32, length = 5)

Not your PR but this looks wrong. "
"> @github's comment makes me realize we designed this wrong. UseStatusCodePagesWithReExecute must go before UseRouting to work, but it must go after routing for [SkipStatusCodePages] to work. Both are not possible. We will have to re-think the ordering requirements. Either re-open #10317 or file a new issue please.

Hm. Will dig into this to understand the flow here and file a new issue."
"I talked with @github when he made this change. I believe awaiting `ThreadPoolAwaitable.Instance` before sending preface and settings means the test loses the SynchronizationContext so the Http2Connection request processing runs inline.

The problem that this PR fixes is `ThreadPoolAwaitable.Instance` was nested in a method. When returning from that method the context is re-acquired before SendPreface/SendSettings. Moving `ThreadPoolAwaitable.Instance` so it is in a method before SendPreface & SendSettings fixes this.

Correct me if I'm wrong @github 😄 "
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
"> Isn't that warning just wrong? T? is a nullable reference type, so F3 can be left initialized, no?

We will make this call when we address the comment 

---
In reply to: [215031895](https://github.com/dotnet/roslyn/pull/29623#discussion_r215031895) [](ancestors = 215031895)"
"> dumb question. how is ths better? Won't this still block the UI thread while this is happening?

In the event this type is constructed on the UI thread, the new code is the same as the old code.

In the event this type is constructed on a background thread, the new code will block the background thread while a UI thread operation completes, rather than crash altogether."
"No, I totally agree with you that this is *the* pattern that everyone *should* follow. And anyone who doesn't should not be allowed to write C# code if up to me. However, not having the suffix is not disallowed, and as long as that's the case, I'm sure some people would do just that. 

I guess my reservation about ignoring those attributes is based on my understanding of how Intellisense should work (I might very well be wrong, so please correct me if that's the case), which is it should at least provide every valid type that can be typed here. So it can be used for look up purpose if people want."
"This is also a case where NRT is pointing out that this behavior is wrong. Consider the following code

```
SmallDictionary<int, int>.Empty.Add(42, 13);
```

This will fail with a `NullReferenceException` as the call to `GetHashCode` assumes `Comparer` is a non-null value. Allowing `null` here would require re-engineering this type a bit. 

---
In reply to: [356224843](https://github.com/dotnet/roslyn/pull/40268#discussion_r356224843) [](ancestors = 356224843)"
comment wrong?
"I see how I caused this confusion by wrongly naming SignedSatQ(SignedWideType val, out UnsignedNarrowType result) instead of UnsignedSatQ. The underlying implementation was correct, so the tests passed - the helper name was wrong :-)

In fact, I found that we only need the following three helpers:
- SignedSatQ(SignedWideType val, out SignedNarrowType result)
- UnsignedSatQ(SignedWideType val, out UnsignedNarrowType result)
- UnsignedSatQ(UnsignedWideType val, out UnsignedNarrowType result)

I added SatQ helper as defined in the Arm specification and used it instead of SignedSatQ/UnsignedSatQ to make the implementation looks closer to the *""gold standard""*.

However, since we decided to provide right logical shifts overloads for signed types - I had to extend SatQ helper operating on signed arguments in the way allowing reinterpretation of the incoming signed values as unsigned that helps avoiding doing multiple casting in different helpers.

I pushed the change to Helpers.tt Helpers.cs - it makes sense to look at the former only."
"These messages are wrong for xUnit.

In the event of failure it'll say something like

```
  Field is a reference type; instance members may be subject to mutation.
    Expected: True
      Actual: False
```

or

```
  Field is mutable.
    Expected: True
      Actual: False
```

Since the assertion message prints what was expected, they should essentially restate the condition expression.

```suggestion
                        Assert.True(field.FieldType.IsValueType, ""Field is a value type."");
                        Assert.True(field.IsInitOnly, ""Field is declared readonly."");
```"
"> I left the accessibility check to be the responsibility of the caller of FindCopyConstructor. That is more consistent with existing code (GenerateBaseParameterlessConstructorInitializer for example).


This is wrong. Accesibility check belongs here and should come first

---
In reply to: [438934812](https://github.com/dotnet/roslyn/pull/45022#discussion_r438934812) [](ancestors = 438934812,438764948)"
"I prefer explicit named arguments when there are multiple of them which have same type and similar name prefix, avoids accidentally passing them in wrong order."
"I was wrong "
The pattern of `property.GetOwnOrInheritedGetMethod()?.ReturnTypeFlowAnalysisAnnotations ?? FlowAnalysisAnnotations.None` seems like it's repeated a bit in our code. It's here now as well as being inside of `SymbolExtensions.GetFlowAnalysisAnnotations`. Why do we not just have this as a property on `PropertySymbol` as we do for `MethodSymbol`? Feels wrong to have it repeated (avenue for future bugs if we only fix one instance of it)
"as an aside, a lot of these catches bother me in the sense of we NFW, but then the user may be in some (non-broken) state, but unclear on why something they want to be working isn't.  can we file issue to at least yellow-bar or something to let them know that something went wrong, but that otherwise they can continue?"
"Yeah. So this is dumb and annoying. The ""Header"" dependency property is apparently already in use (see below).
```
1>D:\Terminal\src\cascadia\TerminalSettingsEditor\Generated Files\XamlTypeInfo.g.cpp(493,44): error C2995: 'winrt::Windows::Foundation::IInspectable winrt::Microsoft::Terminal::Settings::Editor::implementation::GetReferenceTypeMember_Header(const winrt::Windows::Foundation::IInspectable &)': function template has already been defined
1>D:\Terminal\src\cascadia\TerminalSettingsEditor\Generated Files\XamlTypeInfo.g.cpp(463): message : see declaration of 'winrt::Microsoft::Terminal::Settings::Editor::implementation::GetReferenceTypeMember_Header'
1>D:\Terminal\src\cascadia\TerminalSettingsEditor\Generated Files\XamlTypeInfo.g.cpp(1387,6): error C2995: 'void winrt::Microsoft::Terminal::Settings::Editor::implementation::SetReferenceTypeMember_Header(const winrt::Windows::Foundation::IInspectable &,const winrt::Windows::Foundation::IInspectable &)': function template has already been defined
```
_But_ if we try and use ""Header"", we fail catastrophically:
- adding `TabTitle.Header` to the resw --> `'Unable to resolve property 'Header' while processing properties for Uid 'Profile_TabTitle'. [Line: 138 Position: 69]'`
- `Header()` does not exist in SettingContainer.cpp"
"> > But doesn't this mean that this PR is invalid?
> 
> I think so, the difference between colors is a visual hint that something is wrong with the comment

I agree with @github I will close this PR"
ig ot that wrong. This would DISALLOW only `ctrl+alt+shift+ctrl` but it would ALLOW `ctrl+alt+shift+alt` because it's only checking the first position
Wrong branch for that commit?
"This just isn't needed anymore, or it's being set somewhere else, or it was just wrong?"
">  You may want to consider not allowing System.Private.CoreLib.dll (which the AssemblyExtensions class is in) to be edited like coreclr does or what it considers ""system"" assemblies.

oh I went chasing down the wrong branch in `Module::IsEditAndContinueCapable` - thought this was the debug bits, not `PEFile::IsSystem`.  Yea it makes sense to not allow edits to CoreLib."
"I still find my approach in #52189 more suitable. Why do you ignore the hard acquired `containerSymbol` just to do the same work here again (and facing the same problems)? Passing the container would lead to symmetry between named (`GetMemberSymbols`) and unnamed (`GetUnnamedSymbols`) symbol acquisition:

https://github.com/dotnet/roslyn/blob/cb6cf9c792c844d1b617a58e475023d91402ba89/src/Workspaces/CSharp/Portable/Recommendations/CSharpRecommendationServiceRunner.cs#L483-L494

(Note: Doing `var container = containerSymbol.GetSymbolType();` for unnamed symbols works pretty well in #52189)

Do I miss something? Is there something wrong about the `containerSymbol` that prevents it from being re-used here?

Just my two cents."
"> > Now I don't want to go too crazypants here, but I'm thinking about future extensions to some degree.
> > I'm curious if you considered a design where the text buffer figures out the patterns on its own instead of being pumped to do that action by a thread from way outside itself, in this case from up in the Terminal* and friends.
> > I'm not saying this one is bad or wrong, but an alternate vision I have is that you would register an object with the TextBuffer that contained a pattern, region of interest, and a callback method/event inside of it. The TextBuffer would just... of its own accord as things are written in on the other methods (and maybe with its own internal, private thread or threadpool worker) grind through the region with the pattern and make callbacks as necessary.
> > Almost like you have an `ITextScanner` interface with an `ITextMatchFound` callback interface... which might lend itself toward easy adaptation into a COM/WinRT-based plug-in model for arbitrary buffer scanners in the future.
> 
> As Dustin and I are musing about this... your `ITextScanner` could just also contain `ITextEffect` on it as an optional in lieu of a callback that is just handed straight into the renderer and now you've also managed to design rendering effect extensions at the same time...

OK we all discussed this with Teams. I'm willing to concede this point because Hyperlinks are so interesting here that they push the boundaries of this sort of unified model. And where the threads live is a bit contentious. And Dustin keeps coming up with more ideas why, while this model sort of works, it has sharp edges. So I'm fine with proceeding per what this draft has as a design."
You'd be guessing wrong! :smile:
"We were doing it for some builds and not others - and that seemed wrong too (or we need a comment to _justify_ why those build needs it).
"
"The name seems too general for what this does.

Also it seems risky to have this because if you call it ""too early"" you will get the wrong answer."
"^ wrong place for the attribute, `WithConnection` should be working (back to 4.0). It's only `WithNoConnection` which is restricted to newer OS"
"interesting ambiguity.  if we have `ref x () =>`  is that a `ref` to this lambda, or a lambda that returns by-ref.  Given that the former seems fairly meaningless semantically (correct me if i'm wrong), it seems safe to presume this is the latter.  #Resolved"
"is github just rendering this wrong.  i see:

![image](https://user-images.githubusercontent.com/4564579/121416265-750db800-c91d-11eb-8d8d-6ee98698e256.png)

i legit don't know how this is even legal c# code.  it looks like we parse the attribute... say we're in async... and then the method body ends?!  i'm assuming github is just broken here maybe? #Resolved"
"That's probably wrong, but does the trick for the moment. Unfortunately, `WellKnownTypes` from the compiler layer are not accessible here."
"Need to double check but it what's already there seems to work
```
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../Universal.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../Universal.xcframework/ios-arm64/Universal.framework/../dSYMs/Universal.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../Universal.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../wavpack.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/wavpack.xcframework/ios-arm64/wavpack.framework/../dSYMs/wavpack.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../wavpack.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../vorbis.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/vorbis.xcframework/ios-arm64/vorbis.framework/../dSYMs/vorbis.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../vorbis.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../tta++.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/tta++.xcframework/ios-arm64/tta++.framework/../dSYMs/tta++.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../tta++.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../taglib.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/taglib.xcframework/ios-arm64/taglib.framework/../dSYMs/taglib.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../taglib.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../speex.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/speex.xcframework/ios-arm64/speex.framework/../dSYMs/speex.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../speex.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../sndfile.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/sndfile.xcframework/ios-arm64/sndfile.framework/../dSYMs/sndfile.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../sndfile.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../opus.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/opus.xcframework/ios-arm64/opus.framework/../dSYMs/opus.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../opus.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../ogg.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/ogg.xcframework/ios-arm64/ogg.framework/../dSYMs/ogg.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../ogg.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../mpg123.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/mpg123.xcframework/ios-arm64/mpg123.framework/../dSYMs/mpg123.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../mpg123.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../mpc.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/mpc.xcframework/ios-arm64/mpc.framework/../dSYMs/mpc.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../mpc.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../MAC.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/mac.xcframework/ios-arm64/MAC.framework/../dSYMs/MAC.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../MAC.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../lame.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/lame.xcframework/ios-arm64/lame.framework/../dSYMs/lame.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../lame.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../flac.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/flac.xcframework/ios-arm64/flac.framework/../dSYMs/flac.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../flac.framework.dSYM 
_CopyUserFrameworkDebugSymbols:
  Removing directory ""bin/iPhone/Release/xcf_ios.app/../dumb.framework.dSYM"".
  /usr/bin/ditto -rsrc ../../external/dumb.xcframework/ios-arm64/dumb.framework/../dSYMs/dumb.framework.dSYM/ bin/iPhone/Release/xcf_ios.app/../dumb.framework.dSYM 
```"
"It's probably fine, but this does change which exception will be thrown if there are multiple things wrong."
"> > because the app manifest will be always located at the app bundle root level
> 
> FYI that's not true for Mac and Mac Catalyst (but it is true for iOS, tvOS and watchOS).
> 
> I don't think we support neither from Windows right now, so unless I'm wrong this should not be an issue.

Thanks for the clarification. Right, Hot Restart is only supported for iOS so the assumption should be enough"
"this seems wrong to me.. or at least having both exports seem wrong.. i think you either want one or the other.. and to a big extend it depends on what the shape of `""./b""` is.  if `""./b""` does not have a default export, this statement is an error under ES6 semantics.

I would say we should do one or the other, i.e. always do `export * from ""./b""` unless `"",/b""` has only one export that happens to be `default` (or export = for that matter).
"
"> If it returns false then now I have to do something more complicated

Do what?  How do you know what went wrong and what to do differently next time / how to fix it so it doesn't happen again?

> With no retry policy/error handler callback/etc, the method feels, to me, too trivial to be worth adding if it throws on the first failure (except for a few degenerate cases, like ""your destination is an illegal path"").

I agree with that.  I also think it's not worth adding if it only does some of what you asked it to do and happily returns false with no additional information.  If we want to throw an exception after it's completed copying whatever it can, that's fine; the API review discussed either throwing the first exception or the last exception or an aggregate... any of those seems better than returning false (though with an aggregate I'd worry about memory impact if lots of things in the copy failed)."
"> But note that this is also the way the SupportedOSPlatform analyzer works - you need to annotate the entire call chain

And to me it seems flawed there, too.  If I have a call A->B->C->D, I annotate A as ""unconditionally suppress this diagnostic"", and B/C/D are only reachable from A, it seems wrong to me that we then still require the developer to annotate B/C/D in order to avoid warnings.  I'm trying to understand if there's a good technical argument for requiring the developer to still do that busy work and we fundamentally believe it's important that they should, or if this is a technical limitation where we'd like to avoid their having to do it but we can't (or can't yet)."
The indentation here is wrong.
I think the expected newContent is wrong. The generated template string seems to have an extra backslash.
"I agree Big-O notation suggests this is still linear with the length of the input, but I thought the way we communicated timeout checks recently, we said we would do at most N operations between timeout checks, as opposed to using Big-O complexity for guaranteed timeout checks. (BTW I now realized I asked the wrong question in the original comment, and really meant ""Can't this cause us to perform more than N operations..."")"
"The surrounding code seems to work ok. I ran all the tests using a checked build of the runtime and libs to make sure i hit any applicable asserts. If I change the emitter to avoid 0 length instructions the instruction counts will be wrong in dumps which will be confusing and it will then be possible to accidentally have 0 length instructions which at any other time would be an error.

Removing an instruction from the middle of a group would be much more difficult than this because any later instructions would need to be moved back up which would invalidate references to them. Specifically removing only the very last instruction is relatively safe because it can only affect the references to that value, and as you see I made sure to zero it in checked builds so that if anything touches that instruction once it has been removed it will get invalid data and usually hit an assert.

I don't quite understand the reluctance to remove the instruction rather than zero it. Other than the fact that the jit doesn't do this anywhere else (it doesn't zero size anywhere else either) is there particular reason for concern about doing it this way other than it being new?"
"Yep, I think that error is wrong. This PR is just fixing the crash."
"Hm, this error seems.... bad. The new error gives no hints that it's not that you've messed up a property, but that you're outright passing a JSX element from the wrong JSX renderer!"
"For the Verify methods, calling Embedded vs Detached backwards is probably better represented as an InvalidOperationException (since this method can't be called because of the state of the object (message.Content.HasValue is wrong for this method)."
"This fails right now as it says ""any""; I think this test case was wrong originally given I didn't actually declare `Foo`."
Something is wrong with the PR (too many commits). What happended? #Closed
"> In regards to the tests, the completions provided are actually incorrect as the code would be wrong and not really access the property

If I recall correctly, the point of `isNewIdentifierLocation` being true in JS cases is that we don't really have an authoritative view of the types, and can't let editors aggressively complete there; however, it's useful to leverage other words in the file or project, and so you still want to provide completion results (again, since we don't *know* that they're unrelated). To try to relay that they're unrelated, we deprioritize them compared to whatever else we're confident of."
"Strictly, the docs now need an update (the other overload is wrong too)
https://docs.microsoft.com/en-us/dotnet/api/system.string.remove?view=net-5.0#System_String_Remove_System_Int32_"
@github I think you have linked the wrong issue. Should be https://github.com/dotnet/runtime/issues/52863?
"> @github @github  any idea why the Unix asset is considered compatible for the .NETFramework runtime targets?

This is what I said you'd want to look out for [above](https://github.com/dotnet/runtime/pull/58558#issuecomment-915430045): 

> We might want to ignore any runtimeTargets that don't start with win (since we don't really care if someone who builds a .NETFramework project for RID = linux gets wrong asset).

The toolchain has no knowledge of what RID's are ""valid"" for a particular framework, it just provides runtimeTargets in case they might be used.  On .NETCore it's the host's decision to decide if it happens to use one of those (based on the RID fallback graph it has for the particular runtime it's running on).  Package testing is trying to make sure that any asset that ""might"" apply for any RID meets our test criteria.  Since it's not a scenario to restore .NETFramework for non-Windows RIDs I don't think we need to test them (nor force our packages to add non-windows-RID-specific netframework assets)."
"> Changes like this one are also harder to understand (at least for me) without digging in further to what's going on:
Before: <ItemGroup Condition=""'$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetsWindows)' == 'true'"">
After: <ItemGroup Condition=""'$(GeneratePlatformNotSupportedAssemblyMessage)' == ''"">

@github I reverted all the PNSE change. I thought those might be easier to read but apparently it's the other way around and I introduced unnecessary complexity.

> Agreed. But until we get that functionality in the product, there's nothing wrong with us having some ""helper"" functions to make our code clean/readable.

@github I think mixing platform conditions (TPI + Targets*) is more confusing than applying platform conditions with the TPI property only (even though inheritance isn't supported with TPI and they might be more verbose). Imagine the following case:

A project has platform specific properties and items:
```
<PropertyGroup>
  <TargetFrameworks>$(NetCoreAppCurrent)-windows;$(NetCoreAppCurrent)-Linux;$(NetCoreAppCurrent)-OSX</TargetFrameworks>
</PropertyGroup>

<!-- DesignTimeBuild requires all the TargetFramework Derived Properties to not be present in the first property group. -->
<PropertyGroup>
  <TargetPlatformIdentifier>$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))</TargetPlatformIdentifier>
  <GeneratePlatformNotSupportedMessage Condition=""'$(TargetPlatformIdentifier)' == 'windows'"">...</GeneratePlatformNotSupportedMessage>
</PropertyGroup>

<ItemGroup Condition=""'$(TargetsUnix)' == 'true'"">
  <Compile Include=""..."" />
</ItemGroup>
```

vs.

```
<PropertyGroup>
  <TargetFrameworks>$(NetCoreAppCurrent)-windows;$(NetCoreAppCurrent)-Linux;$(NetCoreAppCurrent)-OSX</TargetFrameworks>
</PropertyGroup>

<!-- DesignTimeBuild requires all the TargetFramework Derived Properties to not be present in the first property group. -->
<PropertyGroup>
  <TargetPlatformIdentifier>$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))</TargetPlatformIdentifier>
  <GeneratePlatformNotSupportedMessage Condition=""'$(TargetPlatformIdentifier)' == 'windows'"">...</GeneratePlatformNotSupportedMessage>
</PropertyGroup>

<ItemGroup Condition=""'$(TargetPlatformIdentifier)' == 'Linux' or '$(TargetPlatformIdentifier)' == 'OSX'"">
  <Compile Include=""..."" />
</ItemGroup>
```

Today only two `Targets*` properties which support inheritance exist (`TargetsUnix` and `TargetsLinux` for Android) and only very few projects depend on that feature. If we think that this change makes the projects that leverage this feature unreadable, we could define such a helper property per project in a property group so that it can be used both for property and item conditions. That said, based on what I saw while making these changes, I don't think that's necessary.

Another fundamental problem with the libraries specific `Targets*` properties is that they have a totally different meaning than the `Targets*` properties that are repo-wide defined, i.e. `TargetsMobile`. The former is inferred from the TargetFramework and hence means the platform that the target framework targets. The latter is inferred from the TargetOS and is just a shorthand form for `' $(TargetOS)' == '...'` conditions. Because of their equal prefix, people used them equally even though they mean something totall different. 
As an example here's one of such mistakes in main today: https://github.com/dotnet/runtime/blob/1c80769c0d6e2241cd8a3eeb17cab306d0954d1f/src/libraries/System.Runtime.Serialization.Formatters/src/System.Runtime.Serialization.Formatters.csproj#L12-L14 This condition is only true when the `TargetOS` is one of the mobile OSs but not when the target framework platform is a mobile one. That means that if you compile this library i.e. on a Windows OS the condition will be false vs. when you compile the library on a mobile OS."
"Does this duplicate something we have elsewhere?

As a detail, we don't currently respond with exception details anywhere in this class, because the catch blocks here *never* catch exceptions from user code (LMK if I'm wrong) 😀 "
"I'm sure this is viable as-is, but if you feel like you have time to tweak it a bit more, I'd suggest it would be preferable not to have the `@github` statement, because then it would be really confusing if you were in the browser UI looking for something in the list that wasn't there because you accidentally loaded the wrong host environment and didn't realise some test cases are only available in some environments.

It would be much clearer if all the entries were present all the time, but if you picked a type that can't be found, we have an error message like ""The type {name} could not be found. It might not be supported when running on this host environment."". This error could be triggered from `Index.razor`'s `SelectedComponentType` getter, or just inline in the Razor UI logic when `SelectedComponentTypeName` is nonempty but `SelectedComponentType` is null.

Also rather than using assembly qualified names, what stops it from working just having the type name (independently of the assembly)? The logic in `Index.razor`'s `SelectedComponentType` uses `Type.GetType` - doesn't that look at all the loaded assemblies?"
"I'm not going to address this now. The primary utility of screen shots is being able to quickly see what went wrong running on Jenkins, where everything is (presumably) happening on a single primary screen. On a local system you have other methods of figuring out what happened."
">OperatorMethod: C2 C2.op_Implicit(System.Int64 c1) [](start = 78, length = 50)

This shows why it is wrong to request conversion information from semantic model based on syntax, several nodes can be associated with  the same syntax and represent distinct conversions. The question is why this wasn't caught earlier? We have tests, but for some reason they do not help.  #Closed"
">result = _operationFactory.Create(loweredBody); [](start = 16, length = 47)

It feels wrong to tie lowered tree to any SemanticModel. SemanticModel deals with un-lowered bound trees, who knows what negative effects will this operation have, how will it affect the caches, etc. I think there should be no interaction between SemanticModel and the tree built of off lowered bound nodes. "
"> is there anything that can fail horribly because we're not running the user continuation inline

This PR is retaining the existing behavior, so there's no risk of anything breaking. The previous code was extremely confusing because it *looked* like we were requiring asynchronous continuations, but because we were using the wrong enum type, it actually had no effect at all (the `TaskContinuationOptions.RunContinuationsAsynchronously` value was being passed as the *state* parameter, being boxed as an object!)."
"> Does this change do anything in applications that don't need it?

Not sure what that means, but I'm going to say `no` to it.

> Seems like a big change to push into preview7 at this point.

The core of the change is just the file provider. The rest is tests (around 30 or so for the file provider at least) and a few workaround we had to implement before https://github.com/dotnet/sdk/pull/19080 goes in.

We already inserted the SDK changes last week and these changes are the follow-up to consume those changes in the runtime. There is a flag to turn static web assets off and there is also a flag to fallback on to the old version if needed, so we have plenty of options if something goes wrong.

Which while it can happen because I'm not an all omniscient being, we have plenty of tests on the repo that would break if there is an issue here.

It is important to us that we get this on preview7 and into customers hands to iron out any potential issue as soon as possible."
"> 4\. For some places we do throw an `InvalidOperationException` but the problem is the exception message is a different place to place, so if we use our new extension method, then everywhere the same exception message will be thrown and it will be a breaking change for users! I know it's just an exception message change, but still, (I may be wrong) it's breaking change I guess!

Changing an exception message is not considered a breaking change, only changing the exception type would be breaking."
">ToDisplayString [](start = 30, length = 15)

This is very wrong again. We have IsStringType helper to perform this check reliably. #Closed"
"it is assert. so debug only. she is basically saying if RelatedSpans.Any() is true, and then list is empty, then someone is doing something wrong. or at least, we don't expect that to happen.

if we believe in this case, related spans is not empty but we have empty classification span is common/known case, yes. we should remove the assert.
"
"on the fence about thsi... 

We need to do some testing of some significant pastes.  Here's why:  GetTextChanges is not guaranteed to offer any particular behavior.  It may sometimes say that the entire file changed, or it may do a bad diff that ends up with some crazy changes.  There are issues tracking this, but i can't find them.

So, basically, you're calling this assuming you'll get a nice minimal edit back stating which import was added.  But i don't know if you can trust that will happen.  And then, if you have weird stuff (like overlapping changes) i have no idea what blows up later.  This is a definite concern for me."
this feels like the wrong namespace for this code.  But i don't have anything much better. #WontFix
"This should just throw, or otherwise we're just moving the crash from the point where we noticed something was wrong (and could debug it) to the point where it's going to cause random failures in other places."
"I am not sure if this is correct but this something you want to double check. here is the scenario 

this = """"
value = ""A""
startIndex = -1

I believe this should return -1 but now we'll return 0 which is wrong I guess.

"
"Ah, yeah, that was dumb of me. "
"> Better to only support the core pieces we can reason about and make promises about from a scale perspective, and then in the future if necessary consider loosening those constraints.

If you feel like there are too many unknowns to do this reasonably well then I am fine with this, but it sucks from a usability perspective.

Are we optimizing for the right user here?

We initially talked about adding this API for the rare user who wants perf/scalability but also wants sync, but I suspect (strongly hope) that this is actually a small group. I expect the biggest user of this to be the one who doesn't care about or doesn't understand scalability, and wants something that ""just works"". If the API has a bunch of non-corner cases where it throws, then this is far from ""just works"" and fails those users.

Perhaps we should rethink the API, making it harder to find (maybe require reflection?) so that you'd only ever use it if you are in the 1st scenario, not the 2nd."
"> When I was talking about switching to use the Publish target I didn't mean to switch to self-contained as well. I don't think that would apply here, right?

Oh right.

> FWIW we will need to publish self-contained at least for code coverage in the future (talking about local inner-loop) as the current model is easy to break (we instrument referenced assemblies from the testhost directory and then undo the instrumentation when the coverage run is finished). In the case of something going wrong or the process being killed, the testhost is broken and you need to rebuild.

Makes sense, well this is giving a way towards that. "
"> Assuming GCHandle.Target is faster than the ConcurrentDictionary TryGet anyway?

Would need to measure.

> Unsafe.As<SocketAsyncContext>(((GCHandle)handle).Target))

Not with an unsafe cast! Too many things could go wrong for me to feel comfortable with that, e.g. a race between the socket getting finalized and an event for it getting processed."
"It feels a bit strange that we're doing all this lock-free stuff, and in the end we're still taking a lock around it anyways. It's not wrong, just feels strange."
"> I recall that command wasn't working for a while recently.

Do you mean that it is still not working? If so, can you point me to an example of wrong generation within this file?"
"This specific case is not a good example of how the annotations should work. But let's assume the debugger is somewhere in managed code in the app - so something has a reference to the `ProxyTypeName` property and presumably it does something like:
``` C#
var propertiesToShow = Type.GetType(attr.ProxyTypeName).GetProperties();
```

When linker sees that it goes (basically backwards):
* I need all properties on the type returned by Type.GetType (cause there's a call to GetProperties() on it)
* So it means that the type name coming to Type.GetType must be a type with all properties
* So it means I need the attr.ProxyTypeName to be a type name with all properties -> it should have at least `DynamicallyAccessedMembers(DynamicallyAccessedMemberType.PublicProperties)`.
* If it doesn't -> warn
* So we go and annotate the `ProxyTypeName` with that annotation
* Now running the linker again it will not warn on the usage above anymore, but it will warn in the attribute's .ctor since we're trying to assign an unannotated string to the backing field of `ProxyTypeName`
* So we go and fix that by annotating the `.ctor` argument.
* Running linker again it will not warn in the `.ctor` itself, but it now requires all the callers to fulfill that annotation. But since this is an attribute all callers provide constant strings as the argument - for this linker knows what to do, it finds the type of that name, keeps it and then also keeps all of its properties.

So for the application to work - only the last step is needed, for which only the annotation on the .ctor argument is needed. But that would not be enough for linker to figure out that the code using it is correct - and so it would have to warn (it doesn't do cross method analysis). So the other annotations, like the one on the property, are there to help linker prove that the code is correct and that it will work.

The other advantage is that if later on we change the usage and now call for example `.GetProperties(BindingFlags.NonPublic)`, linker would suddenly warn, because the annotations don't cover private properties anymore and the app may break. Without the annotations flowing through everything it would have no way to tell that there's something wrong.

The reason why the annotations are the same everywhere is that they always mean the same thing - it's a requirement on the value which is passed in. That can be fulfilled either by:
* passing in value with same or ""bigger"" annotation
* passing in statically known value which the linker can actually find - and then it can make sure that type in question fulfills the requirements

Since the method/property itself doesn't which one of the two cases it will be, it applies the annotation - always the same one."
"Dumb problem:
- `right-1` is a `size_t` (so, `unsigned long long`)
- 0 can't be `static_cast` into a `size_t`
Can you think of a workaround?"
"It seems like CSS just works when doing it

https://jsfiddle.net/L79dsh30/
https://stackoverflow.com/questions/9882443/css-multiple-text-decoration/9882469

I do see now that I was wrong about the commas and fonts "
"Did you mean to leave these changes in?

Either way, we should remove the ""really dumb"" from this comment."
thanks for caring about the crazy dude
This should probably just be a `winrt::TerminalApp::ColorScheme` right? I'm pretty sure that pointers to the projected type are a no-no (@github can correct me if I'm wrong)
"Good question. It's a breaking change to change an exception type if it was already there. But I'm not sure what the policies are in this repo/project (I don't directly work on Xamarin.Forms). I'll let a resident Xamarin.Forms team member comment on what should be done here. (I personally find wrong exception types frustrating because it makes it hard to track down where the bug is. ArgumentException? What incorrect argument did I pass in?!? Oh, I didn't...)"
"@github thanks a lot for working on this. I like the changes and I think the flow makes sense.
What I do not like is the fact that this introduces a lot of new code, I understand that it might not have been possible to do it any other way, but just looking at it these are 200 new lines for this ""simple"" feature.
I understand that it might not sound like a lot, but maintaining this code might be the problem going forward for me since I was not the author.

Bottom line: I like the work, but if we could simplify it somehow would make my decision to merge much easier.
This way I plan to review it in more details next week or the week after.

Hope this makes sense and sorry if I put on you on the wrong path."
"```suggestion
    }

```
such a dumb nit"
nope.  i'm wrong.  i misread.  fixing this up.
"I'd rather not? do that? That seems like a thing that is crazy. There's copying -- for the purposes of creating a deep copy -- and there's CLONING for the purposes of making a new profile from this one.

This honestly seems like a shoo-in for @github's recent X-MACROS work. This would _hide_ the duplication, at least?"
"I straight up copied TerminalControl's original lines here. If this is wrong, how will I know?"
"Yeah, it looks like the wrong map is getting used here. Suspect the keys are conformable and don't collide so we never noticed.

cc @github "
"Outside of VS2017 (VS2015 etc) it is in Program Files (x86)..
Not sure how we run the tests under VS2017 because the locations depend on the version you run. Which sucks in my opinion."
"Changing `fieldAlignBytes` is something I'm not sure of here. It was crashing after I removed `uses_embedded_dsos`, and it seemed the assembly generated just removed the value and a single line of padding:
```diff
	.arch	armv8-a
	.file	""environment.arm64-v8a.s""
	.section	.rodata..L.str.1,""aMS"",@github,1
	.type	.L.str.1, @github
.L.str.1:
	.asciz	""com.xamarin.android.helloworld""
	.size	.L.str.1, 31
	.section	.data.application_config,""aw"",@github
	.type	application_config, @github
	.p2align	3
	.global	application_config
application_config:
	/* uses_mono_llvm */
	.byte	0
	/* uses_mono_aot */
	.byte	0
-	/* uses_embedded_dsos */
-	.byte	0
	/* uses_assembly_preload */
	.byte	1
	/* is_a_bundled_app */
	.byte	0
	/* environment_variable_count */
-	.zero	3
	.word	8
	/* system_property_count */
	.word	0
	/* android_package_name */
	.xword	.L.str.1
-	.size	application_config, 24
+	.size	application_config, 20
	.section	.rodata..L.str.2,""aMS"",@github,1
	.type	.L.str.2, @github
.L.str.2:
	.asciz	""0""
	.size	.L.str.2, 2
	.section	.data.mono_aot_mode_name,""aw"",@github
	.global	mono_aot_mode_name
mono_aot_mode_name:
	.xword	.L.str.2
	.section	.rodata..L.str.3,""aMS"",@github,1
	.type	.L.str.3, @github
.L.str.3:
	.asciz	""MONO_GC_PARAMS""
	.size	.L.str.3, 15
	.section	.rodata..L.str.4,""aMS"",@github,1
	.type	.L.str.4, @github
.L.str.4:
	.asciz	""major=marksweep""
	.size	.L.str.4, 16
	.section	.rodata..L.str.5,""aMS"",@github,1
	.type	.L.str.5, @github
.L.str.5:
	.asciz	""XAMARIN_BUILD_ID""
	.size	.L.str.5, 17
	.section	.rodata..L.str.6,""aMS"",@github,1
	.type	.L.str.6, @github
.L.str.6:
	.asciz	""1dee3b58-25fc-46d1-9f79-6953699654e7""
	.size	.L.str.6, 37
	.section	.rodata..L.str.7,""aMS"",@github,1
	.type	.L.str.7, @github
.L.str.7:
	.asciz	""XA_HTTP_CLIENT_HANDLER_TYPE""
	.size	.L.str.7, 28
	.section	.rodata..L.str.8,""aMS"",@github,1
	.type	.L.str.8, @github
.L.str.8:
	.asciz	""System.Net.Http.HttpClientHandler, System.Net.Http""
	.size	.L.str.8, 51
	.section	.rodata..L.str.9,""aMS"",@github,1
	.type	.L.str.9, @github
.L.str.9:
	.asciz	""XA_TLS_PROVIDER""
	.size	.L.str.9, 16
	.section	.rodata..L.str.10,""aMS"",@github,1
	.type	.L.str.10, @github
.L.str.10:
	.asciz	""btls""
	.size	.L.str.10, 5
	.section	.data.app_environment_variables,""aw"",@github
	.type	app_environment_variables, @github
	.p2align	3
	.global	app_environment_variables
app_environment_variables:
	.xword	.L.str.3
	.xword	.L.str.4
	.xword	.L.str.5
	.xword	.L.str.6
	.xword	.L.str.7
	.xword	.L.str.8
	.xword	.L.str.9
	.xword	.L.str.10
	.size	app_environment_variables, 64
	.section	.data.app_system_properties,""aw"",@github
	.type	app_system_properties, @github
	.p2align	3
	.global	app_system_properties
app_system_properties:
	.size	app_system_properties, 0
```
It was crashing on this line in `monodroid-glue.cc` as if the structure was malformed:
```c
utils.monodroid_store_package_name (application_config.android_package_name);
```
Changing `fieldAlignBytes` to 8 adds padding that prevented my crash. But I don't know if this is padding too much. (or just wrong in a different way!)

Here is the latest assembly:
```assembly
	.arch	armv8-a
	.file	""environment.arm64-v8a.s""
	.section	.rodata..L.str.1,""aMS"",@github,1
	.type	.L.str.1, @github
.L.str.1:
	.asciz	""com.xamarin.android.helloworld""
	.size	.L.str.1, 31
	.section	.data.application_config,""aw"",@github
	.type	application_config, @github
	.p2align	3
	.global	application_config
application_config:
	/* uses_mono_llvm */
	.byte	0
	/* uses_mono_aot */
	.byte	0
	/* uses_assembly_preload */
	.byte	1
	/* is_a_bundled_app */
	.byte	0
	/* environment_variable_count */
	.zero	4
	.word	8
	/* system_property_count */
	.zero	4
	.word	0
	/* android_package_name */
	.zero	4
	.xword	.L.str.1
	.size	application_config, 32
	.section	.rodata..L.str.2,""aMS"",@github,1
	.type	.L.str.2, @github
.L.str.2:
	.asciz	""0""
	.size	.L.str.2, 2
	.section	.data.mono_aot_mode_name,""aw"",@github
	.global	mono_aot_mode_name
mono_aot_mode_name:
	.xword	.L.str.2
	.section	.rodata..L.str.3,""aMS"",@github,1
	.type	.L.str.3, @github
.L.str.3:
	.asciz	""MONO_GC_PARAMS""
	.size	.L.str.3, 15
	.section	.rodata..L.str.4,""aMS"",@github,1
	.type	.L.str.4, @github
.L.str.4:
	.asciz	""major=marksweep""
	.size	.L.str.4, 16
	.section	.rodata..L.str.5,""aMS"",@github,1
	.type	.L.str.5, @github
.L.str.5:
	.asciz	""XAMARIN_BUILD_ID""
	.size	.L.str.5, 17
	.section	.rodata..L.str.6,""aMS"",@github,1
	.type	.L.str.6, @github
.L.str.6:
	.asciz	""7a9af6a4-a48d-4dbd-8614-bae2ea47544a""
	.size	.L.str.6, 37
	.section	.rodata..L.str.7,""aMS"",@github,1
	.type	.L.str.7, @github
.L.str.7:
	.asciz	""XA_HTTP_CLIENT_HANDLER_TYPE""
	.size	.L.str.7, 28
	.section	.rodata..L.str.8,""aMS"",@github,1
	.type	.L.str.8, @github
.L.str.8:
	.asciz	""System.Net.Http.HttpClientHandler, System.Net.Http""
	.size	.L.str.8, 51
	.section	.rodata..L.str.9,""aMS"",@github,1
	.type	.L.str.9, @github
.L.str.9:
	.asciz	""XA_TLS_PROVIDER""
	.size	.L.str.9, 16
	.section	.rodata..L.str.10,""aMS"",@github,1
	.type	.L.str.10, @github
.L.str.10:
	.asciz	""btls""
	.size	.L.str.10, 5
	.section	.data.app_environment_variables,""aw"",@github
	.type	app_environment_variables, @github
	.p2align	3
	.global	app_environment_variables
app_environment_variables:
	.xword	.L.str.3
	.xword	.L.str.4
	.xword	.L.str.5
	.xword	.L.str.6
	.xword	.L.str.7
	.xword	.L.str.8
	.xword	.L.str.9
	.xword	.L.str.10
	.size	app_environment_variables, 64
	.section	.data.app_system_properties,""aw"",@github
	.type	app_system_properties, @github
	.p2align	3
	.global	app_system_properties
app_system_properties:
	.size	app_system_properties, 0

```"
"@github I posted that on the wrong pull oops.

> OK, What if the text and cursor colour are the same? I think we need an inverted colour option.
> ![ezgif-3-36a078a58589](https://user-images.githubusercontent.com/34898242/83835414-d6b4a880-a744-11ea-9d81-8bfd420f22f8.gif)
> Or maybe as in Ubuntu:
> ![Annotation 2020-06-05 160203](https://user-images.githubusercontent.com/34898242/83835914-28a9fe00-a746-11ea-87e7-bd4b46a4fe47.png)
> This exchanges the text colour and background colour in the ""characterspace"".


"
"I decided to implement this option because my analysis was wrong.
First I tried to overwrite the `ToString()` because it's more lightweight.
However, I realized that this does not work for baggage: 
https://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.cs#L317

Also I decided to add the instance as ActivityProperty because then I've only to create one instance (not an instance per call)."
"This looks wrong, the `#if` just above means this line isn't compiled for watchOS. Maybe the `#if` needs updating?"
I don't think we need to pretend we know what is wrong. A simple error message that file xyz could not be loaded would work
It would be better if instead of `IsAny` you matched the values it should receive to be sure we for example don't send in wrong deviceName or something.
I'm not crazy about it... Especially because I need to match up the variable with the value on the right-hand side to see what its default value is.
"It is wrong to use `bbNext` of a `BBJ_RETURN` block if you're considering flow. You can use `bbNext` of a `BBJ_COND` block to consider the fall-through (non-branch-taken) path, but there is no fall-through for a `BBJ_RETURN`. It shouldn't matter where the 2nd `BBJ_RETURN` exists in the flow graph. Should this really be `b3 = b1->bbJumpDest`? Does anywhere currently check that is the case? "
"I don't follow the ""no meaning"" thing. Isn't the idea that this might not get it right, but the user can just Ctrl+Z if it does something wrong?

Also I think transforming to `$""goo{x + y}bar""` would be the better transformation in this case."
"```suggestion
            Assert.True(msg.Verify(DefaultKey, s_sampleContent), ""Calling Verify with the correct content"");
            Assert.False(msg.Verify(DefaultKey, wrongContent), ""Calling Verify with the wrong content"");
```"
these three assertions look wrong right now.
"OK, so this is broken because of webpack. They wrote `/** @github {keyof LogType} LogTypeEnum */`. `LogType` is `string`. That is `keyof string`. That is wrong. They need to write, instead, `/** @github {keyof typeof LogType} LogTypeEnum */`. Not really sure why this doesn't error in however they're testing their types, but it should.

cc @github just so yall know"
"wow, this is one of 3 lines with a non-type change in this file. That's crazy!"
type resolution was wrong before and was resolving to the mkdirp types in the typescript repo root.
"This seems wrong. Why would it be available in any expression context if it's only valid on declarations?
"
"I have no idea what is this ""comment recalled"" business. It looks like CodeFlow is going crazy. 

---

In reply to: [64255531](https://github.com/dotnet/roslyn/pull/11493#discussion_r64255531) [](ancestors = 64255531,64255223,64254529,64253737,64252591,64250908)
"
"should we throw here if not all name were consumed? Clearly there is something wrong with the metadata.
"
"Thank you, I've done that. Just doing a local build and test run.

Must have done something wrong. 0 Failures to 7619 Failures.
"
"We'll just have to disagree here. If the team has problems reading multi-line boolean expressions then I think we have a bigger problem. You're advocating turning simple and functional boolean expressions into multiple imperative if statements with temporary variables. I think that is exactly the wrong way to go. Whenever I see those I always wonder if I'm missing something subtle (which imperative code is full of), because otherwise it would just be written as a simple boolean expression.
"
">Okay, I think I found the issue...It looks like I was calling copyLeadingComments twice. Oops! Glad the test caught that. Running all tests again locally before pushing.

It looks like you delete the wrong `copyLeadingComments` duplicate, but otherwise looks good."
"I'm not crazy about the use of type `never` for the variable (recall, `never` is assignable to *anything*). The `never` type is supposed to represent values that never exist, but clearly the variable does. I think it would be better to use type `undefined` and verify that the variable has no initializer. That would then reflect the true type of the variable and would ensure nothing other than `undefined` is assignable to it."
"FWIW: the failing tests here are present on master and probably every other branch too (covering whatever might be right or wrong about my implementation here). They look like this, if this is the first time you hear of them:

```
> ./node_modules/.bin/gulp runtests
[08:28:36] Using gulpfile ~/vc/TypeScript/gulpfile.js
[08:28:36] Starting 'runtests'...
[08:28:36] Starting 'generateLibs'...
[08:28:36] Starting 'buildScripts'...
[08:28:36] Finished 'generateLibs' after 194 ms
[08:28:37] Finished 'buildScripts' after 369 ms
[08:28:37] Starting 'generateDiagnostics'...
[08:28:37] Finished 'generateDiagnostics' after 579 μs
[08:28:37] Starting 'buildShims'...
[08:28:37] Starting 'buildDebugTools'...
[08:28:37] Finished 'buildShims' after 303 ms
[08:28:37] Finished 'buildDebugTools' after 303 ms
[08:28:37] Starting 'buildTsc'...
[08:28:37] Starting 'buildTests'...
[08:28:37] Starting 'buildTypescriptServicesOut'...
[08:28:37] Starting 'buildServerLibraryOut'...
src/harness/vfsUtil.ts:666:47 - error TS2345: Argument of type 'string' is not assignable to parameter of type '""ascii"" | ""utf8"" | ""utf-8"" | ""utf16le"" | ""ucs2"" | ""ucs-2"" | ""base64"" | ""latin1"" | ""binary"" | ""hex"" | undefined'.

666             return encoding ? buffer.toString(encoding) : buffer;
                                                  ~~~~~~~~


Found 1 error.

[08:28:40] 'buildTsc' errored after 3.1 s
[08:28:40] Error: Process exited with code: 1
    at ChildProcess.<anonymous> (/Users/jhs/vc/TypeScript/scripts/build/utils.js:54:28)
    at ChildProcess.emit (events.js:311:20)
    at ChildProcess.EventEmitter.emit (domain.js:505:15)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)
[08:28:40] 'runtests' errored after 3.84 s
[08:28:40] The following tasks did not complete: buildTests, <series>, <series>, buildTypescriptServicesOut, buildServerLibraryOut
[08:28:40] Did you forget to signal async completion?
```"
"Uri just has the 4 fields (`_string`, `_originalUnicodeString`, `_flags`, `_info`). The other fields were getting cleared already, just not `_originalUnicodeString`.

In the past, this wasn't the problem as there was an extra flag check when accesing `_originalUnicodeString` that was removed in #33044. The field was set to a value of a wrong Uri, it was just never accessed."
"> For some reason it's now the default setting for PlaintextPlatform and JsonPlatform benchmarks (I believe that it's wrong, we then have 1 epoll thread per core, not 1 per 30 cores which is the default setting that 99.9999% of our customers are using in production)).

99.9999% of our customer don't use Platform variants either ;) We made it the default for these 2 benchmarks as it makes them faster, so this is what we are setting on TE and what we are tracking. The middleware variants don't have this flag, so do not the other Platform ones.

I still want to track this one since it's the one we'll submit to TE if it's faster, but if you prefer them to be without this ENV by default I can add the special ones as a new scenario name also in the charts. "
"Hmm, I must admit this is the first time I'm seeing an ilasm test failure. This was certainly not the purpose of the new test, I suppose I should just mark it as ilasm-incompatible for now until the problem is understood; can someone please give me some pointers on how to run ilasm testing locally so that I can investigate what's wrong with the test? I guess that most likely the problem is that this is a ""forced Crossgen2"" test and if the test does something like ildasm followed by ilasm, applying that to a R2R executable certainly won't produce an identical result."
">  we don't have a single coreclr alpine/musl test leg

coreclr test legs are relatively expensive with the current test setup. I am not sure whether it is intentional or not, but it does not sound wrong to me that there are no apline/musl legs in the default PR CI matrix."
"> In total more than 3 hours for PR validation, that's crazy :O

/cc @github "
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

I was looking at what events & counters may be useful to add to connection pooling (https://github.com/dotnet/runtime/pull/66605#discussion_r828305848).

For some things, it would be useful to have a reference to every `HttpConnectionPoolManager` in the process.
Having such a list would make it possible to improve a few things:
- Reduce per-request overhead of tracking stats like `http11-requests-in-queue`
  - Doing such tracking inline during the request isn't prohibitively expensive though
- Simplify the cleaning & heartbeat timer logic across pools
  - A single timer can be used for the whole process, instead of toggling timers per manager instance
- Simplify the `NetworkChange` notifications
  - A single notification is sufficient for all managers, avoiding the added logic around the callback registration cleanup
- Simplify other per-pool timer mechanisms
  - Recent example of issues that come along with that: #66782
- We avoid tracking some things like `http11-connections-current-total` when telemetry is disabled. As a result, you will see wrong values if you turn telemetry on later on during the process's lifetime.
  - With a global list, we can always know the correct value

This PR adds such a collection `HttpConnectionPoolManager.AllManagers`, uses a global timer for cleanup & heartbeats and a single `NetworkChange` callback.

Cases where this approach may have a higher overhead:
- You have A LOT of `SocketsHttpHandler` instances that are completely idle (without a single pool)
- You have a lot of handler instances, but your cleaning/heartbeat intervals are really high, making the 1 Hz scanning more expensive

Opening as a draft to gather feedback on whether we think such a change is a horrible idea.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>MihaZupan</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>MihaZupan</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Http`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>7.0.0</td>
  </tr>
</table>
</details>"
"Any icalls we change the signature of like these need to have their name changed, because any third party callers (like blazor, uno etc) will crash or corrupt the heap by passing the wrong number of arguments (or reading a return value that isn't there). The convention I selected is a 'Ref' suffix at the end of the name for C#/C methods, and for JS methods either 'ref' (if they take a MonoObjectRef) or 'root' (if they take a WasmRoot)"
"> These asserts are generic signs of GC heap corruption. A bug introduced in common parts (e.g. parsing/formatting) can lead to intermittent crash like that.

I'd speculate there may be another issue with `Unsafe.As` then and there is still something wrong with https://github.com/dotnet/runtime/pull/69204/commits/7666952d06c1280d0f0c8c117d599a76df4c0a8d

There was a similar issue exposed by making `Unsafe.As` ""intrinsic"" that was fixed in https://github.com/dotnet/runtime/pull/69271 and its possible this is another case that hasn't been found yet."
"> If we're planning on handling this as an ""internal"" navigation attempt, we'll also have to confirm that PDFs are supported on webviews across all platforms. Not a big deal, but just calling it out.

Do you think it would be fine to just load all ""internal"" URLs in the webview by default? If the developer can override this behavior, it seems to me like it would be overreaching a bit to decide which file types we should and shouldn't load in the webview by default (but I could be wrong about this)."
I think it's actually just being slow... watching the graphs on the storage account itself there's a huge spike in egress and latency when you kick off your builds.   (edit : I'm wrong here)
"Just to check, what are the possible scenarios where this might conflict unexpectedly with other things a developer might be doing? Are they safe to have their own separate `UseStaticFiles` calls with different options elsewhere?

Not saying it's the wrong design - just want to get my understanding right."
"This is now correct. The comment was wrong before because it would restore the default `--all` projects, plus the gRPC (Interop) projects."
"@github : After removing the commented our code, it would not pass the checks. Could you please advise what might have gone wrong, could this be something on the CI side?"
"~~@github I'm still getting warnings from a disabled analyzer. Can you give a look?~~

Fixed. Had a wrong severity value :smile:"
These conditions are still wrong. Looks like the baseline generator in 5.0 is not up-to-date with the one in 3.1. I'll fix this as part of this PR.
yes.  that's totally wrong.  will fix.  ack!
"This doesn't need a public constructor. Caching this on the constructor is wrong since values can change after the first `ToString` call has been issued.

We also don't need to use `Lazy` as this code is not used in a multi-threaded context."
"OK, I've been looking into this, and was able to reproduce the problem with fractional heights by using the following test case in `FetchData.ts`:

```razor
@github (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style=""overflow-y: auto; height: 200px; border: 1px solid red;"">
        <Virtualize Items=""forecasts"" Context=""forecast"">
            <div style=""border: 0.2px solid green"" @github=""forecast"">
                <span>@github.Date.ToShortDateString()</span>
                <span>@github.TemperatureC</span>
                <span>@github.TemperatureF</span>
                <span>@github.Summary</span>
            </div>
        </Virtualize>
    </div>
}
```

I also changed the underlying data source to supply 500 items. Without your fix that uses `getBoundingClientRect`, the behavior goes wrong when scrolling quickly because it misjudges its location within the scroll range because the rounding errors add up. In the example above, it just stops adding new items after a certain point, so the user scrolls into a blank white region.

Then, after adding your fix that uses `getBoundingClientRect`, the problem goes away. I could no longer repro any weirdness in the above example.

So, my remaining two questions are:

 * **Why would it be better to use the developer's own provided `ItemSize` value?** It's hard to see how the developer would be able to give a more accurate value than you're calculating at the subpixel level. Your value is more accurate than what's displayed in the browser dev tools, which round to 2dp.
    * Do you have any repro scenario where things still go wrong after applying the `getBoundingClientRect` fix?
 * **Do we care about supporting the case where the developer fails to provide `@github`?** I found that, if not providing that, the scrolling sometimes goes mad and continues scrolling even after I release the mouse wheel. It's a bit worrying because I don't have an exact reason for why it happens or why `@github` fixes it, or if there might be some case where `@github` doesn't fix it.
    * My best guess is there may be some heuristic within the browser whereby when using wheel scrolling (or perhaps with drag scrolling too), it picks an end point that lines up with one of the existing elements, and continues scrolling until that point is reached. But if we're not using `@github`, then it never reaches that point because we keep moving the target element further in the direction you're already scrolling. If this guess is correct, it explains why `@github` fixes it (because the target element gets removed from the DOM and the process ends). However this guess doesn't predict any good solution other than `@github`.
      * For my own future reference: we did consider forcing the equivalent of `@github` by wrapping each item inside a region with sequence number given by the index into the collection. However this behaves badly if items are inserted/removed, as it incorrectly would match/mismatch items against the earlier output. So it's better to force developers to give a `@github` manually corresponding to the actual collection entry or its ID.
    * Personally I think we could consider it a reasonable requirement that you must use `@github` for good performance and reliable scrolling. Certainly it's the most common case. It would just be great if we could avoid the weirdness in the non-key case too, or somehow detect the failure to use `@github`, but don't have a good suggestion for doing either right now.
"
This is definitely wrong.
">Dim identifier = SyntaxFactory.IdentifierName(NameOf(Enumerable.Cast)) [](start = 24, length = 70)

This looks wrong, I don't believe VB ever uses Cast to convert to the type stated in the As clause. It is used only as an attempt to convert collection to queryable type and only with object as type argument. Several methods can be implicitly called on the collection, sometimes in a sequence, look at CollectionRangeVariableSymbolInfo structure. All information from that structure is sufficient and required to properly do the translation. No need to look at the syntax to check whether it has As clause or not."
Oops wrong one
indentation seems wrong here.
"Note: i still stand by that statement.  We should not be adding lots of complexity to features to handle a 0.0001% case.  We should be investing our efforts in the common cases that proviee high value, and adding support for things people will be doing all the time.  In htat regard, this PR is really helping out this feature.  It goes from being a basic ""i only support inversion in this one basic case"" to ""i support so many common flow control patterns"".  We shoudl not make that job much more difficult to just to support some esoteric cases that were literally dreamt up by a genius dev who loved finding these sorts of crazy cases for fun, but which don't actually come in in the real world :)"
Let's improve this post-Preview1. Mapping diagnostic id to a fix id one to one seems wrong as you can see in these repeating exports.
"I see and understand the risk now.

I don't speak enough languages to demonstrate a counter-example, but I would not be surprised to see one. I think the only thing that is ""right"" in the sense that it can't go wrong in this way is to just have separate resources for each of the ""several strings we show user here"".

How many strings are we talking about if we split them out. Unless it's insane, I'd recommend doing that and eliminating even having to worry about this.

@github What do you think?
"
this seems wrong.  if we have no parent (when does that happen?) we shuldn't consider this a control keyword.
"![image](https://user-images.githubusercontent.com/1408396/52883771-ae5d0100-3131-11e9-83da-e14d983bde9b.png)

It's saying look how it's now wrong"
">return this.WrappedSymbol.GetHashCode(); [](start = 16, length = 40)

nit: This _seems_ wrong but I don't have a good argument for why yet. Just a code smell. I don't suppose we can use `System.HashCode.Combine(this.Nullability, this.WrappedSymbol)`? "
"Its more subtle than that.

The default baseline instruction set is Sse, Sse2. However, the jit compiler is told to generate code assuming that it may use Sse, Sse2, Sse3, Ssse3, Sse41, Sse42, Lzcnt, Popcnt, and Pclmqdq. But if the compiler actually uses any of Sse3, Ssse3, Sse41, Sse42, Lzcnt, Popcnt, or Pclmqdq it will notify the crossgen2 managed code. That notification feeds into this logic and if so, we will then mark the method such that the generated code can only be used if the actual hardware supports the instruction set. That's all well and good, and considering that just about all hardware does support these instruction sets, we get crossgen R2R to generate ideal code for all these cases.

The less optimal case is where code attempts to use an Avx, or Avx2 feature, or such. In thoses cases, we will generate code as if the processor does NOT support the feature. In corelib, the idea is that we will audit our code reviews such that such a decision does not make the logic wrong (just slow) (This code auditing is already necessary for our current crossgen1 intrinsics support for corelib), but in the general case we cannot assume that the code will behave correctly if it runs on hardware that does support Avx, Avx2, etc. In that case, what this logic does is record the decision that Avx use was attempted and forbidden. Then the generated code will not be used at runtime, and the JIT will be invoked, if the hardware actually supports Avx/Avx2.

In addition, the --instruction-set argument allows adjusting the baseline instruction set. For instance, if the compiler is run with --instruction-set Sse42, --instruction-set Popcnt --instruction-set Lzcnt, --instruction-set Pclmqdq, then this logic will never kick in, and do anything, as the generated code will never exceed that of the baseline. "
"> I thought we were also parsing in class declarations for error recovery. Is that wrong?

We don't parse statements within a class or a namespace declaration.

---
In reply to: [382871052](https://github.com/dotnet/roslyn/pull/41706#discussion_r382871052) [](ancestors = 382871052)"
please wrap crazy lines :)
"Did the fixer make this change?  It appears to be getting the whitespace ""wrong""; we should validate that trivia is being handled correctly."
"It's based on Dan's numbers for both the downclocking impact (perhaps 30% over 700 microseconds or ~200 microseconds), and the speed advantage for AVX512F over AVX2 (about 400 microseconds at 128*1024). Dan's speed numbers are for relatively low clock rate machines (2.8 and 2.1 GHz), so I think on current hardware, the time difference may be lower due to higher clock rates on both.

I think it's just a rough estimate, but not very wrong.
"
"I got this wrong last time
```suggestion
    <PreReleaseVersionLabel>1</PreReleaseVersionLabel>
```"
"Just curious, what does this event mean, and why was `TextEditTextChanged` the wrong one?"
"This distorts results, for two reasons:

 1. The bitwise-and, possibly in an attempt to make the range positive, subtly distorts the number of results, due to there being one more negative number than there are positive (~~or two, if~~ because `long.MaxValue` is never returned).  If  `FullLong()` returned the correct range, the bitwise-and should be unnecessary.
 1. The modulus operator distorts the results, because usually `maxValue` will not be an integral factor of the range of the random.  [See this for a discussion, and the potential fix if modulus will continue to be used](https://stackoverflow.com/questions/10984974/why-do-people-say-there-is-modulo-bias-when-using-a-random-number-generator).

(comment edited because I was wrong about number distribution)"
"Crazy specific NIT: the rest of the comments match up with the comment verbiage at the top of the method. 

```suggestion
                // 4. Global analyzer config level
``` #Resolved"
"I thought it looked wrong to not have it, but I'll remove it and adjust the comments."
"> couldn't fund out how corelib windows (or any platform) specific build setup. It seems to me there is no windows specific build or so

cc @github @github @github please correct me if am wrong and point me in the right direction"
"This is in the wrong location, it must match the order of the enum"
argh I used the wrong one here it should be `AppHost::_HideTrayIconRequested`
"Yeah.. conveying things in text sucks! :blush: I try to use emoji - but it is still challenging 🤷 

I absolutely agree that @github's code is great as well! It is more a matter of taste: some ""extra safety"" at a price of some in memory checks. Given that this code is invoked only once upon user interaction which is slow by definition, I preferred to pay this price. 

"
"> inb4 some crazy app that's calling `SetConsoleScreenBufferInfoEx` in a tight loop
"
"Hmm, it seems like non of the other methods in this class has it, should I start the it or am I looking at the wrong place?"
indentation wrong.
"Crap I broke something in the merge, I think the automationPeer is getting torn down in the wrong order. It's crashing on close again. 💩 "
I think t1/t2 are swapped here.  I had them wrong in my last edit.
"Actually, I think the table is wrong here. Imo clicking on an item shouldn't expand at all. Open to feedback on that behavior though"
"This position came from MonoProxy.cs and it was read from Metadata, how this number could be wrong?
I will check the position but I cannot think why we would receive a wrong position."
"Looks wrong, but the package exists: cc @github @github "
ok good. at least set the last character in the buffer to `\0` right before calling `new String()`. this will protects against anything can goes wrong.
wrong `nameof`
Indentation is wrong
Nothing seems to be installed if ObjectiveSharpie is already installed (but with the wrong version)
It's a mistake; I copied from the wrong list.  Will fix.
"In general, if it is a check that ensures our internal code is doing the right thing - and the check can only fail if we have a bug ourselves - use Debug.Assert. For all other cases, e.g. where a public caller did something wrong, or a file had bad data, etc, use an exception."
"That's wrong, will fix."
"@github if it is the wrong branch, why not closing this one?"
"The commit in question (e729f9ca90a) had four changes, two of them touched by this PR and two more:

- AVPlayerItemMetadataCollector - The documentation shows it's use, so it's also wrong...
- SKCloudServiceController - Examples in swift suggest default constructor works as well, so also wrong.

Let me do a second PR for fixing those. Filed as https://github.com/xamarin/xamarin-macios/issues/8398"
"Well... at the moment it prefers `AssemblyName` and then falls back to file name without extension: https://github.com/microsoft/slngen/blob/main/src/Microsoft.VisualStudio.SlnGen/SlnProject.cs#L145

That said, I created an empty solution and added the project to it in Visual Studio to see what its default behavior is and... it uses the file name!?
```
Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Extensions.Logging.Generators.Roslyn4.0"", ""..\src\libraries\Microsoft.Extensions.Logging.Abstractions\gen\Microsoft.Extensions.Logging.Generators.Roslyn4.0.csproj"", ""{26CDFBB3-FA4F-4440-B365-A26214473519}""
```
I swear I made that design decision based on what VS does but I am wrong.  I can change the behavior in SlnGen or you can update this:
https://github.com/dotnet/runtime/blob/00dec437a43a1d11d6f3eecb4ab418c85fb86837/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/Microsoft.Extensions.Logging.Generators.targets#L5

to be:

```xml
<AssemblyName Condition=""'$(IsSlnGen)' != 'true'"">$(MSBuildThisFileName)</AssemblyName>
```"
"What I mean is that the code is incorrect (the comment correctly describes the incorrect behavior that is implemented here). The extent of the for-each variable on this block is the same as the controlled statement, not the foreach statement itself. Your change attaches a syntax node that has the wrong extent.

This will become a worse issue in C# 7, when we expect to have variables introduced in any statement that has a subexpression (e.g. declaration expressions or pattern matching). At that time I would expect this code to require revision. Better to attach a syntax node that has the right extent to start with.

The display class created for the foreach control variable _could be_ shared with the closure for any variables declared in the controlled statement. But it _could not be_ the same as for any variables declared in the expression of the foreach loop.

It feels to me as if the issue is the assertion, not the code.
"
`this.currentDirectory` on the editor service as a whole seems wrong to me.. when do you ever want the server directory to resolve a file reference... do not know what to do about it though.. I think the reason it works is that the editors always send us absolute paths. but it just seems wrong
"This is probably a dumb question, but isn't `watchers` a map?  Why would it have an `isInvoked` property?"
"It is tiny (2KB). This is the current pattern we use in compilers, I don't see what's wrong with it. The file will never change.
"
The pointer is wrong. can you please provide correct link Thanks. Unresolving this comment so that i can track this.
this is wrong. token indexes should be `guint32`
"> I believed that initializing Roslyn on the background thread with just evaluation data was safe because Roslyn wouldn’t in that case call IVsBuildPropertyStorage, but obviously that belief was wrong.

It's probably close to being there, honestly, but the legacy code still has various bits where we have to do evil things. Off the top of my head I don't recall what the precise contract was we ultimately ended up at, so it's possible we had agreed it was safe and then I forgot.

I'm OK doing a tactical fix if we have to, but it sounds like you might indeed have bigger issues at play here. Note that if you do want this for 16.8 it'd have to be merged into release/dev16.8, as 'master' is now 16.9 targeting."
I couldn't write code that produced the JSX error in my editor. It's not dependent on a particular version of React being installed is it? Maybe I was just using the wrong language service...
"Thank you for this PR.  It helped me eventually get an armel build.  There are a few issues, but not sure if its related to this or not.

1.)  The dotnet-runtime-6.0.0-dev-linux-armel.tar.gz contains the x64 libclrjit.so.  The nupkg contain the correct armel binaries.
The build output (-v verbose) shows it does the right thing at first, then overwrites libclrjit.so with the wrong version.

>    6:3>Done building target ""GetFilesToPublish"" in project ""Microsoft.NETCore.App.Runtime.sfxproj"".
>    6:3>Target ""PublishToDisk"" in file ""/home/jmorrill/.nuget/packages/microsoft.dotnet.sharedframework.sdk/6.0.0-beta.20609.9/targets/sharedfx.targets"" from project ""/home/jmorrill/core/runtime/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.sfxproj"" (entry point):
>        Task ""Error"" skipped, due to false condition; ('$(OutputPath)' == '') was evaluated as ('/home/jmorrill/core/runtime/artifacts/obj/Microsoft.NETCore.App.Runtime/Release/net6.0/linux-armel/output/' == '').
>        Task ""Copy""
..
>          **Copying file from ""/home/jmorrill/core/runtime/artifacts/bin/coreclr/Linux.armel.Release/sharedFramework/libclrjit.so"" to ""/home/jmorrill/core/runtime/artifacts/obj/Microsoft.NETCore.App.Runtime/Release/net6.0/linux-armel/output/shared/Microsoft.NETCore.App/6.0.0-dev/libclrjit.so**"".
...
>          **Copying file from ""/home/jmorrill/core/runtime/artifacts/bin/coreclr/Linux.armel.Release/x64/sharedFramework/libclrjit.so"" to ""/home/jmorrill/core/runtime/artifacts/obj/Microsoft.NETCore.App.Runtime/Release/net6.0/linux-armel/output/shared/Microsoft.NETCore.App/6.0.0-dev/libclrjit.so"".**"".

2.) The crossgen'd libraries seem to create incorrect code in the build process.  When I execute a simple console application there are odd floating point issues.  For example: Console.WriteLine(1f / 3f) would output ""0"".  A new Timespan would hold seemingly random values.
Rerunning crossgen (w/ readytorun flag) on the armel device fixed this. There are similar issues with AspnetCore.  I had to put the libraries though crossgen on an armel device to make them work w/o odd managed exceptions.  Makes sense with Aspnet as armel doesnt seem to be a supported arch in the build process.  I'm out of my depth on this, but I suspect crossgen might be generating armhf readytorun.
"
"Thanks, another question:
So imagine I somehow got a layout like this:
```
BB0 [IBC: 100]
  ↓
BB1 [BBF_RUN_RARELY]
```
The current algorithm will just make BB0 cold, am I right? I just wonder if it could notify that it's going to ignore IBC data for a block and make it cold and most likely something went wrong - or we'll just rely on `fgComputeEdgeWeights` for that?

"
"@github Added to the issue. I'll look for the review decision and go from there. I intended to just do a converter but then those were calling into Utf8JsonReader/Writer so I did those updates. That left it in a state where most things had `TimeSpan` support, but not all things. Felt wrong to leave it like that so I made it all consistent 🤷 "
"I think I will just modify this PR with the plan we decide on.

My understanding of the plan, please correct me if I'm wrong:

1. We leave a ""LibraryBuild"" warning in DependencyInjection that has a good warning message explaining that open generic types can be broken. Maybe even putting an `aka.ms` link to a doc explaining the situation.
2. We add a new runtime check to DependencyInjection that verifies when open generic types are used, they have matching `[DAM]` annotations to the generic types.
    a. The check is only enabled when a new AppContext switch (`Microsoft.Extensions.DependencyInjection.VerifyOpenGenericServiceTrimmability`) is set. By default it isn't set.
3. We enable `VerifyOpenGenericServiceTrimmability` when `PublishTrimmed=true` on the project.

We are recommending that app devs set `PublishTrimmed=true` in their .csproj when they plan on trimming their apps. That way feature switches like BuiltInCOMInterop are configured correctly even when F5 Debugging their untrimmed apps. And the analyzer runs during their build. `VerifyOpenGenericServiceTrimmability` is just another setting that gets defaulted with PublishTrimmed. That way devs will see any errors even before trimming their apps."
"> They look like infrastructure failures, or failures stemming from infrastructure failures.

I've hit the re-run button (which is available only for maintainers). I am afraid that the only other way of re-running the failed runs is by closing and re-opening the PR or by pushing anything to the repo (which kind of sucks)"
"> Just for my understanding, this is a difference between debugger-libs+debugger-agent, and icordbg+debugger-agent? And wasm uses the latter, and what uses the former? Please correct me, if I have that wrong!

In the older protocol we referenced the locals differently (always 0 indexed).  That changed with icordbg support to match the index from the debug info but it wasn't noticed as a breaking change. This just makes that change explicit by marking it as a protocol change and handling the old behavior when appropriate."
"Thanks, @github. I've updated the ref source as well, and retargeted to main for now.
To your point about there being evidence that maybe `null` *shouldn't* be passed in, or at least that other annotations are wrong, I see your point. @github is looking for an owner for this area that may be able to pursue this to make any additional corrections."
"> Font and Format seem to be working, but max and min date seems something wrong..
> 
> ```
> new DatePicker { MinimumDate = DateTime.Now.AddDays(-1), Date = DateTime.Now, MaximumDate = DateTime.Now.AddDays(1) };
> ```
> 
> this still allows me to select days and months
> 

This is a limitation of the WinUI DatePicker; it can only restrict the selectable years: https://docs.microsoft.com/en-us/windows/winui/api/microsoft.ui.xaml.controls.datepicker?view=winui-3.0#date-values

So the best we can do out of the box is set MinYear and MaxYear. Hopefully at some point we can include [support for the CalendarDatePicker](https://github.com/dotnet/maui/issues/1092), where MinimumDate/MaximumDate is more useful. 

"
"Oh, I was thinking what you meant by that and chose the wrong option. I have reverted it back and changed the test for it."
"I don't understand what you are saying. There are two #if, which one are you referring to. Also, I think the idea is to have just 
```
services.AddMicrosoftWebApiAuthentication(Configuration, ""AzureAd"")
;
```
if OrganizationAuth is configured but no API or Graph is configured? This is what's being done in the other templates. Is that wrong? cc @github"
"Is this faster than `foreach (var result in results)` because it skips something like checking-whether-the-list-was-modified on each read?

If so, then as a meta-point about this feature itself rather than your use of it here, it seems like a weird way of expressing the intent because there's nothing obvious in the naming of `CollectionsMarshal.AsSpan` that implies this, or provides any indication of what would go wrong if the assumption turned out to be false. Perhaps this is something we only expect advanced .NET devs to do and don't feel it needs to be made any more obvious."
"Fantastic, this PR adds just the thing I was looking for :D

Seeing that this PR was merged into https://github.com/dotnet/aspnetcore/tree/release/5.0-preview8, I assumed I would be able to find it on the aspnetcore preview feed in the `microsoft.aspnetcore.components.web\5.0.0-preview.8.20364.16` package, but I can't seem to find anything containing these bits. No doubt I'm looking in the wrong place or misunderstanding what branches get build where. 

Any pointers on where I might try these things out (ideally using a package feed)?"
"Looking at my build failure there, am I supposed to be checking in `blazor.webassembly.js` ?
Sorry for the dumb question, this really is out my comfort zone I'm learning a lot today but there's just _so much_ I'm not used to. it's a lot to take in!"
"You're benchmark is wrong. You're list has objects of type ```Type``` and you're trying to cast it to ```string``` in the first test.

The second test just checks for equality which is not the same thing."
"but, yes logic is wrong."
"I realize that this approach fails as well. Since the the x64 and and x86 builds happen in the same pipeline, we _**cheat**_ by only building native assets once for all platforms as part of just the x64 build.

Since we're building ARM64 in a separate pipeline that won't work.  Building the `Microsoft.AspNetCore.Server.IIS` package has native deps which relies on the native build having already run.

I can only think of some crazy ideas to fix this. I assume the build team wouldn't be happy with any of my suggestions 🤣 
- Move the entire ARM64 build into same pipeline as x64/x86
- RID-split the `Microsoft.AspNetCore.Server.IIS` package and build each rid in it's own pipeline"
"do we have fix-all tests that remove multiple declarators from a declaration (but not all).  I just want to make sure that works.  i.e. have 3 variable decls in the field, then have 2 of them pulled out while one remains.

(also, all the crazy VB cases)."
">lookupResult Is Nothing OrElse (Not lookupResult.IsGoodOrAmbiguous AndAlso (options And LookupOptions.NoSystemObjectLookupForInterfaces) = 0) [](start = 19, length = 141)

It feels like grouping is wrong here. Should ```(options And LookupOptions.NoSystemObjectLookupForInterfaces) = 0)``` be checked even when ```lookupResult Is Nothing```? #Closed"
"Whenever we want to decide on behavior changes in the server space we should:
- Look at what other servers do
- Think about adding flags if this is a breaking change

We have YARP as a front end that is mostly based on kestrel which means it needs to handle all sorts of crazy traffic."
Indentation looks wrong.
">It feels like the following warning is confusing  [](start = 50, length = 49)

Isn't that warning just wrong? `T?` is a nullable reference type, so `F3` can be left initialized, no? #Resolved"
"This looks like the wrong error code.  Neither `default` nor `(default, default)` is a type."
"> Since I'm only checking the declaration, none of those are valid... 

the primary issue i have is that you're just disabling due to a syntactic diagnostic.  But a syntactic diagnostic doesn't mean there is a problem. it just means a diagnostic placed on the syntax.  if you want to say ""disbale when there's something wrong syntactically"" then you need to check if it's actually an error."
Why hard code the culture fr-CA here? Not saying this is wrong but curious why this over the standard current culture?
"The primary goal should be for the platform assemblies to be self-consistent.

Everything else in the platform that deals with error codes delegates to `Interop.Errors.cs` on both Unix and Browser. Changing this assembly to be platform neutral is introducing inconsistency. It is not a huge deal for this one - just formatting of the error messages - but I believe it is going in a wrong direction."
"I must've read it wrong, ignore me."
"Looks more like a bug fix than a breaking change. We generated code to call the wrong (unrelated!) method before. Now the code causes the right method to be called. Please reopen if you still prefer it be documented in breaking changes.

---
In reply to: [437698623](https://github.com/dotnet/roslyn/pull/44025#discussion_r437698623) [](ancestors = 437698623)"
">comp.MakeTypeMissing(WellKnownType.System_IEquatable_T); [](start = 12, length = 56)

It appears that we are not testing realistic scenario. I might be wrong, but I believe regular lookup isn't affected by this helper. We want the type be missing for real. #Closed"
"That seems wrong? `editorIndex: event.target` is not correct or is it? `event.target` is the group identifier, not the index of the tab."
">RuntimeSupportsCovariantReturnsOfClasses [](start = 27, length = 40)

This feels wrong. It shouldn't matter in which runtime a test is executed. A test should be able any Target framework for a compilation and only the actual references should determine whether covariant returns are supported within the compilation. #Closed"
"@github thanks a lot for this awesome PR, overall great work, I really like it!

Feedback:
* debug toolbar is the debug floating widget with the pause / step action, so you are using a wrong name.  You should use probably a `debugView` prefix, or just a `debug` prefix, not the `debugToolbar`
* Can you please list all the colors you have added since we will have to name them correctly and @github can help here. Also list the comments you did which each color please.
* Did you verify that your changes do not break debug coloring across: debug views, debug console, debug hover?
* Did you verify that the default coloring is left as it was for both light, dark and high contrast theme?

Also assigning to @github for designer review and @github for review of color names.
I will review the code changes which look good from a bird's eye persepctive.

fyi @github @github @github "
"Took me a minute here. So the UI is used for either true, MRU, or inOrder. And false is no UI. The way it's described its sort of like ""true""/""mru"" = UI and MRU, ""inorder"" = ???? and in order, ""false"" = No UI. Like it's weirdly implicit that the UI is used for in order and explicit for the other two options. 

Or maybe I'm just crazy."
"> @github Or use grep.app (Extended view) wink GitHub search sucks...

@github Thanks for the recommendation! Unfortunately that gives the same result as the GitHub search in this situation. "
">method.ForceCompleteUnmanagedCallersOnlyAttribute() [](start = 24, length = 51)

Feels wrong to call this for a PE symbol. #Closed"
"hoenstly, my brain sucks.  i'm having trouble understanding `&& !(hideAdvancedMembers && ContainsAdvancedMembers)`.  can you break this into a local that is easier to understand.  "
"sorry, wrong repo"
"Dumb nit, but it would be nice to have all of this (except updating the settings) thrown into one of those test setup functions. Presumably we'll be doing this for _every_ test in this file."
String is wrong here: JitInlinePolicyProfile => JitInlinePolicyProfileThreshold
"Question: What should happen if the assembly contains `=`? `=` isn't a restricted character; an assembly named `foo=bar=baz.dll` is perfectly kosher.

What *will* happen is that things will *break* two lines down, because the assumption is that there is only one `=` on a line. If there are more than one, the first item is the assembly, the second is the value, but we'd *actually* have a line containing:

    foo=bar=baz=1

but then do `assemblyIdentityMap.Add(""foo"", ""bar"")`, which is wrong.

What we can *instead* do is reorder the values: instead of `ASSEMBLY=DIRECTORY`, do `DIRECTOR=ASSEMBLY`, then use the `string.Split(char[], int)` overload.

For example, if we instead had a line of:

    1=foo=bar=baz.dll

Then `line.Split(new[]{'='}, 2)` will return `new[]{ ""1"", ""foo=bar=baz.dll"" }`, which is fine.

This implies that the file format needs ""reversing""."
"I think here's the handlerType is wrong, because it can contain the assembly name."
"Other than `WriteConsoleInputAImpl` and `WriteConsoleInputWImpl`, it's potentially used in a few places in the `InputBuffer` class when moving `IInputEvent` records around (calling `IInputEvent::Create` on the result of a `ToInputRecord` call). I don't think those are likely to be a problem though.

`IInputEvent::Create` is also called in a couple of places in `InputStateMachineEngine`, but those are exclusively for keyboard and mouse events as far as I can see.

I think the rest are all in tests, which I didn't bother looking at, but I see now they've resulted in some test failures. Hopefully those are just tests that need to be updated, though, and not an indication that there's something fundamentally wrong with this approach."
"> I am not convinced that is a parser error. With several languages, backslashes
> need to be escaped _by the user_, not by the parser. For example JavaScript:

I'm sure it was not intended to be an error. Indeed it is still a possibility to preserve a quotation mark in an argument. But we already have an alternative by doubling them. And doubling the backslash is the way out with the current parser. But think about an argument like `""C:\program files\\""`.
Doesn't it feel wrong if the user has to double the last backslash only? And it's not the CMD shell which requires the double backslash...
@github is IMO absolutely right. It's easy to prove  that the app receives the `""C:\""` from my example above. Just print the command line that `GetCommandLineW()` returns. Various shells may require additional escaping in order to pass a final `""C:\""` to the recipient after internal parsing. But that's not ours. We have to ensure that the received arguments are parsed in a comprehensible way  that meets the user's expectations."
"In my opinion, the thing that's really missing in 1.0 is WT_PROFILE_ID (#3589  which cannot be discovered at all ... @github 

And since the VT color _queries_ were also never finished, there's no way to discover what crazy colors someone's using in their terminal"
"This feels ""wrong"", in that we're deleting something in a scope that differs from where it was allocated.  Shouldn't `mono_log_mask` (and `mono_log_level`!) be `delete[]`d in `MonodroidRuntime::Java_mono_android_Runtime_initInternal()`?  That way if (when?) `Java_mono_android_Runtime_initInternal()` is updated to use `mono_log_mask` *after* `setup_mono_tracing()` is called, it won't ""unexpectedly"" introduce a ""use after free"" bug?

Related: when `mono_log_mask` *is* deleted, shouldn't we set it to `nullptr` so that we'll get a SIGSEGV instead of a ""use after free"" bug?"
"Indeed, I copied the wrong blue. That's fixed now."
"`ClassLibraryMainLauncherRuns` is only relevant in that it is failing on main since d13d0f972a4eb663251b2a6b5a934c59a6789db1.

After fixing `foo.xml`, I get the `NullReferenceException` because `MyLibrary.dll` does not seem to be loaded at the time `ResourceManagerId.UpdateIdValues()` runs.

https://github.com/xamarin/xamarin-android/blob/b595e11bf4d4dff99ca09866a79f609645d889b9/src/Mono.Android/Android.Runtime/ResourceIdManager.cs#L9

So when `Resource.Layout.Main` is called, it has the wrong value which unluckily loads `foo.xml` instead:

https://github.com/xamarin/xamarin-android/blob/b595e11bf4d4dff99ca09866a79f609645d889b9/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.ProjectTools/Resources/Base/MainActivity.cs#L22"
"> This sounds wrong to me. If the long term plan is to allow the choice of ""none"", ""bright"", ""bold"", and ""all"", then the pre-1.10 behavior is ""bright"" rather than ""none"".

Sorry yea, that is a little confusing. Right now, there's only two values that the settings will actually accept - `bold` and `none`. `none` will still do the bright thing that we've always done right now, until we come through and actually add support for the `bright` setting. Then `none` will be (not bright, not bold). 

I'm not sure I can fiddle with the enum parsing enough in this PR to make it so the only options are some set of `bold`, `bright`, and `all`. Maybe this PR doesn't make any sense at all without also doing the bright setting (though that's harder 😕)"
"> Its a tad bit weird to use ""visual"" navigation when all you see is one pane, but presumably the person knows what their layout under the zoomed pane looks like.

Yeah, I'd agree with this assertion. Worst case, somebody can flail around for a couple seconds until they find the pane they wanted anyway -- the harm in choosing the wrong one is pretty small."
"Yes, but I was thinking, is this ever going to be """" ever? That might seem strange for the API user, and I did not want us doing something wrong, returning """" and end up with issues. (mainly, ""I don't want me changing this ever to do something stupid"" ;) )"
GitHub seems to be showing this in the wrong location. Search the diff/code for `resolvedURL` and you'll find the spot.
"[MacCatalyst (10, 14)] is wrong."
@github This feels so wrong. Any idea how can we remove this dependency?
"""The archive entry was compressed using an unsupported compression method."" is wrong because *the stream is not compressed* and not *is compressed with an unsupported method*."
"These contain a lot of language keywords that should not be localized (especially in the Rude Edit messages).  How are we going to annotate these so that they don't get translated?

For example, if I tried to type the following code in EnC:

```
Dim r = Aggregate x In {1, 2, 3} Into All(x < 4)
```

The rude edit message should contain the word ""Aggregate"".  It would be completely wrong if, for instance, in German, this was translated to ""Aggregat"".

If no such mechanism exists, then in my opinion, these should be hard-coded const strings (in the product code and in tests).
"
"What is wrong with the transforming? Did I implement the BlockReplacing wrong?
The `OptimizeConstCompare` method is guarded by `!comp->opts.MinOpts`
https://github.com/dotnet/runtime/blob/9dd21e4cc95beab491d76c0a68dc466d9a2b0e11/src/coreclr/jit/lower.cpp#L2816-L2818
Could you tell me what the opts are?"
"does the exception come from the set on `this` or the get on `other`? I think this test would still hold with `===`, but I could be wrong."
"So only tags named ""link"" has this special behavior ? Isn't this kind of arbitrary and unexpected behavior? Reminds me something I heard about an old windows version having a code like `if(process.name==='the sims'){increaseSomething()}`. 

What's the reason for this? Is it for IDEs trying to support link in JavaScript projects ? Is it really important to hack the parser like this so one or two IDEs have an easy way of locating the parent tag description and position to insert a link  ?  They can still implement that (although it's harder/hacky/slow for them) without this hack in the compiler... 

In which kind of projects are they trying to support @github ? Which reference syntax are these projects using , the usejsdocs.org one or TypeScript one?  

In the later case, these projects are already breaking usejsdocs ""standard"" so they should not be using @github or {@github} but something else

In the first case, then I assume the motive for this hack is to support IDEs  so they can *easily/fast* recreate the broken parent tag description and find the position to insert the anchor. If that's the case don't you think **they** should be responsible of solving their own problems? And if, as best case, they are just trying to solve the problem of jsdoc referencing once and for all, do you think this is the correct way of doing it?

If this is more or less right, then I'm worried that you didn't consider nor the compiler API user (for which BTW you introduced a breaking change), nor in the jsdoc writer for which TypeScript could provide typechecked references supporting refactors easily, and nor on typeScript developers since althoguh this change affected compiler performance minimally it shows performance place in this project priorities

I made an informal quick proposal  https://github.com/microsoft/TypeScript/issues/16498#issuecomment-508316922 and I would love to document in more detail discuss and implement it, but I would like first to know if such feature would be accepted ? 

I think TypeScript now has the opportunity to define the definitely and single way of document JavaScript APIs as other languages have, and a feature like this would help a lot in that direction. 

Don't take me wrong, I admire  this project's contributors , but this just surprise me, sorry for the long comment, thanks."
">  the instruction counts will be wrong in dumps which will be confusing

They are wrong currently because of `align` instructions as well. Although it will be good to fix it at one point, but I didn't notice it until I tried it today to double check. So, I wouldn't do this to just make dumps consistent. You can always output data in disasm to showcase what is going on. E.g. in below assembly code, we insert `align` instruction but then decided not to do the alignment. The ""instruction count"" doesn't take it out, but visually, you can see the `align` didn't happen because of `[0 bytes for IG03]` text.

<details>
<summary>40 instruction method</summary>

```asm
G_M22387_IG01:              ;; offset=0000H
       56                   push     rsi
       4883EC20             sub      rsp, 32
                                                ;; size=5 bbWeight=1    PerfScore 1.25
G_M22387_IG02:              ;; offset=0005H
       8B5114               mov      edx, dword ptr [rcx+20]
       488B01               mov      rax, gword ptr [rcx]
       3B5044               cmp      edx, dword ptr [rax+68]
       7558                 jne      SHORT G_M22387_IG09
                            align    [0 bytes for IG03]
                                                ;; size=11 bbWeight=1    PerfScore 8.00
G_M22387_IG03:              ;; offset=0010H
       8B5110               mov      edx, dword ptr [rcx+16]
       488B31               mov      rsi, gword ptr [rcx]
       3B5638               cmp      edx, dword ptr [rsi+56]
       7339                 jae      SHORT G_M22387_IG07
                                                ;; size=11 bbWeight=8    PerfScore 64.00
G_M22387_IG04:              ;; offset=001BH
       488B4610             mov      rax, gword ptr [rsi+16]
       448D4201             lea      r8d, [rdx+1]
       44894110             mov      dword ptr [rcx+16], r8d
       3B5008               cmp      edx, dword ptr [rax+8]
       7343                 jae      SHORT G_M22387_IG10
       8BD2                 mov      edx, edx
       488D1452             lea      rdx, [rdx+2*rdx]
       488D54D010           lea      rdx, bword ptr [rax+8*rdx+16]
       837A0CFF             cmp      dword ptr [rdx+12], -1
       7CD3                 jl       SHORT G_M22387_IG03
                                                ;; size=34 bbWeight=4    PerfScore 53.00
G_M22387_IG05:              ;; offset=003DH
       488B12               mov      rdx, gword ptr [rdx]
       488D4908             lea      rcx, bword ptr [rcx+8]
       E800000000           call     CORINFO_HELP_CHECKED_ASSIGN_REF
       B801000000           mov      eax, 1
                                                ;; size=17 bbWeight=0.50 PerfScore 1.88
G_M22387_IG06:              ;; offset=004EH
       4883C420             add      rsp, 32
       5E                   pop      rsi
       C3                   ret
                                                ;; size=6 bbWeight=0.50 PerfScore 0.88
G_M22387_IG07:              ;; offset=0054H
       8B4638               mov      eax, dword ptr [rsi+56]
       FFC0                 inc      eax
       894110               mov      dword ptr [rcx+16], eax
       33C0                 xor      eax, eax
       48894108             mov      qword ptr [rcx+8], rax
                                                ;; size=14 bbWeight=0.50 PerfScore 2.25
G_M22387_IG08:              ;; offset=0062H
       4883C420             add      rsp, 32
       5E                   pop      rsi
       C3                   ret
                                                ;; size=6 bbWeight=0.50 PerfScore 0.88
G_M22387_IG09:              ;; offset=0068H
       FF1500000000         call     [System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()]
       CC                   int3
                                                ;; size=7 bbWeight=0    PerfScore 0.00
G_M22387_IG10:              ;; offset=006FH
       E800000000           call     CORINFO_HELP_RNGCHKFAIL
       CC                   int3
                                                ;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 117, prolog size 5, PerfScore 143.83, instruction count 40, allocated bytes for code 117 (MethodHash=d4f7a88c) for method Enumerator[__Canon,Boolean][System.__Canon,System.Boolean]:MoveNext():bool:this
; ============================================================
```
</details>

> is there particular reason for concern about doing it this way other than it being new?

The reason I am reluctant is because the notion of updating the `insCount` is new and I am not sure if all the code of all targets (when we support armarch) is resilient to this. Nor we are not sure if we have enough test coverage to all possible affected paths. Errors can come not just from asserts but also silent bad code gen which takes time to debug and investigate."
"If indefinite length arrays are already inconsistently supported and you'd have to touch currently untouched code to fix it up, then a separate PR makes more sense.  If everything that would have to be changed is in this PR already, then we shouldn't merge code we know is wrong."
"As a new-comer to this code, it feels wrong to provide incorrect key sizes and results for ""IsValidKeySize"". When we are executing on Browser, I guess I thought it was better to straight-up be honest about which key sizes are valid. If someone had code that inspected these properties/methods and returned a nice error to the user supplying the wrong key size, but now gets ""PlatformNotSupportedException"" doesn't seem like a great experience.

thoughts @github @github ?"
That actually makes a lot of sense I did notice I approached this sort of the wrong way
"I believe I've addressed all your concerns, @github and @github, please take a look at the latest commit. the only thing I'm waiting on is the review from mono folks. @github I have no experience doing this; just let me know if I did something wrong."
"I'm concerned if we should maybe reset `_localEndpoint` to `null` in methods where we also reset `_rightEndpoint`:

https://github.com/dotnet/runtime/blob/f8e92ecfdd329d1f0c4a1ccc1ae494282d9a3050/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L2685-L2712

If I'm not missing anything there will be no user callback querying `LocalEndpoint` in case of failure, however we may end up adding internal code doing so in the future, for example in a tracing call like this:
https://github.com/dotnet/runtime/blob/f8e92ecfdd329d1f0c4a1ccc1ae494282d9a3050/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L1083

Such a call may enforce caching a wrong value for `LocalEndpoint` permanently, on the other hand it's probably very unlikely we do such a thing by accident. I wonder if it makes sense to add tests to ensure such failing async methods will not alter the sockets internal state in an unwanted way.

@github maybe you have some thoughts on this?"
"@github looks turning on the linguistic casing on Invariant cause it support Turkish casing too :-( this looks wrong behavior to me but I doubt Windows will change that. So, I'll close this PR and will try to fix the test instead for now. 

I am thinking when I work on fixing the ordinal casing, I'll make the invariant to use that ordinal casing instead. I can investigate more when I reach this point."
"The strategy of intrinsifyng random methods in up-stack libraries can quickly result into unmaintainable codebase.

Is it really that important to speed up json parsing by 5-10% with the interpreter?

I think we are striking a wrong balance between performance and maintainability here."
"> Regarding newline/whitespace handling, i'd be curious what this looks like for something like:
> 
> ```
>     /// <exception cref='System.NullReferenceException'>
>     ///     Something went wrong with nulls
>     /// </exception>
>     /// <exception cref='System.ArgumentNullException'>
>     ///     Something went wrong with an argument
>     /// </exception>
>     /// <exception cref='System.ArgumentOutOfRangeException'>
>     ///     Something went wrong with an argument
>     /// </exception>
> ```
> 
> Also curious how that compares to before this change, or how it compares to how summary and remarks are shown etc.

Honestly white spaces seems to be causing a lot of issues with the test that was preexisting, I am wondering if I really should just have the code just strip whitespace characters on the formatting as well. There might also be some places from my code that also gets subject to that just with something like this I think:

```cs
     /// <exception cref='System.NullReferenceException'>
     /// Something went wrong with <see langword=""null"">s.
     /// </exception>
```"
"Clearly I was wrong about the rules, then. This code executes today: [Playground Link](https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAdwE4EMAOBhANugZwIApN0MBbALkXTAE8BKRAbwChFPFUBTKEVEgj4iiAOoZMmHgBNWHLouBw4xZu0WauvfoMRlKAbgVaAvicTnTQA)

Probably worth testing all of the cases and see what's actually disallowed?"
"The alternative is to reject explicit tail calls when there is implicit widening. That's what the logic has been previously.

I took a look and ECMA-335 does seem to imply that tail. is permissible whenever the callee's return type is assignable-to the caller's return type, which covers these newly allowed scenarios if I'm not wrong.

I don't have a strong opinion. It should not be difficult to reject explicit tailcalls when types are mismatching on the JIT side. Do you think that's better?"
"@github it is kind of hard to asses the risk here, even though I believe this was wrong before and the fix should not introduce any failure modes. But none of our coreclr or libraries tests execute this code path, so the only testing that was done was using the unload of the XmlSerializer where the unload was consistently failing before this fix and I believe it is consistently succeeding after the fix.
The problematic code path is specific to unloadability and the comment that was there indicated that there is no need for added reference, yet it was adding one via the not obvious handling of references in the CollectibleAssemblyHolder. So the original call to Extract instead of GetValue seems like an overlook of that fact."
"@github/jit-contrib PTAL

There are some size regressions (https://dev.azure.com/dnceng/public/_build/results?buildId=1575482&view=ms.vss-build-web.run-extensions-tab) due to additional instructions to prepare addresses instead of addressing modes, but PerfScore diffs are much better, e.g. `libraries.pmi`:
```
Summary of Perf Score diffs:
(Lower is better)

Total PerfScoreUnits of base: 106196855193729.92
Total PerfScoreUnits of diff: 106196773347615.31
Total PerfScoreUnits of delta: -81846114.64 (-0.00 % of base)
Total relative delta: -650.56
```
NOTE x64/x86 diffs are unrelated (not reproduceable locally) - spmi job picked a wrong baseline jit for them it seems
"
"> > You may want to double check the funclet prolog generation as well.
> 
> Thanks -- I will check.

Yeah, it seems wrong. For the main method this bit of SP adjust happens in the Tier0 frame, but for funclets it has to happen in the funclet prolog, and type 5 frames are missing this bit."
"> You should rebase after #70922, and I think you need the same change for fiFrameType=5.

Ok. You don't mind that I am repurposing `genAllocLclFrame` like this? It is (more or less) allocating the ""tier0"" frame equivalent in the funclet.

I really need to revise arm64 to not need this crazy funclet padding, but it feels a bit risky to try doing that now."
Wrong comment.
@github Updated the PickerExtensions to change the wrong `ComboBox` type to `MauiComboBox`.
"So as you may notice, it is fixed! Yay! I could not understand why it did not affect anything else and then discovered that we are doing this all backwards. On all the platforms, we pass scaled pixels to the shapes, yet on Android we pass raw pixels. This means that all the shapes are wrong and we only notice with rounded rectangle.

I will fix this in a new PR and we can decide which is better/safer for now."
"VS did this. Shine on you crazy diamond 👍 "
I wrote the wrong thing. should have been 2.2.4. I update the PR
"**Edit: I'm wrong here. The existing attributes don't combine. Ignore below. It's been a while since I've looked at this area 😄**

---

All of the other matcher policies allow multiple attributes.

* HTTP method policy allows you to have `[HttpGet]` and `[HttpPost]`.
* Host matcher policy allows you to have `[Host(""*.contoso.com"")]` and `[Host(""contoso.com"")]`.
* Consumes matcher policy allows multiple.

Instead of one attribute with a collection of values, why not multiple attributes, and have a single value? That would allow

```cs
[Header(""x-version"", ""1"")]
[Header(""x-deprecated-version"", ""1"")]
[Header(""x-deprecated-version"", ""2"")]
[Header(""x-debug"")]
public ActionResult Whatever()
{
}
```

The endpoint would be valid if any of the metadata matches."
"Discussed this in earlier iterations. The code at https://github.com/dotnet/aspnetcore/pull/24983/files#diff-11c04732c491713f270956068b37ddf6L29-L30 means the 3.1 packages are still included.

That said, there's something wrong in this project and I'm working through it. One possibility is we may not want the 5.0 content in this bundle until 6.0 content gets a new TFM."
"> I'm on the fence about ValueTask. On one hand, RequestDelegate doesn't return a ValueTask and we're not returning an async value so we can just use Task.CompletedTask were appropriate. On the other hand, ValueTask gives us the most flexibility if we ever want to try anything crazy like returning pooled tasks for async operations. Of course, that's only worthwhile if whoever is awaiting the action doesn't immediately convert the ValueTask to a Task like the middleware pipeline would.

I think it should be `Task` since all of our existing APIs today are Task based. No point introducing friction here.

> What potential IResults are you thinking of that don't write a response? I know StatusCodeResult for example doesn't flush the response so something could completely change the response afterwards, but in practice it's effectively writing a response with the specified status code and an empty body the vast majority of the time.

I think keeping this close to what action results look like is a good thing. It also takes the HttpContext not the HttpResponse. On the pedantic side, writing to the response sounds like it's writing to the body."
"I understand wanting to fork the logic rather than make the cyclomatic complexity crazy, but I think this is too much repetition. Can we first validate that the last two characters are acceptable given whether or not `_enableLineFeedTerminator` is set, then slice the header before either the line feed or carriage return, then do the rest (like assert the line itself has at least 3 chars)?"
"> do you have an example where this could likely be wrong?

Aren't there cases when we simply don't know whether the name refers to a property, or to a method? #Closed"
"> Should this in some way respect the WaitForDataBeforeAllocatingBuffer setting at the transport layer? Or if not because it's the wrong layer, if such a setting was important there, is one important here?

Definitely possible to respect this setting but it would need more public API to flow the setting via a feature as part of the transport layer or have an https specific setting (it'd be a layering violation to flow this existing setting directly into kestrel). I didn't want to do either as part of this PR because it requires a new API and I didn't measure any performance difference is basic scenarios."
"> I am looking in the wrong place?

Probably the right place. It is not a goal to duplicate the lowering as compiler does, the goal is to accurately reflect the semantics, the order of evaluation and conditional nature of evaluation. 

---
In reply to: [190112981](https://github.com/dotnet/roslyn/pull/26994#discussion_r190112981) [](ancestors = 190112981)"
"I think I missed the return when I looked at this at first, and thus thought we'd continue with xml stream being the wrong length."
"Chatted and I'm just wrong here 😄 "
"I can't think of an obvious way it would happen. It seems you'd more or less have to have code under this lock modifying another Workspace or text buffer, and that one then simultaneously trying to update the registration of the original one again.

In any case, if I'm wrong, the dump will be easy enough to see what happened!"
"> Feel free to weigh in on the concrete syntax design in [dotnet/csharplang#1710](https://github.com/dotnet/csharplang/issues/1710). (edit: whoops, had the wrong issue ID)

Sorry, where in that thread is a discussion of the Roslyn syntax impl?  "
"I usually don't like doing that, since it implies that the framework we're building Roslyn and the frameworks Roslyn supports running against are the same. It's moot in this case, but we do see places where people think ""I have to upgrade what I build my analyzer with"" so they can use nameof, even though it's the wrong thing to do."
"Interesting that it would be a recommended approach. IIRC we don't support projects in that state, though I could be wrong."
"Yeah, this looks wrong. If my read of the spec is correct, the categorization of the receiver is non-moveable. So we shouldn't need to know if these are index expressions in the example

```C#
using System;

unsafe struct S
{
    public fixed double V[3];

    static void Main()
    {
        var s = new S { V = 
        {
            [0] = 0,
            [1] = 1,
            [2] = 2,
        } };
        
        Console.Write(s.V[0]);
        Console.Write(s.V[1]);
        Console.Write(s.V[2]);
    }
}
```

I think the problem may be in `Binder.IsMoveableVariable`. Initializers should create a BoundObjectOrCollectionValuePlaceholder and, by my read, that placeholder is always a local temporary and thus immoveable."
📝 All of these methods have the wrong return type annotation.
"The code here is obviously wrong due to checking `y` ⊆ `x` only.  I guess no one have been using it.
```C#
var x = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { ""foo"", ""bar"" };
var y = new HashSet<string>(StringComparer.Ordinal) { ""foo"" };
var comparer = HashSet<string>.CreateSetComparer();
Console.WriteLine(comparer.Equals(x, y)); // True (incorrect)
```"
"This looks to me like the wrong location of the code and makes it hard to understand the flow. We set the mode at the end of the function, so I would move this code block also at the end so that it is clear how the mode is set (either directly or via untitled editor input). "
"The PR goes in the wrong direction.

The purpose of my change was to introduce new icon names ('folding-expanded','folding-collapsed')  so that these can be themed individually by a product icon theme.
chevron-down/right are used at many places for various uses cases, not practical for themeing unless it's going too look like a chevron again.

So keep

const foldingExpandedIcon = registerIcon('folding-expanded', Codicon.chevronDown);
const foldingCollapsedIcon = registerIcon('folding-collapsed', Codicon.chevronRight);

and use `foldingExpandedIcon.classNames` or `foldingExpandedIcon.cssSelector` for wherever its class names are needed."
"Will we support filtering tests or any xunit parameters? Like `-notrait Category=Outerloop`? If so, this is wrong and should use `RunScriptCommand` in the MSBuild side to set this command."
"For whatever reason, Base Layer was not updating the UI when the SettingContainer reset button was clicked. I tracked the bug down to the macros (which was surprising, because the non-base layer profile pages worked just fine). Worked with @github to figure out what was wrong with the macros and these changes fixed it. 🤷‍♂️

We think the missing 'L' might've improperly concatenated ""Has"" and \<name\>, and the notification that gets fired is silently ignored because nothing matches the garbled up ""Has\<Name\>""."
"Is this correct? Type is `uint` (32 bits) but you're rotating by 57-63 positions. It [works](https://dotnetfiddle.net/9kXObi), don't get me wrong, but it's just thanks to this C# feature: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#shift-count-of-the-shift-operators."
"Ditto all of these.  If *any* `log_fatal()` call is hit because something went wrong, we should just *die immediately*, not...muddle through at runtime with all of these return value checks."
"@github I was wrong the performance gain from this PR being very limited. With the initial work in #10596 done on my experimental branch, this PR leads to ~10%+ in throughput (3.6s -> 3.3s). And even after the fix the comparison is still somewhat expensive.

Let's just leave the PR here and I can come back to this later."
"`AccessViolationException` is always wrong (memory corruption), we should not be causing that in any case.
By any chance do you have details of this exception? Dump maybe?"
"> Is the code we use to enable ""acrylic"" the same code that is just suddenly ""mica"" on Windows 11? Or do we need to make opacityStyle: vintage | acrylic | mica?
> 
> (Also isn't the name now... misleading? Ugh.)

I'm not sure that mica has configurable opacity? Could be wrong about that. I'm generally punting the Mica question till next yearish, since it'll be a while till we can use that at all. It might be something like ""backgroundMaterial: solid|acrylic|mica"", I haven't given it thought (and is the reason I closed #5772)"
"That sounds like our targets are wrong then, look at the csproj"
"The path is wrong here, should be System.IO.Compression.ZipFile.Tests/tests, though I just checked our analytics and don't see any failures of Brotli or ZipFile on Android in the last 7 days, so maybe we don't need this?"
"Whenever `NSString` constants are used with enum-like macros or a subclass of `NSString` is used inside ObjC headers.

An API that accept `NSString` is not very useful (e.g. code completion) to _discover_ the right values. For such API we use a _smart_ enum that maps the members with constants. It's _smart_ because the mapping code is generated automatically (so you can't get it wrong by copy/pasting code or forgetting some entries...)"
"> output of the program suggests that with the exception of procfs, all base types are reported correctly and we have them in `enum UnixFileSystemTypes`:

[self correction] this was wrong, as we do not have these:

```
ctfs
dev
objfs
sffs
sharefs
```

I added some of these from SmartOS in #34867, but seems like OpenIndiana has more variety."
"Thanks. I was looking at the wrong `ImmutableSegmentedDictionary` (non-generic one is a class).
Check to see what Aleksey thinks, but I would rather wrap the struct and stay in a less error-prone concurrency pattern."
This structure has nothing to do with stack. Is the comment wrong?
"Wrong sorting?
"
"Hrmm... What's the type of ""Items""?  If it's IEnumerable, that's probably not good (since we probably don't want realization of something lazy on the wrong thread).  If it's List, then is this to just get our own copy?  Perhaps we shoudl type '.Items' as ImmutableArray?  That way the values are realized, and we don't ned to make a copy?
"
"This is wrong. "
"Not sure if the perf impact is observable whatsoever here, but my rule of thumb is that if the issue is a lack of expressiveness or intelligence in the language, use `!`. Writing runtime-manifested code in TS that you would never have written in well-authored but unchecked JS feels wrong to me, and if we ever introduce a feature that allows select callbacks to be inlined into control flow, we would want this location to be subject to the `@github/no-unnecessary-type-assertion` rule."
"> I understand that approxparents is being passed correctly, but why isn't it preventing the exact type load?

This is a type that has never been loaded before, and approxparents doesn't help in this case of server GC (and AFAIK, not even with regular GC). The issue with server GC is that it doesn't have a valid `Thread` object associated with its thread, and the TypeLoader uses that `Thread` object in its locking logic. Without one, we AV right now. Even without server GC, in a checked build, we will hit this debug only code here: https://github.com/dotnet/runtime/blob/master/src/coreclr/src/vm/siginfo.cpp#L1104, which uses the `DontLoadTypes` flag, and we'll hit the assert right after this call because we'll get back a null TypeHandle.

My understanding is that approxparents won't help if the type has not been previously loaded to at least approxparents, because we should never be allowed to create types (not even to the level of approxparents) during GC. Please correct me if my understanding is wrong.

One possible easy way to fix this is to handle the null `Thread*` case, to avoid the AV, but I believe this would be a hack to mask one of the symptoms, and the bottom line is, we should still never load any type during GC. So I don't think this would be a correct fix.

I currently see 2 patterns here where we could be calling into a MethodDesc's entry point without potentially loading the valuetypes in the signature:

1. Entry points returned from dictionary lookups that we directly call into (Ex: delegates. I haven't verified that the bug exists in this scenario though).
2. Entry points returned by the `JIT_VirtualFunctionPointer` helper (the case of this bug here)

In these two cases, when jitting the callers of such methods, the JIT is dealing with the canonical version of things, so all the places where the JIT/JIT interface calls into the `classMustBeLoadedBeforeCodeIsRun` won't help.

The possible fix I see here is to call the `MethodDesc::WalkValueTypeParameters()` on these MethodDescs for which we return an entry point out of the two lookups I mentioned above, and load valuetypes in the signature to at least approxparents level.

If this doesn't feel like the right thing to do, this means that when we load these MethodDescs on the TypeLoader side, we should perform this step of walking the parameters and loading them, but this could be an overkill, and I think it might be better to perform that kind of loading only when we're about to execute the methods.

@github, @github  I'd like to get your thoughts on this proposed fix. If you'd like, I can post an updated PR with what I'm proposing for clarification."
"When running some of our `EFCore.Jet.FunctionalTests` with the latest nightly-build `5.0.0-preview.3.20171.3` of `System.Data.OleDb`, the test host often crashes in a non-deterministic fashion (it did with previous nightly-builds as well).

As it turns our, the underlying cause is the following `System.AccessViolationException` exception, so it makes sense that this results in a non-deterministic crash behavior:

```
The active test run was aborted. Reason: Test host process crashed : Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at System.Data.Common.UnsafeNativeMethods+ICommandText.Execute(IntPtr, System.Guid ByRef, System.Data.OleDb.tagDBPARAMS, IntPtr ByRef, System.Object ByRef)
   at System.Data.Common.UnsafeNativeMethods+ICommandText.Execute(IntPtr, System.Guid ByRef, System.Data.OleDb.tagDBPARAMS, IntPtr ByRef, System.Object ByRef)
   at System.Data.OleDb.OleDbCommand.ExecuteCommandTextForSingleResult(System.Data.OleDb.tagDBPARAMS, System.Object ByRef)
   at System.Data.OleDb.OleDbCommand.ExecuteCommandText(System.Object ByRef)
   at System.Data.OleDb.OleDbCommand.ExecuteReaderInternal(System.Data.CommandBehavior, System.String)
   at System.Data.Jet.JetCommand.InternalExecuteDbDataReader(System.String, System.Data.CommandBehavior)
   at System.Data.Jet.JetCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1+Enumerator[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InitializeReader(Microsoft.EntityFrameworkCore.DbContext, Boolean)
   at Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteImplementation[[System.Boolean, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`3<Microsoft.EntityFrameworkCore.DbContext,Boolean,Boolean>, System.Func`3<Microsoft.EntityFrameworkCore.DbContext,Boolean,Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1<Boolean>>, Boolean)
   at Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute[[System.Boolean, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Boolean, System.Func`3<Microsoft.EntityFrameworkCore.DbContext,Boolean,Boolean>, System.Func`3<Microsoft.EntityFrameworkCore.DbContext,Boolean,Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1<Boolean>>)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1+Enumerator[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()
   at System.Collections.Generic.LargeArrayBuilder`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AddRange(System.Collections.Generic.IEnumerable`1<System.__Canon>)
   at System.Collections.Generic.EnumerableHelpers.ToArray[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Generic.IEnumerable`1<System.__Canon>)
   at Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserter`1+<AssertQuery>d__7`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon ByRef)
   at Microsoft.EntityFrameworkCore.TestUtilities.QueryAsserter`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AssertQuery[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`2<Microsoft.EntityFrameworkCore.TestUtilities.ISetSource,System.Linq.IQueryable`1<System.__Canon>>, System.Func`2<Microsoft.EntityFrameworkCore.TestUtilities.ISetSource,System.Linq.IQueryable`1<System.__Canon>>, System.Func`2<System.__Canon,System.Object>, System.Action`2<System.__Canon,System.__Canon>, Boolean, Int32, Boolean, System.String)
   at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AssertQuery[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Boolean, System.Func`2<Microsoft.EntityFrameworkCore.TestUtilities.ISetSource,System.Linq.IQueryable`1<System.__Canon>>, System.Func`2<Microsoft.EntityFrameworkCore.TestUtilities.ISetSource,System.Linq.IQueryable`1<System.__Canon>>, System.Func`2<System.__Canon,System.Object>, System.Action`2<System.__Canon,System.__Canon>, Boolean, Int32, System.String)
   at Microsoft.EntityFrameworkCore.Query.QueryTestBase`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AssertQuery[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Boolean, System.Func`2<Microsoft.EntityFrameworkCore.TestUtilities.ISetSource,System.Linq.IQueryable`1<System.__Canon>>, System.Func`2<System.__Canon,System.Object>, System.Action`2<System.__Canon,System.__Canon>, Boolean, Int32, System.String)
   at Microsoft.EntityFrameworkCore.Query.SimpleQueryTestBase`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Select_anonymous_empty(Boolean)
```

This is probably related to this issue here. I currently cannot say, whether this is a direct result of a wrong declaration of the `System.Data.OleDb.tagDBPARAMS` structure itself, or just a result of some other incorrect structure or behavior in OleDb, that will crash the app much later, but I would assume, it is the latter.

This mostly happens after at least 300 calls, but can happen after 700 calls or even never in our test runs.

Also note, that this behavior happens on an x64 test run, so there seem to be some issues with those as well and it might not be automatically the case, that the x64 structure definitions (or their marshaling) are correct.

Because of your 15K test suite, we are happy to test any fixes."
"@github looks good!

Looking at the test results, it appears that @github and I were wrong. Even though you add the simplifier annotation to the resultant node we see test case failures [like this](https://dev.azure.com/dnceng/public/_build/results?buildId=705352&view=ms.vss-test-web.build-test-results-tab&runId=21851220&resultId=101287&paneView=debug):

```diff
int i = 0;
-return i switch
+return ((int)i) switch
{
  1 => 4,
  _ => 7,
}; 
```

At this point I would change the PR to conditionally add the cast and file a bug that the simplification service does not kick in here."
"I have been thinking a bit more about this `TypeFlags.Intersection` check, and I think it is too permissive because the intersection could have unions as constituents. Here is an example:

``` ts
interface Target {
    x?: number;
}
interface A1 {
    a: any;
    x: string;
}
interface A2 {
    a: any;
    x2: string;
}
interface B1 {
    b: any;
    x: string;
}
interface B2 {
    b: any;
    x2: string;
}

var t: Target;
var s: (A1 | A2) & (B1 | B2);
t = s;
```

This assignment is supposed to fail, because no matter which side of the intersection you're looking it, there could be a union constituent where x has the wrong type (string instead of number). But because you are recursively diving into the properties of the unions as well as the intersections, you end up losing information about the property x. As a result, we allow the assignment, even though it is bad.
"
"currently we are tearing off `this` which might be wrong in cases if custom version of `CompilerHost` uses it in its implementation of `getCanonicalFileName`. Probably instead we can make `computeCommonSourceDirectoryOfFilenames` to accept `{ getCanonicalFileName(s: string): string }` so we can just pass `host`/
"
"The implementation in this PR is wrong, the filtering is done at the wrong place. Note that without your change, all programmatically suppressed diagnostics from suppressors will always go through the below code path and info diagnostics will be reported in binary logs for them, regardless of the value of this option: https://github.com/dotnet/roslyn/blob/a6b8bb581cac6b1016a45d1a50d96b60a0d584f1/src/Compilers/Core/Portable/CommandLine/CommonCompiler.cs#L560-L571

With your change, this will no longer be true when `ReportSuppressedDiagnostics` option is false. Note that **always** reporting these info diagnostics corresponding to diagnostics suppressed by suppressors was a **hard** requirement in the original design approval of suppressors. Without these info diagnostics in binlogs, end users would have no idea what caused their diagnostics to be suppressed.

The correct fix here would be to revert your changes and move out the filtering to be done just after the callsite inside `CompilationWithAnalyzers` to apply programmatic suppressions: https://github.com/dotnet/roslyn/blob/a6b8bb581cac6b1016a45d1a50d96b60a0d584f1/src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs#L468

Also, please add unit tests for this change.
"
"I think had the wrong idea about the semantics of r_join, so this doesn't work..."
"I think I have fixed all the bugs mentioned in `Status update: working through narrowTypeByTypeof, I’ve found a new batch of bugs.` and the just above one.
A little embrassed thing is that I find the similar case is in added test case, with wrong expected result! I would check all test cases again and call for help from others who are interested on this PR.
And the changes for simplicity and readability are pretty good, but I want to merge them little by little, from small to big, to make sure the test would not break suddendly.

Would @ ts team member when I think this PR is ready for review again.

----

edit1: 
Andrew totally gives three commits to simpilify and fix this PR. I have merged the first.
And the second is a little interesting, it use a new structure to describe the result of core function `getPropertyTypesFromTypeAccordingToExpression`, would try learning it tomorrow.

----

edit2:
I check my added test result and add expected type as comment, still need to check other changes."
"@github
> I'll need to fix the DT tests for `es-abstract`, as it has an `// $ExpectType` for the type of `Promise` which is now wrong because the order of overloads for the static `resolve` method changed in the lib (which is required to pick the correct overload in some cases).

I’ve now fixed that in <https://github.com/DefinitelyTyped/DefinitelyTyped/pull/47049>.

I’ve also future‑proofed the tests so that `// $ExpectType` is only used for interface‑based intrinsics (constructors and prototypes)."
"> I'm not so sure about that. I think there are legit scenarios which will never care about trimming, mostly complex apps with a shared framework like VS. Why should we limit everyone to a common ground if the needs are different for large and small apps?

I don't see the problem here to be honest. If a given app doesn't care about trimming that's fine. Some features will be ""broken"" when trimming (startup hooks as an example), those features will produce warnings. But if I can build my app without warnings its behavior should be consistent across all of the builds where I don't get warnings. I think @github take on this is the right one - the behavior will not be identical, different build configurations are intentionally modifying some behavior of the app (debug enables better debugging experience, self-contained changes deployment requirements, ...). But features which are not intentionally affected by the change of configuration should NOT be affected. Crazy example: building the app as Debug should not run it with a different default culture when compared to Release.

It's kind of hard to make a broad statement, since there will always be exceptions and gotchas, but I would much like to make a relatively simple statement about the consistency of behavior across different build/publish configurations. To me it's about expectations - clicking a single check-box in VS to enable single-file doesn't ""feel"" dangerous, so it should not break my app (or if it will, it should tell me -> warnings).

> Self-contained versus framework-dependent

I think that some verticals will not support framework-dependent and that's OK, but those which will should behave consistently across the two configurations. To that end the verticals which don't support framework-dependent should warn if I try to force it - building Blazor client WASM app should fail/warn if I explicitly state --self-contained false. (It actually does fail today, but for different reasons, which is not ideal)."
"Tagging subscribers to this area: @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

While I was looking at another issue, this looked wrong for the new osx-arm64 installer...



<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>sdmaclea</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>sdmaclea</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`arch-arm64`, `area-Single-File`, `os-mac-os-x-big-sur`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.0</td>
  </tr>
</table>
</details>"
"I'm not sure whether or not these errors are related to code I did or not? I'm not seeing what went wrong in ADO (though, I'm probably just reading it wrong)."
"Honestly, there's not much point waiting for an official build. It's just disabling the two failing legs of the build.

I can file an issue, I was trying to understand the fine detail on _why_ it's wrong first, so I'd at least have something beyond ""its broken :("" to file"
It looked to me like StackWalkFrames shouldn't throw any exceptions but I may be wrong. Should  I add an exception handler around it?
"Right, the FCall existed already but it was only ever being used to set the target to `null`. I'm definitely not a GC internals expert so I might be wrong, but from what I can see it would appear that the target of a dependent handle is stored in a `GCHANDLE` in the VM, which does seem to support updating the referenced object? As in, if `DependentHandle` is storing the target through a normal GC handle (although with the mode set to dependent), shouldn't the same functionality from `GCHandle.Target` apply here as well? Either way I'd love to learn more about this 😄

I guess we can ask @github to confirm this and then decide how to proceed with the API?
I'm thinking if this is actually supported then we might just need to decide how to prevent users from setting the target to `null` and then back to a valid object, or alternatively if it isn't we could just make `Target` a readonly property to fix the issue? 🤔"
"Tagging subscribers to this area: @github/area-system-io
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

## Customer Impact

Fixes a bug reported by customer via email, where an async read operation performed on a `FileStream` opened for **non-seekable device** file was throwing an `System.IO.IOException`: ""The parameter is incorrect"".

It turns out that `ReadFile` [doc](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfile#parameters) was wrong:

> For an hFile that does not support byte offsets, Offset and OffsetHigh are ignored.

And `OVERLAPPED` [doc](https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-overlapped#members) was right:

> This member is nonzero only when performing I/O requests on a seeking device that supports the concept of an offset (also referred to as a file pointer mechanism), such as a file. Otherwise, this member **must be zero**.


## Testing

We already had a test for that, but it's part of Outerloop and that is why the regression was missed:

```log
      System.IO.Tests.DeviceInterfaceTests.DeviceInterfaceCanBeOpenedForAsyncIO [FAIL]
        System.IO.IOException : The parameter is incorrect. : '\\?\hid#vid_0b0e&pid_24c8&mi_03&col02#b&92ae56&0&0001#{4d1e55b2-f16f-11cf-88cb-001111000030}'
        Stack Trace:
          D:\projects\runtime\src\libraries\System.IO.FileSystem\tests\FileStream\FileStreamConformanceTests.Windows.cs(209,0): at System.IO.Tests.DeviceInterfaceTests.DeviceInterfaceCanBeOpenedForAsyncIO()
          --- End of stack trace from previous location ---
    Finished:    System.IO.FileSystem.Tests
```

The test was used to ensure that it's passing now.

## Risk

Very low.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>adamsitnik</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`Servicing-consider`, `area-System.IO`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.0</td>
  </tr>
</table>
</details>"
"Everyone, thank you for the discussion, but this is not the place for it.  This PR is simply using a now-existing C# feature, it is not designing nor implementing that feature in the language or compiler (if the feedback were on how the feature was employed in dotnet/runtime, that would be appropriate here, but that's not what this discussion has become).  The C# language design team doesn't regularly pay attention to this repo, nor to specific PRs in this repo, and this is not where the community-at-large expects to find and discuss language features.  Feedback on a language feature on a PR in this repo will largely go unseen by the relevant folks.  If you would like to provide feedback on C# language design, the right place is https://github.com/dotnet/csharplang.  If you feel strongly that `!!` is the wrong design and/or could be improved, as I requested earlier please open an issue in https://github.com/dotnet/csharplang/issues to discuss it there, where language discussions are had and language decisions are made.  Thank you."
"Should we be passing this in instead of relying on a static? I can't think of a case where this would go wrong for wasm - but in general if we're telling others they can't have a static then we have to figure it out as well. "
"The braces are wrong, lol"
Ask a PM Manager what to do. Using the service icon is likely wrong.
"Well I guess I'm wrong, since the handle never gets mutated."
"Warning didn't seem appropriate since this happens with the default kestrel configuration. You didn't do anything wrong, or even opt-into HTTP/2, and the site will probably work fine without HTTP/2."
">>     The approach here with CopyWithPrivateKey will get exceptions if the cert file is a PFX and already had a private key, then you loaded a private key.

> Wouldn't that fail to load because we wouldn't even be passing a password to it?

If it had a NULL password or an empty password it will load using the simple ctor.  If it's a PFX with a password other than those two values, then it'd throw an exception for the password being wrong.

> I want to avoid forcing people to convert their certificate format to do this

In my experience (and certainly in the Linux+Let's Encrypt+certbot case) a PEM key is paired with a PEM cert; particularly because they'll use openssl commands, which use PEM output unless you tell it otherwise.

> this is something that I've seen used in other web frameworks too. (DER Cert + PEM key)

Can you give some examples?

> Will this be a problem as long as we check that the certificate loaded in advance doesn't have an associated private key or are there any other issues we should be aware of.

The X509Certificate2 constructor, much to my chagrin, doesn't do simple things.  It does complex things.  The input data can be:

* X.509 public key certificate, binary encoded
* X.509 public key certificate, PEM encoded
* (Not Linux today, bug should be fixed later in 5) A PKCS#7 SignedCms object, binary encoded, where the first signer cert is used
* (Not Linux today, bug should be fixed later in 5) A PKCS#7 SignedCms object, PEM encoded, where the first signer cert is used
* (Windows-only) An authenticode-signed exe, dll, msi, msu, etc, where the first signer cert is used.
* (Windows-only) The SerializedCert format (Windows-proprietary) and probably other things.
* A PKCS#12 PFX, binary encoded

If you really wanted to support both the binary and PEM encoding of a certificate, but restrict the inputs to more sensible things, you could use X509Certificate2.GetCertContentType to ask what it is, and only accept X509.  That still eliminates the case where you load a PFX and have a keyfile specified (and avoids writing the key to disk at all in that error case)."
"Is it possible we need a more explicit signal that the Blazor Server client-side code is wired up and ready to go?

Reacting to the WebSockets traffic is an indicator that things have started happening, but I'm not sure it guarantees that `blazor.server.js` has got as far as activating the link click interception. There might still be some time gap where it can go wrong.

We are a bit limited in what we can do when testing the templates, as we can't add any test-specific logic to the application being tested. If we're keen to solve this, one option would be something like getting PlayWright to wait until the DOM contains some artifacts that are specific to interactive rendering, such as the comment marker tags we put around component outputs, or even explicitly looking for the delegating event handler registered on the root element.

If you think this is sufficiently unlikely to make a difference then I'm fine with leaving it until we see reliability issues. Might be good to clarify the comment in the test sources though to at least state what kind of test reliability issue this logic is meant to mitigate."
"@github 
I discussed how to structure the options with DavidP.
We're thinking it may be better to stick with boolean options (rather than enum options), but have more than one (one for literals, one for lambdas, one for everything) when we want, under one section.
Then it would look like the section for ""var"" preferences:
![image](https://user-images.githubusercontent.com/12466233/30287461-0481c7e4-96da-11e7-8132-706435dfd50c.png)

In the meantime, it would be a single boolean option for literals.

This would also solve a technical problem. When I tried to fix the code above (since `BooleanCodeStyleOptionViewModel` because I pass an option that's wrong), the constructor for `EnumCodeStyleOptionViewModel` does not seem to handle per-language options, but only plain options.

Let me know if that approach seems ok."
"Or maybe we just ask CTI to add a scenario where they have 6.0 and 7.0 installed, and run dotnet new, I believe that would catch it right since it would install the wrong version?  We could automate that but that's much harder for us to do with our tests and the versioning hell than just verifying this on real builds"
"@github I just synced with @github @github and I thought the idea was to update all IVTs with additional metadata (namespaces consumed) once we have an analyzer for this and that in the meantime it was ok to add direct IVTs. We'd rather not use the external access layer because we want to avoid additional assembly loads for this scenario. Did I get something wrong?

cc @github "
Is there any reason to allow a default `typeArgumentNullableAnnotations`? Feels like the user is calling the wrong overload if they pass default instead of calling the other version. #ByDesign
"And this pattern seems wrong in general. Either we should be reporting lookup diagnostics, and suppressing future diagnostics, or we should not. I think this needs a refactor.

---
In reply to: [412344868](https://github.com/dotnet/roslyn/pull/43050#discussion_r412344868) [](ancestors = 412344868)"
">out BoundExpression receiver, out SyntaxNode propertySyntax) [](start = 57, length = 60)

I think refactorings like this negatively impact readability of the code. Was there something wrong with the code? Does it violate style, analyzer complained? Was this change necessary to accomplish the task? #Closed"
"I discovered this while writing tests for the browser. Now I am ashamed that I did it wrong in my previous PR 😅 On the bright side it is a validation of the fact that we should have tests running in the browser as well :)

I am not entirely certain if here I should just call `iconv.encode(limitedBuffer.buffer, 'latin1')`. My rationale for creating own function is: a) it is very simple b) we don't need to load whole `iconv-lite-umd` for the purpose of guessing encoding`, so it's faster.

Also [my PR to `jschardet`](https://github.com/aadsm/jschardet/pull/58) got merged so we can soon get rid of types workaround."
Was this being used elsewhere or can it be inlined? (Sorry for the dumb question but it seems text search in my browser isn't being consistent so...) #Resolved
"It shouldn't be the case, but I have to cast it to access methods on it.  I was just being cautious here in case I was wrong - should I instead just directly cast it?"
comment now wrong
"That was my initial thought, to add a case in `OutputStateMachineEngine::ActionEscDispatch`. But `ESC \` does not seem to belong to the ASCII escape code category. I don't know whether `\` is a special case that's widely known or it's something wrong about the current state machine implementation. Point is, as a VT newbie I'm trying to do the right thing but adding a special case in `OutputStateMachineEngine::ActionEscDispatch` does not seem right enough for me. "
No as this is created from the javascript environment normally with URL.createURLObject.  The browser environment in this case will handle the error if something went wrong.
"We seem to be passing `match` to the callback here, so shouldn't we be making the local `match` object null instead of `runmatch`? (or maybe my understanding is wrong :) )"
"With WRL it's 
`Microsoft::WRL::CoCreateableClass(yourclassname)` in the header so it will set up the goo in the library.

And then you have to call `Module<T>::Create().RegisterObjects()` to make it walk through that goo and make simple factories and register them for you.

However, I don't really recommend that as it has a lot of magic that can go wrong that is hard to debug specifically when you start mixing COM and WinRT, InProc and OutOfProc, and STA and MTA.

However, you **could** potentially use `Microsoft::WRL::SimpleClassFactory<T>()` here instead of implementing it  yourself as `MonarchFactory` by doing
`make<Microsoft::WRL::SimpleClassFactory<MonarchPeasantSample::implementation::Monarch>>()` down in the `CoRegisterClassObject`
as far as I'm aware."
"This is debugging change made sure the output was flushed before a crash occurred.  
I thought this was only debugging code.  Which is why I thought it should remain.  Let me know if I was wrong.

"
Might be dumb question been away from xammy for a while how does one turn on the feature flag what file ???
"> But I'm starting to wonder if the original policy of just displaying `Content.ToString()` was the better option. Then it's consistent for any type you give it, even a View.

I would be ok with that unless I'm going crazy or losing my memory (which is possible!) that is how WPF, Silverlight, and most other Forms Content properties behave? "
"> It ended up in the wrong spot on my first test of the https://github.com/lunapaint/tga-codec build task:
> 
> ![image](https://user-images.githubusercontent.com/2193314/175293356-c4b2a767-e6e9-4bdb-aa04-4cc983b2a5ad.png)



> It ended up in the wrong spot on my first test of the https://github.com/lunapaint/tga-codec build task:

did that happen on first compilation?

yep that's an issue i'm aware of and reproes w any task for the first compilation - doesn't match here for xterm.js. likely the case for luna paint as well
![Screen Shot 2022-06-23 at 10 46 47 AM](https://user-images.githubusercontent.com/29464607/175362158-75e3dc91-763b-407e-a8bb-1c0ea3b73e7b.png)
so is an issue with the `$tsc-watch` problem matcher
![Screen Shot 2022-06-23 at 10 48 47 AM](https://user-images.githubusercontent.com/29464607/175362523-e2cfad4c-6732-442e-869a-d6871db2656e.png)

"
Ignore this! I'm wrong haha
"This causes us to *completely ignore* the `androidSdk.JavaSdkPath` value, meaning `$(JavaSdkDirectory)` is now entirely ignored.

This seems...wrong? :-)

Instead, I *think* we want (-ish):

```csharp
var jdks = new[]{new JdkInfo (androidSdk.JavaSdkPath)}.Concat (Tools.JdkInfo.GetKnownSystemJdkInfos (logger));
var jdk = jdks.Where (j => j.MaxVersion != null ? j.Version <= maxVersion : true)
    .Where (j => j.IncludePath.Any ())
    .FirstOrDefault ();
if (jdk == null)
    Log.LogError (…);
// use jdk...
```

Error checking excluded.  If `$(JavaSdkDirectory)` is set and is valid -- i.e. `AndroidSdkInfo` was constructed -- then we should use `new JdkInfo ($(JavaSdkDirectory))` aka `new JdkInfo (androidSdk.JavaSdkPath)`, and use that *preferentially*.

Question about this preferential use: if e.g. JDK 9 is specified, *should we use it*?  That might be helpful for testing new JDK versions.

If `$(JavaSdkDirectory)` *isn't* set/`AndroidSdkInfo` doesn't construct, *then* we should consult `JdkInfo.GetKnownSystemJdkInfos()`."
Nope. We fixed this with #5934 :smile: we got some of the widths wrong
"I think maybe we are conflating two issues:

1. There are bugs in `ApiCompat` that have led to wrong (DIM members) or unclear (changing return types) error messages.
2. `ApiCompat` is not an API differ, it only reports API breakages.

This PR seems to implement `#2` (an API differ) as a temporary fix for `#1`, which is probably fine, but we should consider what our long-term goal is here.

Once `ApiCompat` is fixed, it will no longer show `InterfacesShouldHaveSameMembers`, but this doesn't really help us understand what **is** changing.  We could accidentally be adding tons of new public members that we didn't intend.

Long-term, I think what we want is: a report generated that shows **any** changes to our public API (`#2`).  And the process that generates this report raises an error if any of those changes are **breaking**.

Somehow we want to enforce not only that we don't introduce **breaking** changes, but that any change to our public API is intentional.

I think the Components team may have built tooling for these scenarios, since they faced the exact same issue."
"this feels hardcodey and wrong, please let me know if there is a better way to do this"
"Your indentation is wrong, there seems to be a mix of tabs and spaces here."
"Ok, I was wrong about this.  The problem is that System.Numerics.Vectors is not yet yet built in source-build at the point when Roslyn is built because we need Roslyn to build runtime.  Our usual fix for this is to let the repo use a ref-only version of the package to break the cycle.  This ref-only version contains no `lib` directory, so this copy fails.  To my knowledge we haven't seen any issues in source-built SDKs caused by this, but I would be happy to use another fix if possible.  To me this is very similar to [DiaSymReader](https://github.com/dotnet/roslyn/blob/main/src/NuGet/Microsoft.Net.Compilers.Toolset/DesktopCompilerArtifacts.targets#L32) that we exclude from source-build as well."
looks like formatting is wrong here and in many of the other new tests.
">internal [](http://example.com/codeflow?start=8&length=8)

Why internal? This feels very wrong. In general, any operations with ""lazy"" fields should be encapsulated in the type that declares them. #Closed"
wrong indentation
"> #57369

I think this is wrong issue number.

FWIW, we have tried to use shared QCalls a few times in the past, but it always fired back for various reasons and got undone so far. We can give it another try though.

The solution that is proven to work well is to the cleanup the unmanaged dependencies and move them to libraries/src/native ."
"this seems worth trying to take this week, unless there's risks/complications I'm not aware of. we added an API in the wrong place, in the same release we wrote an analyzer to find such mistakes, it finds it , ... "
">iFace [](http://example.com/codeflow?start=78&length=5)

Capitalization seems wrong"
I'm not that sure if you didn't paste wrong content from the clipboard. Did you mean this url: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debuggerbrowsableattribute?view=net-6.0?
"I don't understand these last 2 tests. They seem to be verify the comment IS present, when based on the file names shouldn't they be NOT present? Or am I reading the tests wrong?"
"Well, I wanted to print something in case that provides clues to why the `rmtree` is failing in the first place; being completely silent to the failure seems wrong. It seemed like `walk` would be ""safer"", but I guess I could be paranoid and put try/except around that, too, if you think that would help."
"How valuable are these methods? It feels wrong to have 2 public APIs that do exactly the same thing.

On the existing factory methods, We `ConfigureDefaults` over top of a `new HostBuilder()`. So for those it makes sense, since the ctor creates a blank builder, and the `CreateDefaultBuilder` creates one with certain things set.

But here, these factory APIs literally just call the ctor. So do we need both?"
"Wrong copyright.
"
"> The WriteForever loop would throw even before this change because there is an explicit check for aborted write inside WriteAsync...

I'm not saying to reuse WriteForever as is, but we can write something similar so that if a write operation succeeded too fast, we would start another, etc until it either throws as expected or the whole loop times out to signal us that something is wrong"
"i think this might be wrong. we are assuming that the infer type node is only allowed in the extends clause of a conditional type. so we want to check if `selection` includes the conditional type node to whose extends clause the infer type node belongs. this conditional type node might not be the first conditional type ancestor we find because there could be nested conditional type nodes. for example:
```ts
type Crazy<T> = T extends [infer P, (infer R extends string ? string : never)] ? P & R : string;
```
we can apply the refactoring and extract `(infer R extends string ? string : never)` to obtain this:
```ts
type NewType = (infer R extends string ? string : never); // error: 'infer' declarations are only permitted in the 'extends' clause of a conditional type

type Crazy<T> = T extends [infer P, NewType] ? P & R : string;
```
which gives an error."
"The `""use strict""` seems to have ended up in the wrong place here, but I think this is due to https://github.com/microsoft/TypeScript/issues/33217"
is it convertable or convertible? help english sucks
"Pre-existing, but the above comment looks wrong: ""otherwise returns the larger of the inputs""... but this is min, not max. "
"This error is totally wrong - the pattern is
```js
if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}
```
 - the inner `module.exports` assignment being treated as unconditional is making us error on the check to perform the assignment.
Minimally, we need to add an exception to the error where `module.exports` checks, specifically, aren't considered always-defined (since they're runtime module system checks)."
"Double checking on https://nodejs.org/api/esm.html#resolution-algorithm, recognizing both null and undefined here for `exports` seems good (only one usage makes that explicit, but it should be fine), however ignoring `main` and looking up an index regardless is not what `PACKAGE_RESOLVE` describes for an `export`less package... it just says `Return the URL resolution of packageSubpath in packageURL.`, which doesn't imply any fallback to `index.js` lookup if the `main` fails. If in practice it is, the algorithm in the `node` docs may be wrong. (Which doesn't surprise me, if I'm honest, I think the people writing the code are more pragmatic than the people reviewing/writing the docs.)"
"This code change is semantically correct. As the next instruction is a call to a function implemented in C++, the detail is that STDCALL abi does not consider EFLAGS to be part of the input argument set, nor are they expected to be preserved across a call.

While the guidance for writing high performance, dense assembly suggests using xor in this way, the performance/size characteristics of this particular function is such that it will not have an impact on the product, and the existing code is (somewhat) easier to read for developers who may not be as familiar with assembly. That guidance is much more important for compiler developers than for engineers writing small amounts of hand-coded assembly.

I do not believe we should take this change, as the existing logic is somewhat more self-documenting as its meaning, and the updated logic, while not wrong, does not improve the codebase. In addition, this change does not update the numerous other locations throughout or assembly code which also use the mov register, 0 pattern."
"@github Please review the TypeSystem + inlining changes
@github Please review that small fix in the R2RDump tool (assert repeated twice, one of them at the wrong place)

cc @github/crossgen-contrib "
"@github I would be fine with that!

One thing to make sure of though is, with regards to incremental parsing:

if you use the same `SyntaxKind` in multiple places, you are effectively stating that any node with that kind is interchangeable in that place.  i.e.   by stating that you take a VariableDeclaration `SyntaxKind` there, you are stating that any node with `SyntaxKind.VariableDeclaration` could then go there.  Is that actually the case?

i.e. can you see all these variable patterns in a binding:

```
a) simple name:                        a
b) name with type:                     a: number
c) name with initializer:              a = expr
d) name with type and initializer:     a: number = expr
```

?

If these are all things that can show up in a binding element list, then reusing `SyntaxKind.VariableDeclaration` is definitely a safe and appropriate thing to do. 

However, If any of them cannot show up in a binding element list, then using this `SyntaxKind` here would be problematic.  The issue is that we could have a normal variable declaration from the old tree, see that that's what you want in the parser currently, and then reuse the node in the binding element list.  We'd do that, even though it's not valid in the new context because it's not what the parser would actually produce for that code any more.

From looking at parseBindingElement, i think this is not safe (but i could be reading things wrong!).  For example, i don't think you support forms 'b' or 'd' in a binding element list.  As such, i would lean on having a new BindingElement `SyntaxKind` that would accurately demarcate these nodes, and prevent them from being used in places where we actually want a real VariableDeclaration (and vice-versa).

In terms of their structural shape, they would of course be the same.  But in terms of their `SyntaxKind`, they would clearly indicate that they represented non-interchangeable pieces of code.
"
"@github Actually, it was a different condition. I commented out the wrong dup validation. It should be the validation that the project doesn't already have the reference (InvalidOperationException), not that there are no dups in the array passed in (this would be ArgumentException)."
"@github Regarding `SumType<T1, T2>`, I would prefer one of the following:

1. Properties `First`/`Second`, where accessing the wrong one throws
2. Properties `Item1`/`Item2`, where accessing the wrong one throws
3. A set of methods with signatures like this:

    ```csharp
    bool TryGetFirst([MaybeNullWhen(false)] out T1 value);
    bool TryGetSecond([MaybeNullWhen(false)] out T2 value);
    bool GetValue([MaybeNullWhen(false)] out T1 value1, [MaybeNullWhen(true)] out T2 value2);
    ```"
"not sure that I got this right: here we'll alias `recursiveDirWatchers` as `watchers` and then at the line 365 we'll put fresh watcher in `watchers` so it will end up in `recursiveDirWatchers` however on the next line we'll return `{ watcher, isRecursive: false}`. Since we are using value of  `isRecursive` to pick the map to delete the element it seems we'll use wrong set.
"
Nope.  Looks like i'm wrong.  we do depend on internal apis currently.
"This by itself didn't fix the issue for me. 
Because I'm desperate and have been struggling with this for a while, this (in addition to fixes in this PR) solved it for me:

in the bottom of `function cloneSourceFileWithChanges(`
```javascript
            node.pragmas = source.pragmas || new Map();
            node.text = source.text || """";
            return node;
```
But maybe parts of it can be solved in:
`var node = baseFactory.createBaseSourceFileNode(303 /* SourceFile */);` ?

---

Edit: After further testing, I only needed the above change to `cloneSourceFileWithChanges` to solve my issue, not the change in the PR.

---

Edit2: I had 2 projects in an microfrontends environment, one was a library with some files that had a file in `<projectRoot>/model/<filename>.ts` and `<projectRoot>/<filename>/package.json` that referenced it. 
When importing from the 2nd project, if imprting like vscode suggested `<projectRoot>/model/<filename>`, I get this error. 
When importing the `package.json` path instead it works: `import <filename> from ""<projectRoot>/<filename>"";`
Basically, a horrible debug experience where I had to dig through github issues, the typescript compiler and various other things because I imported something the wrong way. 
But adding the above mentioned lines to the clone method solved the issue symptoms for me, but in fact I should fix the import... 

---

Edit3: I experienced issues with this 4 months later. 
I added 
```javascript
            if (node.pragmas === undefined) {
                console.log(""Error when importing: "" + node.fileName)
                console.log(node)
                console.log(""Should import the package.json, not the ts-file!"")
            }
```
to `cloneSourceFileWithChanges` in my `typescript.js` file to at least give some kind of non-worthless message."
">  they failed with my branch's changes. Am I doing things wrong?

The functional tests are failing on the change in the CI. I guess that it is also what breaks the perf tests."
"@github/jit-contrib PTAL
cc @github @github 

Linked issue above has details on my attempt at understanding where things go wrong in crossgen2.
"
Needs more work.  Something else is going wrong with a real blazor app
"Yes. https://github.com/dotnet/maui/issues/887

This also happens on iOS. I assume Android does not change, but I am probably wrong. I also need to add that. Maybe."
"Ok nevermind, I was looking at this wrong."
@github / @github This PR is in design because it's my first take at adding Anaylzers and I want to make sure I'm not doing anything catastrophically wrong design wise.
nit: comment is slightly wrong
What else could have gone wrong?
Those method types aren't supported. Logging to let people know they are doing something wrong.
Closing because this merge is in the wrong direction. I'll update dotnet/versions&hellip;
"OK not sure what's going on but the failing tests are using the wrong parameter names, e.g. `--called-api-scopes` should be `--CalledApiScopes` and it's [been that way for over a year](https://github.com/dotnet/aspnetcore/blame/main/src/ProjectTemplates/Web.ProjectTemplates/content/StarterWeb-CSharp/.template.config/template.json#L394).

@github @github do we know if some template tests were recently unquarantined or some other change that might be causing this seemingly outdated test to fail on Helix runs now?"
My understanding is this should have all properties that are in `VSLangProj80.CSharpProjectConfigurationProperties3`. @github can please correct me if i'm wrong
this seems wrong...
"given that this is a reachability analyzer, i would have expected names like `bool xxxIsReachable, bool yyyyIsReachable` to help indiate what sort of data is flowing in.  If i'm wrong and the data flowing in isn't reachability data, then we need to doc what it is because it's def not clear. #Resolved"
"this seems... 'wrong' to me.  If there is no span provided by the actual refactoring, would we not just default to this.Span here?  because, effectively, the refactoring is def saying ""i apply to the span you passed in"" :)   

Isn't the optional parameter only if the refactoring wants to override that with something more specific from context?"
I thought we were also parsing in class declarations for error recovery. Is that wrong? #Resolved
"@github yes, we need it still. when I debug the calls to `UntitledEditorInput.isDirty()` right when opening an untitled file, I see it returning 2 times dirty before the model is resolved and then `false` is returned. That is some crazy indeterministic behaviour that would cause the weirdest bugs...

I would actually not worry too much about the dirty state. When I add the workbench contribution to track backups, I should also make sure to trigger the dirty state. Maybe I can find a more elegant solution then.
"
">true, false, false [](start = 92, length = 18)

Feels strange that the `true` comes first (before two `false` flags), despite corresponding with the last parameter. Am I reading this wrong?
Similarly, on F4, I don't understand the order of the flags (I would expect a `true` between two `false` flags) #Closed"
"Seems wrong 
![image](https://user-images.githubusercontent.com/323878/112883456-2b823080-9083-11eb-9bcd-694e94e38808.png)
"
is there a better way to track these dependencies? hardcoding looks wrong
What's wrong with the braces?
"Hmmmm, why?

if ItemsSource is INotifyCollectionChanged it means that CollectionChanged event will be fired with **Move** action, in case of any element is moved

Am i wrong?
"
I assume that is because the underlying JavaScript APIs do not support synchronous HTTP. But someone on @github's or @github's team should correct me if I'm wrong.
"@github, fyi, my machine isn't set up to run these, and they don't appear to run in CI yet (correct me if I'm wrong). So you may need to tweak them once they're merged."
"I was looking at my vertical monitor when typing the comment, so I thought it would be dumb... but then I looked at my horizontal monitor hahaha.

TLDR: yes, any side works"
Oops. That was a dumb mistake. Thanks for catching that.
"> Let's update the doc.

I am not sure what is there to update. It doesn't look like the doc lists specific versions or I am looking at a wrong document.

> I think vbc -langversion:? will automatically pick up the new version, but may be worth a try.

It does.
```
Supported language versions:
default
9
10
11
12
14
15
15.3
15.5
16 (default)
16.9 (latest)
latest
```

---
In reply to: [556982209](https://github.com/dotnet/roslyn/pull/50414#discussion_r556982209) [](ancestors = 556982209)"
"I don't love that this has to actually look for the file on disk and doesn't work as dumb string parsing, but I get it if that's the only way"
no I'm wrong.  Need to rework this.
"> does this have to be three booleans? can it be a button mask so we don't back ourselves into a corner for the future point where somebody asks for buttons 4/5/6/7/8 to work properly?

So, the main problem here is `IMouseWheelListener.idl`. I could introduce a struct there for `MouseButtonState` that is the same as `TerminalInput::MouseButtonState`. That still seems wrong to me though so idk. :/

> i don't love `s_getPressedButton`, because it no longer gets a pressed button, it more like ""determines the most important button out of the provided button set I think""??

This is working the same as before though. All I did was make it take a parameter for `MouseButtonState` and read from that. :/"
"It looks like using `msbuild /restore` everywhere allows `Java.Interop.Tools.Diagnostics` to build even when `obj` contains cache files mentioning the ""wrong"" assembly...
"
"My grep is wrong; I should have searched for `Initializing scenario`:

```bash
% grep 'Initializing scenario' prepare-20200427T203*
prepare-20200427T203008.log:[00:00:00.2793986] Initializing scenario UpdateMono
prepare-20200427T203116.log:[00:00:00.4118305] Initializing scenario Required
prepare-20200427T203230.log:[00:00:00.2998047] Initializing scenario AndroidToolchain
```

This *is* https://github.com/MicrosoftDocs/azure-devops-docs/issues/3265 : `xaprepare -s=Required` fails, but the failure is ""eaten"", and execution continues.

Thus the followup: why's it fail on d16-6 and succeed on master?  The answer is c69bb31d987ea1aac24972452c4b233bec0029ac: we need to update the MinGW compiler version to appease Homebrew, which would allow `xaprepare -s=Required` to complete successfully."
"The library output directory might be wrong clue here. I think I will try to get the cmake debug output to get more details. The `src.cxx` file is located in a directory with unique ABI and built type per cmake run, so still don't see why it breaks.

Observation: local build uses different path (`CMakeFiles/cmTC_3b3f7.dir/src.cxx.o` for example), so I wonder if it might be cmake version specific."
"Shouldn't this `else` set chainStatus to... something?

We have a validation exception, but can't ask what went wrong... that's not ""NoError"" :)"
"It answers my question, but I think the comment is still wrong.  Even, for example, in the case of EOF, the next call could succeed if the file length was extended in the interim.  I'm not suggesting the logic change, but I think the comment should."
Coding style in this file is wrong.
"Is this an established pattern for dealing with spans in older framework? 
I may be wrong but this feels dangerous. What if the GC moves the slice between this line and the next? Do we need to get a fixed reference first (with `GetPinnableReference`)?"
@github the indentation is wrong here.
it was in the wrong folder and iw as very confused as i needed to step through this api :)
"ouch, I missed that. I'm not sure how we got this wrong initially if we were following Berkeley, but maybe I just proved that eyeballs are fallible.."
what's wrong with this test?
The note says **.App** but the `Include` value doesn't include that. Am I just reading it wrong or is it a typo?
"I meant the whole `ReflectionContext`, not just `AnalyzingPattern` - this should call into logger directly instead of using `RecordUnrecognizedPattern` - the suggested code snippet above should be close enough.

`ReflectionContext` will end up logging too, but it reports trim analysis warnings, not AOT warnings (the category is wrong)."
"This may be out of scope for this but the old (and new) behavior seem. wrong to me.
Let say the kernel was built without IPv6 support (or v4 in distant future). The file would be missing and we would always throw even if there is nothing wrong.

In many cases like this it feels it would be better to return empty collection. Since the networking grabs massive amount of information had several cases in the past when we thrown on stupid things even if the caller really does not care.  "
"> I think the `bool`-return got added under the false presumption it was needed to know everything was copied.

Except for ""false presumption"", like I said yes. Also, correct me if I am wrong since you just watched it, in the API review it was said that it should enumerate directory by directory and copy file by file and skip only those where it fails but it should NOT throw instead just returning false in the end (or true if all has been copied). The last time I've checked it this implementation doesn't fully meet this criteria, instead of enumerates all directories at once and it throws an exception on fail."
"This is wrong. The `std::stoul` is for ""unsigned long"", but we are returning an `int`. This means we are parsing a 64-bit unsigned number on 64-bit non-Windows platforms and parsing a 32-bit unsigned number on 64-bit or 32-bit Windows platform. In either cases though we are returning a 32-bit signed number. I'd suggest making this consistent on all platforms."
"prototype assignment shouldn't work, although I think there is very little chance it will:

```js
function A() { }
A.prototype = {
  #x: 1
}
class B { }
// this is wrong in several ways!
B.prototype = {
  #y: 2
}
```"
"Adding `LCL_VAR_ADDR` is not part of the fix, but I just could not unsee how we clone `LCL_FLD_ADDR` but not its offset-less equivalent.

Edit: removed because it was wrong."
"`findAntecedent` (vs operating on all antecedents in some way) seems _slightly_ wrong. There are cases, I think, where a node could have multiple `Present` flagged antecedents, like at the start of a `finally` block, eg
```ts
try {
    if (a?.b.c) {
        // ...
    }
    if (a.b?.c) {
        // ...
    }
}
finally {
    if (a?.b?.c) {} // every flow node in the `try` is an antecedent of the start of the `finally`.
}
```
and it's unclear what should be done in those cases (or what the visible effects would be of doing something different than picking the first). In any case, I think filtering the label to all `Present` nodes, rather than `find`ing the first is _probably_ more correct."
"After changing it turns out we have some failing tests. When parts[0] is empty and it can happen when we are testing with `expression = "".a.""` then we end with parts = { """", ""a"", """" }. So indexing 0th element is not safe. When we use FirstOrDefault we are sure not to index wrong. The expressions cannot be too long as they are manually provided by users so iterating through one part to get the last element does not seem painful here because we would have to check for nullOrEmpty in the indexing scenario additionally. What do you think?"
"Control flow error is wrong, appears to be using the declared type: https://github.com/microsoft/TypeScript/issues/37480 "
"```
System.DllNotFoundException: Unable to load shared library 'libpinvoke.so' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable:    libpinvoke.so.so: cannot open shared object file: No such file or directory    liblibpinvoke.so.so: cannot open shared object file: No such file or directory /opt/share/libpinvoke.so: wrong ELF class: ELFCLASS32  /opt/share/libpinvoke.so: wrong ELF class: ELFCLASS32 libpinvoke.so: cannot open shared object file: No such file or directory    liblibpinvoke.so: cannot open shared object file: No such file or directory
```

If it is not filtered, my example shows `/opt/share/libpinvoke.so: wrong ELF class: ELFCLASS32` twice. (Tested on .NET 6 Linux/aarch64 env)"
"Also for some reason the CI started breaking 😢  perhaps I did something wrong in ``src/lib/es2022.d.ts``? "
I'll take a look at the failures on the builds to see what is wrong
"@github thanks for updating that. As you are touching the shim, would it make sense to get rid of the block of the condition https://github.com/dotnet/runtime/blob/c64210e5e7b1707522d3d3cf3922579bf4e67944/src/libraries/Native/Unix/System.Globalization.Native/pal_icushim.c#L248

trying to load the min version first seems wrong to me. "
"@github sth is wrong with the `mono` machine. It was working fine all day for me and now it fails without a clear reason. Do you have any ideas why?

```cmd
PS C:\Projects\aspnet_benchmarks\src\BenchmarksDriver> dotnet run -- --display-output --server $mono --client $monoload --connections 512 --jobs ..\BenchmarksApps\Kestrel\PlatformBenchmarks\benchmarks.plaintext.json --scenario PlaintextPlatform --sdk 5.0.100-preview.6.20272.2 --runtime  5.0.0-preview.6.20272.2 --aspnetcoreversion 5.0.0-preview.5.20255.6  --collect-counters --framework netcoreapp5.0 --collect-trace
```

```log
[05:26:11.967] WARNING: '--self-contained' has been set implicitly as custom local files are used.
[05:26:11.982] Using worker Wrk
[05:26:12.055] Running session '7469a407e9dd4831908b3382a0cf74f8' with description ''
[05:26:12.058] Starting scenario PlaintextPlatform on benchmark server...
[05:26:12.203] Fetching job: $mono/jobs/8
[05:26:13.523] Job has been selected by the server ...
[05:26:14.193] Job is now building ...
[05:26:35.807] Job failed on benchmark server, stopping...
Microsoft (R) Build Engine version 16.7.0-preview-20270-03+bee129d1b for .NET
Copyright (C) Microsoft Corporation. All rights reserved.

  Determining projects to restore...
  Restored /tmp/benchmarks-agent/benchmarks-server-6/rrcz5cy5.ybt/Benchmarks/src/BenchmarksApps/Kestrel/PlatformBenchmarks/PlatformBenchmarks.csproj (in 757 ms).
  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview
  PlatformBenchmarks -> /tmp/benchmarks-agent/benchmarks-server-6/rrcz5cy5.ybt/Benchmarks/src/BenchmarksApps/Kestrel/PlatformBenchmarks/bin/Release/netcoreapp5.0/linux-x64/PlatformBenchmarks.dll
  PlatformBenchmarks -> /tmp/benchmarks-agent/benchmarks-server-6/rrcz5cy5.ybt/Benchmarks/src/BenchmarksApps/Kestrel/PlatformBenchmarks/published/


Command dotnet publish PlatformBenchmarks.csproj -c Release -o /tmp/benchmarks-agent/benchmarks-server-6/rrcz5cy5.ybt/Benchmarks/src/BenchmarksApps/Kestrel/PlatformBenchmarks/published /p:BenchmarksAspNetCoreVersion=5.0.0-preview.5.20255.6 /p:MicrosoftAspNetCoreAllPackageVersion=5.0.0-preview.5.20255.6 /p:MicrosoftAspNetCoreAppPackageVersion=5.0.0-preview.5.20255.6 /p:BenchmarksNETStandardImplicitPackageVersion=5.0.0-preview.5.20255.6 /p:BenchmarksNETCoreAppImplicitPackageVersion=5.0.0-preview.5.20255.6 /p:BenchmarksRuntimeFrameworkVersion=5.0.0-preview.6.20272.2 /p:BenchmarksTargetFramework=netcoreapp5.0 /p:MicrosoftNETCoreAppPackageVersion=5.0.0-preview.6.20272.2 /p:MicrosoftWindowsDesktopAppPackageVersion=5.0.0-preview.7.20302.1 /p:NETCoreAppMaximumVersion=99.9 /p:MicrosoftNETCoreApp50PackageVersion=5.0.0-preview.6.20272.2 /p:GenerateErrorForMissingTargetingPacks=false /p:MicrosoftNETPlatformLibrary=Microsoft.NETCore.App /p:RestoreNoCache=true --framework netcoreapp5.0 --self-contained -r linux-x64  returned exit code 0

[05:36:34.163] Deleting scenario 'PlaintextPlatform' on benchmark server...
```"
"What this error means? Is something wrong from my side?
##[error].packages/microsoft.dotnet.helix.sdk/5.0.0-beta.20330.3/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(76,5): error : (NETCORE_ENGINEERING_TELEMETRY=Test) Work item 728eca5e-a2f8-40f9-90ec-94d35c419b21/System.DirectoryServices.Protocols.Tests in job 728eca5e-a2f8-40f9-90ec-94d35c419b21 has failed.

https://dev.azure.com/dnceng/public/_build/results?buildId=718537&view=logs&jobId=71afe768-e493-597c-228c-037834193aeb"
"Right! From my understanding, the Python dependency was going to be taken care off in another PR somewhere else. We just need now clarification for the Dev Command Prompt. I'm almost sure we do but I'm not certain under which scenarios or if I'm just wrong on this."
"@github @github 
With the last commit, #41146 should also be fixed. 

When converter type and property type are different (obviously they must be compatible anyway), for value types a box (getter) / unbox_any (setter) and for reference types a castclass (setter) is emitted.
The reflection based accessor works without changes but the thrown exception types when the deserialized object has the wrong type are different. 
That's why currently 4 tests are failing when the `ReflectionMemberAccessor` is used locally for testing.
I would be fine with the different exception types. What do you think?     "
"Dear @github,

I got assigned https://github.com/dotnet/roslyn/issues/57768 and I thought to myself ""ahh, I guess thats just a missing scenario"".
So I went to create a failing test only to find that you added one in 2018 with a comment saying ""documenting current behaviour"", so I thought ""ahh, I guess there is just nothing that is checking for missing trivia"".
So I went looking only to find that there is code to look for missing trivia, and add an ElasticMarker (which is ElasticZeroSpace) in those situations.
So I thought ""this is probably wrong, but let me make it ElasticSpace and see which tests break"" but none of them did.
So I tried all of the RemoveUnnecssary* tests and they all passed.
So I tried all of the simplifier tests and they all passed.
So I turn to you, dear sir, to tell me why I'm wrong here.

I assume the answer is ""ElasticMarker is supposed to work here, the formatter must be wrong"", but since I can't find where in the formatter that is processed, I thought I'd throw this up as a hail mary just in case :)

Kind Regards,
Dave

P.S. the test underneath the one in this diff has a comment that says ""// Currently producing broken code."" but the code it produces is not broken ¯\\\_(ツ)_/¯"
"> I wrote some simple code to find cases where char.ToLower(AChar) != UpperCaseAChar + offset from the ranges in s_lcTable and fixed all the cases I found were wrong.

Should that code run in a test, to protect your fixes?"
"@github

```csharp
diagnostics.AddRange(compilation.CircularStructDiagnostics);
```

It looks like `diagnostics` isn't guaranteed to have dependencies bag while `CircularStructDiagnostics` does, causing this assert to fail:

https://github.com/dotnet/roslyn/blob/525e4654939b46752b746b7cc2bae236ce37b14e/src/Compilers/Core/Portable/Binding/BindingDiagnosticBag.cs#L119

I passed `allowMismatchInDependencyAccumulation: true` since we *can* have a dependencies bag for `diagnostics`. But let me know if you think this is wrong."
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Logically after an update is applied, tokens refer to rows in tables that are a concatenation of all the added rows from every update.  (ie: if the baseline table 0x23 had 2 rows and then generation 1 an added 3 more rows, an index like 0x05
refers to table 0x23 row 3 from gen 1).

The way the lookup works is that the EnC map table records the logical tokens of the update.  So for table 0x23 the 3 additions in gen 1 will have entries like encmap row 5 = 0x23000003, row 6 = 0x23000004, row 7 = 0x23000005, and then rows for the next table and so on.  The relative index in gen1 of token 0x23000005 then, is the distance of its row (ie row 7) from the first token for the table (ie row 5), plus 1 (since tokens are 1-based).  So in this case token 0x23000005 corresponds to the 7-5+1 = 3rd row of table 0x23 in the gen1 dmeta image.

The problem is that previously we returns this index-base+1 computation even in cases where we walked either to the end of the encmap table or past the last row for the table we care about.

In the case where we walked to the end of the encmap table, the index-base+1 could sometimes return a value that looked like a valid token.  The upshot is that we looked up an incorrect AssemblyRef (0x23 table) from the wrong generation.

The updated code returns -1 for all cases where we didn't find an encmap row for our given token.

Example: https://gist.github.com/lambdageek/cd7ea06bf5004ba884e7979f28623da5

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>lambdageek</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> One case we lose loops, for Int32ToHexChars...

For cases like these with OR exit conditions, we'd need multiple blocks to be handled during inversions. Basically look at all the backedges into the loop top block, and if any of those come from blocks ""below"" that first exit... they also need to be duplicated.

You can't handle the subsequent blocks quite the same way as the first one. That is, copying the block code into the block before the loop is wrong, you now need a new block.

> optOptimizeLayout turns a reasonable looking lexical loop into spaghetti

I wonder if there's some simple way to forestall this, eg settting a bb flag on key blocks during inversion?"
"@github 
 If an absolute expiration value will be assigned to the cache entry and 
1) assigned value will not be modified in any way after the reading in [this](https://github.com/dotnet/runtime/blob/47c7e1128c25a35ab631c33bccc37b81c21c17f5/src/libraries/Microsoft.Extensions.Caching.Memory/src/MemoryCache.cs#L118) line of code
then in [this](https://github.com/dotnet/runtime/blob/47c7e1128c25a35ab631c33bccc37b81c21c17f5/src/libraries/Microsoft.Extensions.Caching.Memory/src/MemoryCache.cs#L126) line the value is compared to itself
2) assigned value will be modified somehow after the reading in the line of code specified above. The dependent entry propagates an absolute expiration to the parent only if this value is less than the parent value According [this](https://github.com/dotnet/runtime/blob/47c7e1128c25a35ab631c33bccc37b81c21c17f5/src/libraries/Microsoft.Extensions.Caching.Memory/src/CacheEntry.cs#L238)

I also thought that if I did something wrong, then the existing quality wall should have rejected my changes."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

As discussed offline, according to the current merged wrapper
architecture, for architecture-variant tests all versions
are compiled and the ""wrong"" variants get skipped at runtime
using the ConditionalFact attribute. Sadly for some of the ILPROJ
tests JITting the ""wrong"" variant ends up crashing the JIT during
Crossgen2 compilation. We can follow up by figuring out whether
the crash is intentional but for now a simple way to work around
this problem (hitting just a small number of tests) is to mark
them as out-of-process tests so that the wrong variants get
filtered out early and R2R compilation is not triggered for them.

Thanks

Tomas

/cc @github/jit-contrib 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>trylek</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> If anything, BlockingCollection has been superseded by more modern patterns such as [System.Threading.Channels](https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/) so we should encourage users to adopt that instead.

@github my understanding is that the [Channels](https://docs.microsoft.com/en-us/dotnet/api/system.threading.channels) are intended for asynchronous scenarios. Using them is synchronous scenarios will require blocking on asynchronous methods that return `ValueTask`s, that require converting these to `Task`s with [`AsTask`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask.astask), that will result in an allocation on each blocking operation. Which is something undesirable in general. So, unless my understanding is wrong, the `BlockingCollection<T>` has still a place in modern concurrent programming."
"Tagging subscribers to this area: @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />


Fixes: https://github.com/dotnet/runtime/issues/69010

We map the entire file and then adjust the pointer to get to the bundle. When we need to unmap, having the bundle, we reverse the adjustment to get the address of the mapping.
The math for reversing the adjustment was incorrect. The adjustment due to embedding in larger container (such as universal binary) was applied with a wrong sign. For large binaries we could offset the pointer beyond the mapping and unmap something random - if there is nothing mapped there, no harm, if something is mapped (like our own binary) we could cause crashes.



<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>VSadov</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Single-File`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I think `Activity` lifecycle events and `Application` lifecycle events are 2 different things. They may sometimes (mostly incase of single Activity) fire together but they're not always synonymous.

If an `Activity` corresponds to `Window` then it is not correct to assume it's lifecycle events applies to the whole application. This is wrong in 2 cases, multiple `Window`s/`Activity`s and background services.

I guess the current implementation in MAUI uses the `Activity`'s event because there are no corresponding events on the `Application` class (except for OnCreate). The `Xamarin.AndroidX.Lifecycle.Process` package provides those events and I think it will be a more accurate implementation.
"
"There is nothing wrong with using scenes on iOS. In fact, it is ""recommended""? 

> In iOS 13 and later, use UISceneDelegate objects to respond to life-cycle events in a scene-based app.

However, it is also an opt-in feature:

> Scene support is an opt-in feature. To enable basic support, add the UIApplicationSceneManifest key to your app’s Info.plist file

https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle

I have updated the PR to do this logic even more correctly and now we can support either scenario."
I didn't think we had a way to mark `.razor`-generated classes as `sealed`. Please correct me if I'm wrong!
"Internal or not, I think it's a bad idea to make log methods extension methods on `ILogger`, because it makes it too easy to log messages to the wrong logging namespace.

I would either just make these normal static methods like [DefaultHubDispatcher.Log.cs](https://github.com/aspnet/AspNetCore/blob/01a87989364dea1b18743a9fe3757eccc220b2ca/src/SignalR/server/Core/src/Internal/DefaultHubDispatcher.Log.cs) or create a logger object that has a private field reference the correct logger like [KestrelTace.cs](https://github.com/aspnet/AspNetCore/blob/01a87989364dea1b18743a9fe3757eccc220b2ca/src/Servers/Kestrel/Core/src/Internal/Infrastructure/KestrelTrace.cs)."
"Why is this getting checked in? File building into the wrong place?
"
@github how do you feel about if we just do stackalloc for up to 256 and use the old alloc from GetBytes for crazy long passwords (which has to be extremely uncommon)
This is likely a signal we are doing something wrong here.
"> Otherwise, we might be able to do it in our `ResolveNativeProjectReference` target. (Though I'm not sure if the fast up to date check runs targets to collect `UpToDateCheckInput`, or if they have to be static).

I though they had to be evaluation time constant but that might be wrong: https://github.com/dotnet/project-system/blob/c954a632f74afdac9118a1f505257107789ff00e/docs/up-to-date-check.md#customization talks about a target. So it might be doable to add the NativeContent item to UpToDateCheckInput after RAR/design-time RAR. @github, that might be worth clarifying in that doc."
"But I really feel like this code has to be somewhere in the speculation analyzer and not scattered around individual features. Doing this fixes bugs in other features too. One example I found is:
```c#
const bool b = default;

switch (true)
{
    case b:
        break;
}
```
do inline temporary on 'b' - it will use replace 'b' with 'default' and produce the error.
But with this change, it will introduce a cast and the resulting code will be correct:
```c#
switch (true)
{
    case ((bool)(default)):
        break;
}
```

edit: I'm wrong, this particular case actually works with either approach because the simplifier uses the same helper."
"Yeah, they're wrong. Once fixed, I can just delete this code."
that seems wrong. @github is this expected?
"> I am not sure what you mean - assert failure here means operation.FormatString != null && operation.FormatString.Kind != OperationKind.Literal. What additional information does your approach give over this one?

The ```Assert.True``` when fails simply says the value is false when it was expected to be true. The ```Assert.Equal``` tells you what was the actual value when it is not matching the expectation, therefore providing valuable information, which often allows to understand what went wrong without debugging the test. It is fine if you don't want to make this change, I'll do it myself after the PR is merged. 

---
In reply to: [186062344](https://github.com/dotnet/roslyn/pull/26545#discussion_r186062344) [](ancestors = 186062344,185968286)"
"> So isn't this a problem with entire handling of model binding of `""null""` json on nullable parameter with `TreatEmptyInputAsDefaultValue==true`?

I do not think that the condition is wrong just because we did some improvements (.NET 7) in how we are treating the AllowEmptyBody based on the Nullabity in I feel only very specific scenarios will allow `empty body` and not `null` or vice versa.

> @github Bruno Lins de Oliveira FTE Is there anything wrong with just removing the `if (model == null && !context.TreatEmptyInputAsDefaultValue)` branch entirely `SystemTextJsonInputFormatter` and always `return InputFormatterResult.Success(model);` when `JsonSerializer.DeserializeAsync()` doesn't throw?

@github  As we discussed, ""null"" and empty body are different, however, MVC treat them as the same for STJ for a long time and change might cause some breaking change. We changed to make the empty body better and most of the cases when a ""null"" is accepted will be covered by this new mechanism, as example:

```c#
public ActionResult([FromBody] Contact? contact) {}
```
or
``` c#
public ActionResult([FromBody] Contact contact = null) {}
```

Until .NET 6 they used to be blocked for both (null and empty body) because we were not using the optionality to allow them. Now, .NET 7, both actions will be accepted (null and empty body).

Since the mechanism will behave differently, as I mentioned, not change it right now might be the best and going back to the original idea of just update the error message to differentiate between `Empty Body` and `null` is a less breaking change.

> Since the comment made it clear there are some inputs being regarded as null I wanted to make sure the json is null literal (which I am not entirely sure how to do since request stream is of course non seekable).

I think the comment about `whitespace` is not true, as you mentioned, and the only situation where we will get a `null` value from the System.Text.Json will be when we have a literal `null`, so i feel we can safe say (only for System.Text.Json) this:

``` csharp
if (model == null && !context.TreatEmptyInputAsDefaultValue)
{
            context.ModelState.TryAddModelError(context.ModelName, ""null value not supported"");
            return InputFormatterResult.Failure();
}
```

That will produce a better error message, without change the current behavior. And the new mechanism or the user option to allow empty body will be used to decide if the failure will happen or we will treat as `Success` binding.

Also, I think we should keep the `NewtonsoftJsonInputFormatter` as-is for now.

@github anything to add based on our discussion?
@github is that make sense for you?
"
"After merging the latest master, this line now throws a `NullReferenceException` on `Release`. After some investigation I found that [this PR](https://github.com/dotnet/roslyn/pull/22258) added a [AsRootOfNewTreeWithOptionsFrom](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxNode.cs#L524) call that throws the exception. To me this looks like an unwanted breaking change introduced in `15.6`, or I am wrong?"
"Sounds wrong to me. If they're emitted as static methods, that's just a codegen decision."
"Oh, never mind, wrong method. What would be in the ref-struct? Just a string? I didn't think that was necessary. #Resolved"
Because I'm dumb and forgot to add the test file. I'll add shortly.
">node.Type [](start = 124, length = 9)

This change seems wrong. Types from binding are generally ignored once we have a result type from visiting a node. #Closed"
"Because the problem is with this arg, not `dimensions[0]`.  It was simply wrong before.  Moreover, `dimensions[0]` might be an omitted size expression, which has no width.

---
In reply to: [301336868](https://github.com/dotnet/roslyn/pull/37052#discussion_r301336868) [](ancestors = 301336868)"
"this condition is wrong.  we sholud leave the cast in if it's a non-nullable value type.  not if it had a cast originally.  "
This is an IL change. I would rather use `!` and force a potentially wrong annotation as opposed to potentially changing the return value.
It is not wrong though
wrong copyright (probably pplies to more files as well).
"ad is a wrong acronym here, I suspect this was previously IAdapterDetails"
"Without this the invariant validation fails, so either the validation is wrong or the _projectIds are wrong."
"When `count` is 1, `extensions` is wrong."
"Still not crazy about sorting the user's keys, but it doesn't have to be fixed now."
The sign on most of these is wrong.   Will fix.
"So is it by concept that it would be wrong to implement such a change ? In the current implementation, it simply iterates over each element and checks whether it is in `HashSet` and in this implementation, `Dictionary.KeyCollection`'s contains is invoked which also does the same.

Because by behavior, i.e. calling intersect with a dictionary's key collection yields the same results in both cases. I will add test cases for this."
"I was using wrong steps - was not aware this only reproduces in web.
I verified I can reproduce the issue and that this fix trully fixes it -> approved."
"Most likely we don't want to add the `UnsupportedOSPlatform` attribute for test projects, let me know if am wrong"
"I think this PR is going down the wrong path with separate renderers for each platform. It's the typical Xamarin.Forms route which maximizes bugs and discrepancies between platforms. The rendering should be done in one place, in a platform-independent way. Taking a SkiaSharp dependency would be a good way to do this."
"Argh. Used the wrong github account, sorry."
"Not sure if this is important/matters, but e.g. in the previous `<ResolveLibraryProjectImports/>` invocation, we had:

```xml
<ResolveLibraryProjectImports
        OutputImportDirectory=""$(IntermediateOutputPath)__library_projects__\""
```

That would now be:

```xml
<ResolveLibraryProjectImports
        OutputImportDirectory=""$(IntermediateOutputPath)__library_projects__""
```

Note the *removal* of the trailing `\`.

*Is this a problem*? Possibly; I know we've encountered previous bugs where the presence/lack of a trailing `/` would alter behavior, causing the ""wrong"" directory to be deleted. For example, monodroid/a22d699b / [Bug #27442](https://bugzilla.xamarin.com/show_bug.cgi?id=27442), which references the ""same"" property!

For sanity, this property should also include a trailing `\`, both on this line and the following line."
"❕ This comment is now in the wrong location (would not be opposed to deleting it)

```suggestion
```"
"Hmm, maybe I just did something wrong because I got a compiler error when trying to add the `&` version and in my hurry to get to everything else didn't really investigate what was wrong exactly. I can try again."
"Considering that this code pattern is present in *at least* two different tasks *within this PR*, could we please refactor out the logic to ""something"" a'la:

```csharp
partial class MonoAndroidHelper {
    public static bool ExecuteProcess (ProcessStartInfo psi, Action<string, object, DataReceivedEventArgs> onOutputData, Action<string, object, DataReceivedEventArgs> onErrorData);
}
```

As you say, `Process` is an API which is *easy* to get wrong.  We should thus share as much code as possible, to reduce the likelihood of screwing it u p."
"> > Config file handling was revamped to fix common issues, and now supports reading TOML.
> 
> Adding options is significantly more powerful with support for things like
> std::tuple and std::array, including with transforms. Several new
> configuration options were added to facilitate a wider variety of apps. GCC
> 4.7 is no longer supported.
> 
> Config files refactored, supports TOML (may become default output in 2.0) https://github.com/CLIUtils/CLI11/issues/362
> Added two template parameter form of add_option, allowing std::optional to be supported without a special import https://github.com/CLIUtils/CLI11/issues/285
> string_view now supported in reasonable places https://github.com/CLIUtils/CLI11/issues/300, https://github.com/CLIUtils/CLI11/issues/285
> immediate_callback, final_callback, and parse_complete_callback added to support controlling the App callback order https://github.com/CLIUtils/CLI11/issues/292, https://github.com/CLIUtils/CLI11/issues/313
> Multiple positional arguments maintain order if positionals_at_end is set. https://github.com/CLIUtils/CLI11/issues/306
> Pair/tuple/array now supported, and validators indexed to specific components in the objects https://github.com/CLIUtils/CLI11/issues/307, https://github.com/CLIUtils/CLI11/issues/310
> Footer callbacks supported https://github.com/CLIUtils/CLI11/issues/309
> Subcommands now support needs (including nameless subcommands) https://github.com/CLIUtils/CLI11/issues/317
> More flexible type size, more useful add_complex https://github.com/CLIUtils/CLI11/issues/325, [https://github.com/CLIUtils/CLI11/issues/370][]
> Added new validators CLI::NonNegativeNumber and CLI::PositiveNumber https://github.com/CLIUtils/CLI11/issues/342
> Transform now supports arrays https://github.com/CLIUtils/CLI11/issues/349
> Option groups can be hidden https://github.com/CLIUtils/CLI11/issues/356
> Add CLI::deprecate_option and CLI::retire_option functions https://github.com/CLIUtils/CLI11/issues/358
> More flexible and safer Option default_val [https://github.com/CLIUtils/CLI11/issues/387][]
> Backend: Cleaner type traits https://github.com/CLIUtils/CLI11/issues/286
> Backend: File checking updates [https://github.com/CLIUtils/CLI11/issues/341][]
> Backend: Using pre-commit to format, checked in GitHub Actions https://github.com/CLIUtils/CLI11/issues/336
> Backend: Clang-tidy checked again, CMake option now CL11_CLANG_TIDY https://github.com/CLIUtils/CLI11/issues/390
> Backend: Warning cleanup, more checks from klocwork https://github.com/CLIUtils/CLI11/issues/350, Effective C++ https://github.com/CLIUtils/CLI11/issues/354, clang-tidy https://github.com/CLIUtils/CLI11/issues/360, CUDA NVCC https://github.com/CLIUtils/CLI11/issues/365, cross compile https://github.com/CLIUtils/CLI11/issues/373, sign conversion https://github.com/CLIUtils/CLI11/issues/382, and cpplint https://github.com/CLIUtils/CLI11/issues/400
> Docs: CLI11 Tutorial now hosted in the same repository https://github.com/CLIUtils/CLI11/issues/304, https://github.com/CLIUtils/CLI11/issues/318, https://github.com/CLIUtils/CLI11/issues/374
> Bugfix: Fixed undefined behavior in checked_multiply https://github.com/CLIUtils/CLI11/issues/290
> Bugfix: ->check() was adding the name to the wrong validator https://github.com/CLIUtils/CLI11/issues/320
> Bugfix: Resetting config option works properly https://github.com/CLIUtils/CLI11/issues/301
> Bugfix: Hidden flags were showing up in error printout https://github.com/CLIUtils/CLI11/issues/333
> Bugfix: Enum conversion no longer broken if stream operator added https://github.com/CLIUtils/CLI11/issues/348
> Build: The meson build system supported https://github.com/CLIUtils/CLI11/issues/299
> Build: GCC 4.7 is no longer supported, due mostly to GoogleTest. GCC 4.8+ is now required. https://github.com/CLIUtils/CLI11/issues/160
> Build: Restructured significant portions of CMake build system https://github.com/CLIUtils/CLI11/issues/394
> Converting from CLI11 1.8:
> Some deprecated methods dropped
> add_set* should be replaced with ->check/->transform and CLI::IsMember since 1.8
> get_defaultval was replaced by get_default_str in 1.8
> The true/false 4th argument to add_option is expected to be removed in 2.0, use -capture_default_str() since 1.8

I was trying to update several deps at once or I would of already done this one. I also verified this change did not cause any issues. But it brings more features and bug fixes that may make our current parser a bit better. I do seriously recommend allowing ingestion of TOML at some point, not just json as it could prove useful in extensions or settings in general."
"Done

edit: apparently, I put this prototype comment in the wrong place. I had conditional accesses in mind when I was writing the comment. I'll check tomorrow what definite assignment does here and will probably just replicate whatever that is.
 #Closed"
"so if it's readonly i get this:

![image](https://user-images.githubusercontent.com/4564579/117481844-672cd780-af18-11eb-96b6-0e80f18996c7.png)

which makes sense to me.  Dispose does mutate it.  So that needs to be non-readonly to allow mutation.  If i've gotten this wrong, and there's a 'correct' way to do this, LMK."
"IIRC Microsoft.CodeAnalysis.Common is just the NuGet package which contains Microsoft.CodeAnalysis.dll.

I'm definitely open to better methods of getting the set of assembly names to ""delegate to the compiler's context"", but strictly it only seems necessary to do this trick for assemblies that the C# and VB compilations depend on. Are we sure that ""assemblies whose name starts with `Microsoft.CodeAnalysis`"" is not going to catch something we didn't intend to include?

For example, if an analyzer somehow referenced `Microsoft.CodeAnalysis.Workspaces.dll`, it wouldn't necessarily be our job here to ensure that it's the same Workspaces assembly loaded in the context containing the compiler assemblies. I could be wrong about that, though.
"
Minor: but wrong coding guideline (should be same line). That's for this entire PR so it sounds like your settings are incorrect (:
Typo: `CreateWellKnownType` (I see Apple got it wrong too :smile:)
"It seems that the type was already present
https://developer.apple.com/documentation/avfoundation/avplayeritemoutput?language=objc
and marking it as `[iOS (13,0)]` is what cause the crash on 32 bits
IOW the comment is wrong

but if it has been correct (new base types do happen) then all members would need to have updated availability attributes,"
"@github What should we do in cases where users have provided wrong (or incomplete) information in `FileStreamOptions`. Like for `File.AppendText(path, new FileStreamOptions { Mode = FileMode.Open })` ?"
"Correct, I can remove and either do the casting in the call or in the other method. I added the other one 'cause the indentation went crazy. I'll do it in the caller since if will be cleaner."
"I was not aware of the fact that `Seek` was capable of reusing the buffer while `Position` setter was not. Since we are very close to release of .NET 6 and I don't feel comfortable introducing any non trivial changes to the buffering logic (I am speaking from experience, as I've blocked preview 4 release with a bug in buffering logic myself: #51151) I would prefer to reuse the existing `Seek` logic by simply calling `Seek` from `Position` setter.

@github please don't  get me wrong. I am not saying that your refactor and logic changes have a bug, I just don't feel 100% comfortable merging it now.
"
@github I was dumb. I renamed a item. I did not update the usage. I should not be allowed near code.
"I think it is going to be a _big_ task for compiler team to maintain what diagnostics can be returned by compilation.GetDiagnostics and what can't.
I wouldn't say current approach of this analyzer is wrong, but rather conservative. Any analyzer can return hundreds of diagnostics that it never reports in any possible executable code path. It only guarantees I won't report diagnostics outside this set, we never have an exact set requirement in the API.
"
"This conversation reminds me of https://meta.wikimedia.org/wiki/Cunningham%27s_Law 

> the best way to get the right answer on the internet is not to ask a question; it's to post the wrong answer.

"
"This seems wrong. we already set `T1` and `T2` to any, so this should resolve with no errors, the `noImplicitAny` on the extends clause should be sufficient."
Wrong Paths - should be fixed by this PR: https://github.com/xamarin/xamarin-macios/pull/14811
"Then the comment just below is wrong?
"
"This flag seems a bit weird. What's wrong with just letting the caller call GetContainingTypeOrThis() and then GetOuterTypes()? GetOuterTypes now seems really convoluted.
"
problem is return type from stringify not allowed value types. I think it should be undefined | string instead. This can be addressed by adding specific overloads. Please correct me if I am wrong.
"This test appears to be wrong...the assertion that the spans are replaced with E.Foo(E.Foo()) seems off, since that'd still have a `this.` qualification...?
"
"In the original commit, you also closed the other side. Was the original commit wrong or is it missing here or it doesn't matter? Otherwise, LGTM though, thanks."
"...no, that's not it. Something seems wrong."
"node would have a wrong type and that could be confusing to the caller if this is done as a part of conversion lowering - it is not clear whether the helper succeeded or not. Now null indicates a failure.

If caller expects and can tolerate the failure by keeping original node it can easily do `?? node`
"
it was definitely wrong. fixed.
"> you quoted the optimization manual but it seems it doesn't include this green block:

@github, looks like I just didn't have the latest copy of the manual. I have the copy from 2018, not the copy from Sep 2019.

In any case, Skylake is a relatively newer baseline and many of the azure machines sizes are still on Haswell/Broadwell: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general.

> But as with my Data alignment for speed: myth or reality? post quoted above, these are small differences of the order of 10%. You are not going to save 50% or anything of the sort.

Right, I wasn't expecting anything crazy, but 10% *could* still be significant for certain workloads. This also looks to assume that the 16-byte read/writes will be aligned. It might be beneficial to also see what the numbers are like when none of it is aligned (so you get a cache line split every other load/store for YMM and every 4 loads/stores for XMM). It might also be beneficial to check on a Haswell or Broadwell era processor as that is a common baseline for Azure and AWS machines."
"> @github Does this fix #51404?

@github Yes, I just realized I paste a wrong link here"
"I think I would say

> The right-hand side of an 'in' expression must not be a primitive.

Regarding my suggestion for `getApparentType`: I forgot it maps primitives to their corresponding object type (e.g. `number` to `Number`), so that won’t work across the board.

I’ve been playing with this for most of the morning, and there are a lot of missing pieces with unions and intersections that get pretty confusing to think about, especially when comparing with the existing behavior. Eventually, I settled on the principle that we should only suppress this error when there exists some safe instantiation of the RHS type, but it is impossible to narrow the expression down to that type. The goal is that if the user writes the appropriate type guards, they should not get an error for using an in-expression inside those guards, even though the compiler doesn’t narrow through them. Here are the additional tests I came up with:

```ts
function union1<T extends string | number, U extends boolean>(thing: T | U) {
  ""key"" in thing; // Error (because all possible instantiations are errors)
}

function union2<T extends object, U extends string | number>(thing: T | U) {
  ""key"" in thing; // Error (because narrowing is possible)
  if (typeof thing === ""object"") {
    ""key"" in thing; // Ok
  }
}

function union3<T>(thing: T | string | number) {
  ""key"" in thing; // Error (because narrowing is possible)
  if (typeof thing !== ""string"" && typeof thing !== ""number"") {
    ""key"" in thing; // Ok, because further narrowing is impossible
  }
}

function union4<T extends object | ""hello"">(thing: T) {
  ""key"" in thing; // Ok (because narrowing is impossible)
}

function intersection1<T extends number, U extends 0 | 1 | 2>(thing: T & U) {
  ""key"" in thing; // Error (because all possible instantiations are errors)
}

function intersection2<T>(thing: T & (0 | 1 | 2)) {
  ""key"" in thing; // Error (because all possible instantations are errors)
}
```

Currently, both in master and in your PR, only `union1` and `union2` exhibit the “wrong” behavior, but it shifted a bit in my quick experiments, so having the rest of those tests will be useful.

One hint is that you probably want to use `getConstraintOfType` instead of the `immediateBaseConstraint` property, for several reasons, one of which is that it works on unions and intersections. My only concern with that though is that it may not be suitable to differentiate between what we have in `union3` and `union4`. You may need to have different logic based on whether `rightType` is “a type variable whose constraint is a union” vs. “a union that includes type variables with some relevant constraint”.
"
"Current status:

* Both failed tasks are due to build infrastructure failures and aren't even in the Windows builds at all.

* Possible dispute as to whether the code should change to match the documentation or the documentation should match the code but I think it's noise because who ever overrides gethostname†? I can't call GetHostNameW anyway because the win7-x64 and win7-x86 rids still have runtimepacks so there's simply no fixing it that way at this time.

* I only care about Dns.GetHostName() if it does which it is documented to do, that is return the DNS host name on Windows.

† Here's where I think the native documentation is wrong. It says in the absence of a namespace provider it returns the netbios name; however this implies the default return value on out-of-the-box Windows is the netbios name, which it is not."
"Tagging subscribers to 'arch-wasm': @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This PR introduces a simple single-threaded implementation of ```TaskReplicator``` and then makes sure that ```Parallel.Invoke``` and ```.For``` use it . This works around various issues like #44605, #43411.

I still need to verify whether the other Parallel primitives need changes to properly use this in all scenarios, but it works good for the two methods I targeted right now.

I was unable to get platform conditionals to work in any fashion (ifdef, etc) so it's hardcoded to on in this PR right now, which is obviously wrong. If some reviewer can figure out how the heck to make this work I'd appreciate it (see the FIXME in Parallel.cs)

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>kg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`* NO MERGE *`, `arch-wasm`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> It's SendUsingHttp11Async itself we'd need to inline, into SendWithRetryAsync.

That doesn't seem crazy either."
"> Any idea why the `coreclr_tests.pmi.windows.x64.checked.mch` TP impact is so high? Do we have some particularly crazy MD array tests there?

I need to investigate. Maybe related to the large size regressions in the cases I mentioned and Kunal pointed out. Over 7% on win-x64 is pretty extreme given that I doubt many tests even have MD arrays."
"Again, it's a style preference and ""unusual"" is in the eye of the beholder.

I'm OK with accepting a style that is equivalent in function and performance. I won't accept that there's anything wrong or unusual with the style I used."
"ah...  noodling on how i feel about this.  An issue for me is that your form really has nothing to do with 'Patterns'.  You're just simply providing a version that takes in Switch-Labels instead of Expressions.  Ideally, you could just pass expressions and labels to the original SwitchSection.  However, the fact thta it calls the parameter 'expressions' is then misleading/annoying.  

Perhaps SwitchSectionFromLabels would be a better name.  As this is internal, i'm ok with that name.  When we go to make these public we can figure out a better name.  However, PatternSwitchSection feels very wrong to me."
"1. Seems very odd that VB specific tests are in the core workspace layer.
2. The work item string seems wrong.  it shoudl link to the github bug.
3. Wrong bug number specified.
4. There seems to be an enormously excessive amount of tests for what could boil down to a handful of integral and floating point tests.
"
"(yes, I recognize it's the wrong thing already, but thought I'd ask...)"
"wrong, should be ""Neplatný název hashovacího algoritmu"""
"That confused me as well (+1 on adding a comment please).
I looked for the lowering logic for lifted Or on nullable bools (`RewriteLiftedBooleanBinaryOperator` I think) and there I saw some checks for `left.HasValue` and `right.HasValue` in the pattern. I am looking in the wrong place?"
">// It is undesirable to mutate the symbol by setting its type twice. [](start = 24, length = 68)

There is nothing wrong with this code, we are in a constructor. The comment should be removed and the issue is closed. #Closed"
"It feels wrong that this inherits from `DiagnosticAnalyzer`. The first thing we have to do is make sure to disable most of the functionality of that class here. If we need to hold them in the same collections at some point, I think it would be more appropriate to define a marker interface for these two types and keep them separate otherwise."
"same as in https://github.com/dotnet/runtime/pull/655/files#r363527332, to build up the exception's JSON path in case something goes wrong later on the object graph."
"> In the getter case, the code would be proper or not already.

How so?

Say i have this:

```c#
string foo;
public string? GetFoo() => foo;
```

Is it not wrong if we convert that to `string Foo { get; }` and wrong if we convert it to `string? Foo { get; }`.  Some consume of the existing field or method will break right?"
"There's a bug in the previous `CheckDeclarationNode` (with 4 type arguments) where it's using the wrong resource string. "
">index [](start = 17, length = 5)

Does this name match underlying parameter name? Consider testing with a ""wrong"" name as well. #Closed"
This is wrong for net5 and should not be copied
"This feels wrong - since we always register `ViewletDescriptor`-instances we shouldn't use two separate functions. Why not treat viewlet and external viewlet equal, have only one function, one event which we send for each viewlet registration, let listeners filter on `ViewletDescriptor#isExternal`
"
"> If we're not concerned about what might go wrong if the delegate threw an exception (e.g. an OOM), then sure. It sounds like you're saying that's the case.

I don't even think they can OOM, but I haven't checked rigorously...
"
"After this change it looks like some else-branches are required. Without return, the wrong label is used."
My understanding was that resx files in the current directory would be added automatically if this property isn't set. Is that wrong?
"I think that returning ""/"" is more wrong than """".

If we were optimizing for making maximum tests to pass without any changes, we would also change Assembly.Location to return `/<assemblyname>.dll` that would be even more wrong.

What are the tests that fail before this change and pass with this change?"
"the indentation seems to be wrong, can you please fix the style.
"
"Is this ever expected to change? I might be wrong, but the samples aren't listening to INPC for this. So the proper use would be to bind to this value ?"
"This is the wrong place. This is the `git` extension, but the feature lives in the `github` extension.

Also we should call it with a more meaningful name, like `config.gitProtocol`."
"```

Expected:
                Diagnostic(ErrorCode.WRN_InvalidMainSig, ""Main"").WithArguments(""D.Main()""),
                Diagnostic(ErrorCode.WRN_SyncAndAsyncEntryPoints, ""Main"")
Actual:
                // (12,24): warning CS0028: 'D.Main()' has the wrong signature to be an entry point
                //   public static string Main() { System.Console.WriteLine(3); return null; }
                Diagnostic(ErrorCode.WRN_InvalidMainSig, ""Main"").WithArguments(""D.Main()"").WithLocation(12, 24)
Diff:
                    Diagnostic(ErrorCode.WRN_InvalidMainSig, ""Main"").WithArguments(""D.Main()"")
-->                 Diagnostic(ErrorCode.WRN_SyncAndAsyncEntryPoints, ""Main"")
```

The warning wasn't produced. By looking to the if condition, I can't figure out what can cause the condition to be false.
The language version in the set is set to 7.1, to it's equal to FeatureAsyncMain.RequiredVersion, and there is a task entry point, so the Count is 1 (>0).

I can't debug such a large code on my poor machine. Sorry for that :-(

@github @github @github Can anyone help here? #Closed"
"oh good catch, yeah guid isn't the best indicator, so instead of stuffing guid in the Tag, I stuffed the Profile object itself, lmk if I'm crazy though"
"Here's a crazy idea:

Could we just pass a `TabBase` to the `TabHeaderControl`, and then bind to the header's `tabBase.Title` directly? That would avoid the need to pass the tab title back and forth.

Plus, then we could use a converter to convert the `TabBase`'s zoom state into a `Visibility` for the zoom icon, rather than manually setting the visibility of the icon when we zoom in/out. Thoughts?"
"* As far as I can tell the data loss test is always the first smoke test suite that is being executed, so the UI required for this test to pass is accumulated as part of the test. Please correct me if I am wrong if I am missing something. 
* I have reworked the setup/teardown code so that it is being injected for each suite and it only exists in one place."
">canUseLightweightTypeConstraintBinding [](start = 149, length = 38)

I feel like `can` might be the wrong word here. It's not an optional thing: if there are constraints, and we don't use lightweight binding, we'll cause cycles. #ByDesign"
"unfortunately I don't think this is ready/working yet:

```
$ snap run code-insiders
*** stack smashing detected ***: terminated
/snap/code-insiders/x1/electron-launch: line 29: 324320 Aborted                 (core dumped) ""$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders"" > ""$GDK_PIXBUF_MODULE_FILE""
/snap/code-insiders/x1/usr/share/code-insiders/bin/../code-insiders: relocation error: /snap/code-insiders/x1/usr/share/code-insiders/libffmpeg.so: symbol pthread_cond_destroy version GLIBC_2.3.2 not defined in file libpthread.so.0 with link time reference
```

did anyone manage to run this version of VS code successfully when built as a snap with core18 base ? seems like a $LD_LIBRARY_LOAD path issue where it is using the wrong glibc from the host and not from the base snap"
@github I don't think I have ever been involved in this work so I wonder maybe I am the wrong person for your questions. Are you trying to reach out to someone else with similar user name perhaps?
"@github: what's wrong is that the [`CancellationToken.Register()`](https://msdn.microsoft.com/en-us/library/dd321635(v=vs.110).aspx) docs don't make explicitly clear on which thread the `Action` will be invoked.

In this case, we _do not_ want `httpConnection.Disconnect()` to be invoked from the UI thread, and since the docs don't say what thread will invoke the callback, the `async () => ...` is used to ""move"" it to a different thread.

Or such is the hope."
Yeah so I initially thought I was going to have this go the other way with ConPTY querying the Terminal for its window state periodically and then I realized that was dumb and changed tacks to this strategy. But then I didn't switch over to a signal. You're right it probably should be a signal.
"FYI these parameters were the wrong way around. Expected should be first, actual second. Otherwise the error reporting it off."
"The comment below says ""February 29 is counted in leap years"". but the man page for tzset says:
```
       Jn     This specifies the Julian day with n between 1 and 365.
              Leap days are not counted.  In this format, February 29
              can't be represented; February 28 is day 59, and March 1
              is always day 60.
```
Am I looking at the wrong thing?

If leap years can't be counted, that would explain why it's not very useful past Feb 28..."
"> @github this doesn't seem to work for ""Cascadia Code Black"" to get parsed into the Black font weight. But ""Arial Black"" does work. Is this not capable of understanding how to map the words for variable weight fonts?
> 
> EDIT: It does understand ""Cascadia Code Bold"" to be weight 700...

I'd have to look at the [font](https://github.com/microsoft/cascadia-code/releases/tag/v2106.17) using [FontSetViewer](https://github.com/fdwr/FontSetViewer) (I encountered a number of buggy fonts that have the wrong names in the `name` table before)...

[update]
There's no such thing as ""Cascadia Code Black"". So that wouldn't (and shouldn't) return anything.

![image](https://user-images.githubusercontent.com/1809166/126851552-65c5a03a-532a-4b73-9347-3bf67a9dafc6.png)"
What's wrong with 0? How do we know the user app doesn't use 0 as something relevant?
"Eek this is really worrisome for me, since a new snapshot that hasn't re-ran generators yet here might return null or not, and that's depending on timing of other processes. That TryGet....method is really intended for the implementation of GetDocument(SyntaxTree), where we know by having a syntax tree that the generators already had to have ran for that snapshot.

Do you recall what necessitated this fix? My gut is telling me the caller needs to be moved off this method and should be calling GetDocumentIdInCurrentContext or GetDocumentInCurrentContextWithChanges() instead. Looking at the existing callers to GetOpenDocumentInCurrentContext I see most of them either being movable to GetDocumentIdInCurrentContext or being wrong and should have called WithChanges() so looks like this might have been an icky spot in the first place and if you were trying to look to other code to figure out what to do...that code was wrong too."
"> From what I understand, on arm64, we don't actually need those functions for things to work, so if I'm not wrong, we should probably refactor the symbol requirement per targeted architectures (so that we pass those symbols when building for x86_64, but not when building for arm64).

Yes, I think that should work."
"@github could you please take a look at this when you have time?

My concern is that it appears the second operand to `lookupIns` is ""sometimes"" ""the base type"" (presumably for SIMD intrinsics) and ""sometimes"" ""the target type"" (presumably for scalar intrinsics), and we're always passing ""the target type"" here (the node type). This feels prone to picking up wrong instructions, and I am not sure of the correct guard against it."
"It seems that there isn't any Arm64 intrinsics for sqrt with integer types. @github Please correct me if I were wrong. Also, I am wondering if `uint32x4_t vrsqrteq_u32 (uint32x4_t a)` and `uint32x2_t vrsqrte_u32 (uint32x2_t a)` could possibly be leveraged here."
"Yeah I couldn't believe my eyes when I saw that. Decided my eyes are wrong and moved on.
"
"Sounds good.  However, if only one should be called, can we add state that tracks that and asserts/throws if someone does something wrong?
"
">codeActionSucceeded [](start = 8, length = 19)

I assume this is the thing you were talking about when you asked about exceptions.  It's not what I would have done, but it sounds like you've already checked the local conventions.  I might change it to `codeActionFailed` though.  As long as we're going down this path, would it make sense to have an error code indicating how it went wrong and then send a telemetry event when we see a failure?"
"This change makes me a bit nervous.  This seems like it's been wrong for a very long time.  How often is this code path hit?  
"
"Please excuse me if this is a dumb question, but where can I find `ilc.exe`?"
"For coreclr, yes.  For mono, I didn't think so, but I could be wrong... was hoping CI would tell me."
"Oh yeah, that's wrong 👍 "
"Using int64_t gives me an error on x86 systems. Am I doing it wrong?
What do you mean ""to generalize both sides to intervals""? If you have any idea how to improve it, I'd love to do it :)"
"> > The problem is that the intrinsics doesn't exist for a type of byte since you can't narrow that any further. So using the return type here is wrong.
> 
> Are there any issues with encoding the instruction based on the return type, rather than the input type? Is the input type size needed for importation or codegen elsewhere?

I think that should be ok. I'll give that a try. It would make the narrowing and widening intrinsics a bit odd in the intrinsics list though, but I guess a comment could fix that :)"
"@github/roslyn-ide: some background on this: when @github started doing the source generator work, he did a quick hack to get source generators to run after we produced a compilation in the compilation tracker. Since this was happening _after_ the core workspace processed stuff, this had various problems: TryGetCompilation and GetCompilationAsync would have returned different things, P2P references probably would have been broken, etc. This tries to move the core running into the compilation tracker so there aren't so many things broken with it.

This is still a prototype although one that compiler is interested in dogfooding. The primary goals are:

1. The compilation tracker should behave the same as usual if you aren't on the preview langver, since this all gets short-circuited there.
2. Starting to test out the APIs so we can get some initial experimentation with them.

Out of scope of this PR is:

1. Fleshing out the prototype (you'll see a number of places where the compiler hasn't implemented something, and so we have to punt work because of that.)
2. Trying to use the compiler's incremental update API -- that'll take more work. We've also identified a few API gaps too that need to be addressed before we can do that, we think.
3. Any sort of remotely smart performance handling.
4. Any representation of these in a smart way in the Workspaces layer.

Once this is in to unblock compiler dogfooding, then we'll tackle those. This is emphatically a ""look, we're walking now"" PR where the goal is just to make things be Not Entirely Wrong(tm).

@github and I have been going back and forth on this so we now have some additional feedback on his APIs. Expect those PROTOTYPE comments to go away."
"> It would indeed be exceptional if the compiler passed us tokens of an unexpected syntax.

I don't understand what that means.  I can't find any direct information specifying what is/isn't expected syntax.  I've reverse engineered to the best of my ability.  However, none of this is contracted.  It's all just based on the current impl.  

That's why i write to what i think is going on, but am resilient to me getting things wrong.  

> Yes, it would be a bug in the IDE code that we are not handling some kind of new token syntax or a bug in the compiler that they are producing some kind of bad tokens. In both cases it's our code!

The compiler layer is not our code.  It's the compiler layer.  We should not be crashing in our code if the compiler changes to do something which is legal which we didn't expect.  

The compiler has not promised any invariants here.  IDE should not assume and shoudl not expect a particualr form if it isn't promised.

And yes, it's a bug in our code if we don't handle something from the compiler.  Hence why i assert.  So we can collect the information and decide what to do.  I do not throw an exception though as that's not an *exceptional* occurrence.  

> OK, now I'm confused. Isn't that what I'm saying?

No.  Because tehre are no invariants promised by teh compiler here.  So we shouldn't crash.  If you can get teh compiler to doc explicitly how this works on their end with their tokens, i'm happy to take away the zealous checking, and i'm fine with then crashing if something goes awry.  In *that* case we would be able to track this down to either:

1. the compiler has a bug and is not fitting their documented invariants.  i.e. a compiler bug, which should go to them.
2. the ide didn't understand the invariant of the compiler properly and wrote innapropraite code.  i.e. an IDE bug which would go to them.

Right now we have the compiler producing undocumented data (i.e without invariant) which we are processing.  In the case of undocumented data, we can attempt to work properly on expected patterns, but it woudl be irresponsible to throw or crash on patterns we didn't expect.  We should instead just report this so we can determine what's going on.  

In other words, it's not *exceptional* for the compiler to produce data within their specified contract.  They are allowed to produce what they want, and we need to be resilient to it all.  
"
"> My point wasn't specifically Read, it was that the virtual methods on a derived Stream aren't able to be trimmed.

Understood, thanks.  I'm highlighting that most of those overrides throw just like the one in this PR, they just throw a more appropriate exception that requires a tiny bit more logic to compute.  So it doesn't look like we're saving a ton by having a custom ConsoleStream just for wasm; correct me if I'm wrong.  The larger piece here seems to be the avoidance of the terminal db code, which ended up getting brought in per https://github.com/dotnet/runtime/pull/35555#issuecomment-620723308 as part of https://github.com/dotnet/runtime/commit/2ef9d363a2cdc5be0850f31d31f4a20e9202624c"
"> The ExplictLayoutSize test was wrong

Interesting, that test is copy-pasted from NUTC (and so is the field layout algorithm bug for that matter). I guess it won't meet the bar to fix it there unless it's user reported.

> TestMethodLookup test was not specifying the correct signature

Yeah, I was meaning to just delete it at some point. It has long history..."
"I'll need to fix the DT tests for `es-abstract`, as it has an `// $ExpectType` for the type of `Promise` which is now wrong because the order of overloads for the static `resolve` method changed in the lib (which is required to pick the correct overload in some cases)."
"So, FWIW, i was saying that roslyn likely almost never needs to use ImmutableDict, and could instead just use a non-mutating view over a normal Dictionary.  I imagine the majority cases are that we don't need clone capabilities, as we likely don't actually do any sort of copy-on-write here.  I may be wrong though.  @github were there particular hostpots where we could benefit from a readonly-dictionary, but also need to clone?"
"> Just so I have a better picture of this, what does the code look like in a single user app that's using blocking waits on thread pool threads parallelism but has enough work to observe problems with limited concurrency?

Many workloads for which tasks were originally introduced, actually.  Consider, for example, parallelized divide and conquer.  A worker partitions its work into multiple pieces, queues identical workers to process N - 1 of those pieces, processes its own, and then waits for those other workers to complete.  Also think about algorithms that require coordination between those pieces, such as various operations used by PLINQ (e.g. OrderBy) that needs to block each of the workers until they reach a common point so that they can exchange data and all continue on, and what would happen if one of the workers was throttled indefinitely.

> OK so a single user application might want to opt out of this

I think that's the wrong direction, at least for the foreseeable future.  **_If_** we decided to go with an approach like the one proposed in this draft, I have trouble seeing it as anything other than opt-in, given all of the previously cited concerns, the potential for introducing deadlocks where they weren't previously, the potential for casting way too wide a net, the potential for negatively impacting the throughput of unrelated workloads, etc.  **_If** such a mitigation was added as opt-in, and if enough testing demonstrated it was a good decision for certain workloads, then it could potentially be automatically opted-in for those, e.g. if you felt ASP.NET should always turn this on.  Even there, though, I'd be surprised if in the current configuration that was a wise choice."
"I think the test failures are unrelated to my changes, please let me know if I'm wrong."
"> The Exception is not bubbled up to host.StartAsync.

I think that behavior is wrong. We should revert it."
"> I guess it means if the profile for callsite's block is wrong  - we're also losing usefull profile of the inlinee?

Yes. Profile data can be ""wrong"" in several different ways.
1.  we might have bugs in our processing that set block counts to zero when they should be nonzero
2. we might be collecting on too narrow of a scenario

Hopefully we find and fix most of the first kind of problem. 

For the second kind we need to be careful not to ""overfit"" to the profile data we have and assume all other behavior is unlikely. The proposal for that is to also run synthesis in tandem, it will give a less extreme view of what is possible at runtime, and then blend the profile data and the synthesized data together. Thus only if both systems agree a block is rare will it end up being rare."
"Thanks for the PR.

I want to make sure I understand what this is trying to fix:
#3525 is about `.deps.json`, but this fix seems to be about `additionalProbingPaths` in `.runtimeconfig.json`. There is some discussion about this in #3525 but it's definitely not the primary purpose of that issue.
So I assume this is trying to fix the fact that `additionalProbingPaths` are relative to current directory and not to the application directory.

As for the change, this could be considered a breaking change, so I don't think it can be done as-is. I can see two possible solutions:
* Add two probing paths if the value is a relative path
  * One where it's resolved against the current directory (current behavior, goes first)
  * One where it's resolved against the application directory (new behavior, goes second)
* Change the behavior only for .NET 6+, in which case the behavior would need to adapt based on the TFM of the app. I think this would be the first time we did something like that in the host, but it might work.

Personally I would probably prefer the second solution - only change this for .NET 6+. I do think that the current behavior is just wrong, so fixing this is great, but we can't break existing apps (Note that this code lives in `hostfxr` which is global, every version of .NET Core on the machine will use the latest `hostfxr`, so we must maintain backward compatibility for this component).

As for the actual code of the change:
* It doesn't compile for me - `GetString` is not a member of `pal::string_t`.
* Resolving relative paths by concatenation is very problematic, at the very least it should use `append_path`
* The code as-is will prepend the directory even to absolute paths, which will break
* The code should use application's directory as the base, not the directory of `.runtimeconfig.json`. While they are typically the same, they don't have to be. I think the correct behavior is for the paths to be relative to the app.
* Additional probing paths can also be specified on the command line. I think the behavior should be the same regardless of which way the probing path was added.
* To accept the change it will need tests to cover the new behavior (and in this case also validate the backward compatibility)"
"The testhost ""wrong"" name is an ordering issue with the properties as the property we depend on was introduced in `Directory.Build.Targets`... @github  any reason why we introduced it in the targets and not the props file here: https://github.com/dotnet/runtime/pull/52897/files#diff-469a3c721b6b95e2cf18fbdd38040bcdf163c0fb04a15f511af71882fc2ae74bR23?

However, it seems like that is not the issue. This ""wrong"" testhost path was introduced in: https://github.com/dotnet/runtime/pull/52897. However the testhost is being correctly zipped to that location: 
```
Creating directory /home/vsts/work/1/s/artifacts/helix/runtime/
  Zipping directory ""/home/vsts/work/1/s/artifacts/bin/testhost/net6.0-Linux-Release-arm64/"" to ""/home/vsts/work/1/s/artifacts/helix/runtime/test-runtime-.zip"".
```

So the correlation payload does exist. This seems like perhaps is a break in the helix SDK directly?"
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/dotnet/runtime/issues/57310

This change is fixing a regression from .NET 5.0. The problem happens when trying to create a CultureInfo object using culture names that Windows don't allow. 
This regression occurred during the code refactoring work done to optimize the globalization data size and WASM support.
Although this fix is addressing the regression, it fixes another issue I have discovered during the investigation. Here is what the change is doing:
- In the file `CultureData.Windows.cs`, the condition `ShouldUseUserOverrideNlsData` is wrong to use. The reason is this part of the code is not concerned about the user overrides. Even the user overrides flag is not initialized yet at this stage.
- In the same file, I added the call to Windows API `GetLocaleInfoEx` that help validate the culture name. That is what we have done in .NET 5.0 too.
- In the file `IcuLocaleData.cs`, there was a bug that caused not finding the proper culture name mapping to our data because the culture name containing characters like underscore `_`.
- Fixing and adding tests.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
What's wrong with the trailing comma? It produces less diff when someone adds new value/removes values
"Going to set this aside for a while to focus on OSR. Looks like:
* there are possibly restrictions with forwarding unmanaged calls (messed up pinvoke transitions)
* something perhaps wrong with native AOT. Tried reproing this but was unable to build the tests properly.
* SPMI diffs may be too large to download? I can run them locally, but they take a long time...

@github feel free to look into any of the above."
"Tagging subscribers to this area: @github/ncl, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This complements #57079 and contributes to #22977

Unlike the server part, this is somewhat more complicated. It may still need some work but I would like to get early feedback for the overall strategy.

Lets start with some numbers:
```
|                           Method | Toolchain | protocol |        Mean |      Error |     StdDev |      Median |         Min |         Max | Ratio | RatioSD |  Gen 0 | Allocated | Alloc Ratio |
|--------------------------------- |---------- |--------- |------------:|-----------:|-----------:|------------:|------------:|------------:|------:|--------:|-------:|----------:|------------:|
| DefaultHandshakeContextIPv4Async |        pr |        ? |   965.19 us |  15.799 us |  14.779 us |   964.67 us |   934.66 us |   989.94 us |  1.00 |    0.00 |      - |   17897 B |        1.00 |
| DefaultHandshakeContextIPv4Async |      main |        ? | 5,377.33 us |  40.143 us |  33.521 us | 5,370.95 us | 5,330.34 us | 5,431.63 us |  5.57 |    0.11 |      - |   19848 B |        1.11 |
| DefaultHandshakeContextIPv6Async |        pr |        ? |   949.92 us |  20.529 us |  23.641 us |   949.12 us |   918.10 us |   995.11 us |  1.00 |    0.00 |      - |   17896 B |        1.00 |
| DefaultHandshakeContextIPv6Async |      main |        ? | 5,171.75 us | 114.255 us | 126.995 us | 5,114.88 us | 5,051.99 us | 5,456.90 us |  5.44 |    0.16 |      - |   19921 B |        1.11 |
|        DefaultHandshakeIPv4Async |        pr |        ? | 5,070.35 us | 171.510 us | 197.512 us | 5,034.52 us | 4,759.74 us | 5,492.81 us |  1.00 |    0.00 |      - |   23679 B |        1.00 |
|        DefaultHandshakeIPv4Async |      main |        ? | 5,572.56 us | 101.193 us |  89.705 us | 5,552.17 us | 5,464.39 us | 5,792.33 us |  1.10 |    0.05 |      - |   22730 B |        0.96 |
|        DefaultHandshakeIPv6Async |        pr |        ? | 5,562.64 us | 148.510 us | 165.069 us | 5,527.18 us | 5,260.93 us | 5,832.12 us |  1.00 |    0.00 |      - |   23721 B |        1.00 |
|        DefaultHandshakeIPv6Async |      main |        ? | 5,550.79 us | 108.666 us |  96.330 us | 5,506.31 us | 5,454.39 us | 5,768.76 us |  1.00 |    0.03 |      - |   23401 B |        0.99 |
```

When `SslStreamCertificateContext`  is used on server side, TLS resume is possible and we get ~ 5.5x boost. 
This should get us on par with Windows but I don't have to same machines to verify this. 
On server side #57079 linked the cache to the `SslStreamCertificateContext`. So when server will reuse it it will also provide ability to resume previous session. When the context is Disposed, it will also dispose the SSL_CTX and the cache. 

This creates first complication for client. It also needs to use same `SSL_CTX` but since there is typically no certificate, there is nothing to hook to. 
To solve this I added separate dictionary to hold contexts for client. That allows to reuse previous context and save native allocations. But the native contexts will be preserved during duration of the process. Complete test runs for `SslStream` creates 13 instance, in ideal case there will be one e.g. `SslProtocols.None`. e.g. it depends on unique combinations of `SslProtocols` used by the client. 

To make it more complicated, OpenSSL pushes responsibility for setting the sessions to caller e.g. `SslStream`. 
So we use the `TargetHost` e.g. SNI host to lookup previous session. Since there may be multiple series running on same name this is not perfect. But since this is just offer to the server, it is up to the server to decide if the session is valid or not. Based on my testing, this is how SCHANNEL operates. Some implementations use IP/Port info for the lookup but SslStream does not have access to it in general case. Even with that, this can be just load balancer and the SSL may be terminated or different servers. Once again, if the session is offered to ""wrong"" server or if the server was restored or cleaned up the session, it should proceed with full handshake. 

The rest is mostly technicality. In order to process the sessions, we need to register callbacks and OpenSSL will inform us when it wants to add or remove session. There is some plumbing to map that to .NET and original `TargetHost`.
There can be multiple sessions for given host but the current strategy is to keep the last one. 

I added some methods to SafeSslContextHandle to allocate cache and do operations.  The `GCHandle` can possibly be stored in native SSL_CTX but I felt  it would be easier for debug to keep it on managed side. Since the sessions are not directly used anywhere in managed code, I use `IntPtr` instead of SafeHandle.
 
 




<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Security`, `os-linux`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>7.0.0</td>
  </tr>
</table>
</details>"
"It's a bit subtle that `TryStartActivityFromUri` has that name (`Try...`) yet returns `void`, and that on this branch of the if/else we always return yet on the other we fall through to the base. I'm not suggesting the logic is wrong, just that a year from now, it might be a challenge for us to reason about why it goes like this. The fallthrough structure heightens the risk that we make a change that intends to affect one case but actually affects other cases too.

Would it be viable to do either one or both of the following?

 * Structure the code so there's no fallthrough from one case to another, i.e., that we're in ""HTTP URL"" or ""other scheme URL"" or ""null URL"" mode, and each of those fully encapsulates its own logic and definitely returns (which might involve returning a call to base.ShouldOverrideUrlLoading)
 * Add code comments briefly stating why the choice of whether or not to call base is correct. Perhaps each of the three top-level branches could have a sentence summarizing the reasoning for that case.

Likewise I'm wondering if we should be calling the `ExternalNavigationStarting` event for non-HTTP(S) destinations. My sense is that developers would likely want to have control over such navigations too."
"> I would love to say that we should remove it altogether, but this might be too crazy for developers coming from Forms

I am all for it!"
This filename is wrong. It's HubClientBase instead of HubClientsBase.
"We have a test that checks if WebSockets works, and it wont have any cookies on it, plus we don't test WebSockets with `withCredentials = false` because that isn't a thing.

But, this might be the wrong check for WebSockets?"
So [these](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/Parser/ParserFeature.vb) are also in the wrong location.
"We should do something to ensure that we clone the set of request headers once we start using it. And we also need to make sure the same cloned set is used in `W3CLoggerProcessor`. Just because it's an `IReadOnlyList<string>` to us doesn't mean it's not an easily mutable `List<string>` to whoever assigned it.

If someone added a header at a bad time, the W3CLoggingMiddleware could throw an `IndexOutOfRangeException`. And even if we avoided that, the headers for the W3C log file would be wrong."
">Dim conversion As Conversion = _semanticModel.GetTypeInfoForNode(summary).ImplicitConversion [](start = 12, length = 92)

This feels wrong, all information is in bound tree, we should not be using SemanticModel to calculate it. Especially based on syntax. #Closed"
"> Bizarre to need packages unused in this repo but 🆗

It's basically for the reasons listed above.  Without this, we have to do complex tie-breaking which can be wrong and is fragile."
Wait... wrong branch.
"Your command looks wrong. Do this:

```
dotnet msbuild /t:Resgen
```

You have typo: `t:/Resgen` instead of `/t:Resgen`, you also don't need to specify the project file, that folder only has one."
"It looks like you used the wrong branch, please rebase on main.

Keeping the connection header isn't correct either. Only some values should be allowed in the connection header like Upgrade."
"> This will probably also fail, because I think you need to take the /s out (/s is needed for the sdl-tsa-vars.config file because of where Validate-DotNet clones repos, but will be wrong here, I think)

Thanks - https://dev.azure.com/dnceng/internal/_build/results?buildId=1582945&view=results"
"> she is basically saying if RelatedSpans.Any() is true, and then list is empty, then someone is doing something wrong. or at least, we don't expect that to happen.

I see.  

That said, the expectation is wrong.  There is no guarantee that you will be able to classify any region of text.  It's completely reasonable and possible to ask for classification and get nothing back.  First, the language may not even support classification.  Second, you can def return an empty result back.  So i would check for that and not try to build the runs if we have no spans.  "
"💭 It's not obvious to me if this is right or wrong, but it also doesn't seem like a common configuration case."
"Whenever the argument is `this` or `type`, I added the named argument. Whenever the argument is `x.NonNullTypesContext`, I felt the named argument was redundant. 
Also, since we're using a specific type (`INonNullTypesContext`) rather than something like a `bool` or `int`, there is little ambiguity or chance of passing to as wrong parameter."
"This is wrong approach to fixing this problem and it will break VS for Mac, because we expect `SymbolDisplayPartKind.MethodName` to be defined for methods.
Correct way to do this is, to set only `SymbolDisplayPartKind.MethodName` for `instance` methods and both `SymbolDisplayPartKind.MethodName` and `SymbolDisplayPartKind.StaticMethodName` for `static` methods and set correct Order Priority or BaseTypes so `SymbolDisplayPartKind.StaticMethodName` has priority over `SymbolDisplayPartKind.MethodName`, so if it's defined it's color is taken over normal method color, so if `SymbolDisplayPartKind.StaticMethodName` color is not defined in theme, `SymbolDisplayPartKind.MethodName` should be respected for `static` methods as is the case in VS for Mac atm."
"Nope, it's correct here.  Or at least as correct as it can be, IMO. Or what exactly is wrong here?"
"Maybe I'm parsing batch wrong, but is this missing the input test assembly in non-composite mode?"
"Consider just building a second list of tuples, and then calling Assert.Equal() on the entire lists; that way if the ordering doesn't match you'll get the entire lists to compare rather than ""A doesn't match B"" and you have no idea where that went wrong."
"This is for iframe based webviews. As far as I know, there is no way to run these in their own session. Please let me know if I am wrong"
"Ok, sorry, one last question, since I'm hoping to try to implement another OSC code (52) in the future:  Why does that switch case automagically set `fSuccess` to true without having to add
```
case OscActionCodes::SetForegroundColor:
fsuccess = true;
break;
```

(Sorry if this is a dumb question, but this codebase is two orders of magnitude more complicated than `st`)"
"> The test demonstrating that your suggestion would be incorrect is shown in [https://github.com/dotnet/runtime/issues/38119](https://github.com/dotnet/runtime/issues/38119) and, now that the runtime is fixed, is tested by the runtime team's unit tests.

Could you please elaborate what exactly would be wrong and how? 

> I don't think it makes sense to add tests for a hypothetical buggy version of the compiler.

It is always good to have test that prevents a regression in the future. Is there an existing test that would fail if the behavior of the function were to change as suggested? What would be the nature of the failure? 




---
In reply to: [446413877](https://github.com/dotnet/roslyn/pull/44025#discussion_r446413877) [](ancestors = 446413877,446358005,446321935)"
"Exposing this low level flag feels wrong, but as I noted in the issue comment I'm not sure if there is a better way to do this"
"@github Can the current problem be due to this abstract base class being called with the **same** diagnostic id?
I think need both ""Add method paren"" and ""Remove method paren"" having the same id, or am I wrong?"
"Oops, yeah, copied the wrong fix 🙂"
"Lets not fallback plz. The IDE will set that value to the Value VS gives it as the current VS registry key, so it's virtually impossible for that value to be wrong."
"\<showerthought>


If we could handle this modification on key up, then could we do something like bind `markMode` to `shift+left`, and have the `shift+left` keydown _enter mark mode_, and the keyup _extend the selection to the left_? Essentially getting quickedit-like selection?

This is of course, crazy, but something to think about "
"I think this `if (isPR)` could be removed/the `if`/`else` ""merged"" because there's nothing wrong with `make prepare jenkins`."
"This is wrong; we want `==`, otherwise `$(ManagedRuntimeArgs)` will be *empty* on non-Windows platforms, which isn't what we want.

For example, this PR updates `Mono.Android.targets` so that `$(ManagedRuntimeArgs)` is used to invoke `jnienv-gen.exe`:

```xml
    <Exec
	        Command=""$(ManagedRuntime) $(ManagedRuntimeArgs) ..\..\bin\Build$(Configuration)\jnienv-gen.exe -o Android.Runtime\JNIEnv.g.cs --use-java-interop""
	    />
```

Yay, this is good.

*However*, the [build log](https://jenkins.mono-project.com/job/xamarin-android-pr-pipeline-release/563/) shows that `$(ManagedRuntimeArgs)` is *empty*:

```
mono ""../../bin/BuildRelease/jnienv-gen.exe"" Java.Interop/JniEnvironment.g.cs obj-MonoAndroid/Release//jni.c
```

We want `==`, not `!=`."
"@github I made the change for anonymous types for C# and updated the tests.

~~Could you point me to where the parallel change for VB should go?~~

~~I looked at https://github.com/Youssef1313/roslyn/blob/records-ref-equality/src/Compilers/VisualBasic/Portable/Symbols/AnonymousTypes/SynthesizedSymbols/AnonymousType_EqualsMethodSymbol.vb but didn't find anything relevant. So I'm probably in the wrong place.~~

Found it:

https://github.com/dotnet/roslyn/blob/afd10305a37c0ffb2cfb2c2d8446154c68cfa87a/src/Compilers/VisualBasic/Portable/Binding/SyntheticBoundTrees/AnonymousTypeSyntheticMethods.vb#L56"
"this is wrong, it's will be installed on user machine"
"@github Crazy part is I saw this several times. I was working through a different issue, but after seeing this maybe 5 or 6 times during debugging of the other issue, I went back after the original issue was resolved and fixed this one."
You want to use `NSUserInterfaceCompression` instead or generator will pick the wrong interface.
"I assumed this is an artifact of having a merge PE (from `main` branch) included in the PR.
But it looks like I was wrong. This change came from a commit called ""Get building"" ([https://github.com/dotnet/roslyn/commit/a183d9e50a4fc18f1796e59ce8535eeb28c06e04](https://github.com/dotnet/roslyn/commit/a183d9e50a4fc18f1796e59ce8535eeb28c06e04)) which is new to this PR. 
Let's revert it."
"Not that weird, it failed on bots too (checked the wrong PR result, too many windows)"
"> I opened #6658 to track the API docs work.

This looks like it's linked to the wrong repo, perhaps?"
"You're correct @github. In this case though it looks like tasks are actually more desirable than the current setup. Please correct me if I read this wrong since I only skimmed the code, but it looks like this patch currently:

* adds a `Timer` to the state of the source generators
* sends a completion event with the duration for a given generator
* sends a completion event with the duration for the generator driver

I'd maybe look at changing this to use the tasks here by doing the following:

* emit a `GeneratorDriverStart`/`GeneratorDriverStop` event pair using the driver task and op codes
* emit a `GeneratorStart`/`GeneratorStop` event pair using the generator task and op codes
* calculate the run time by diffing the timestamps of the events (the infrastructure should already do this by embedding the duration in the `*Stop` events)

What's currently written should be fine, but would subject the times in the events to any issues the timer has with waking up etc. The times are already being provided by the event infrastructure so you can take advantage of that.
"
`while(cond) ; {}` and `for(x;x;x) ; {}` will get CS0642 for potential wrong empty statement. There's no warning here because the loop isn't follow by a `{}` block.
"Wrong comment, removing, is not supported on tvOS."
"This one looks wrong, but here's what CBPeer has:

```
	[iOS (8, 0)]
	[Mac (10,13)]
	[Watch (4,0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // CBPeer.h: - (instancetype)init NS_UNAVAILABLE;
	interface CBPeer : NSCopying {
```

So technically in iOS 8, Deprecated in iOS 9, Obsolete in iOS 9. What shall we do here?"
"@github @github Are we sure we'll always call `MarkBackingFieldAsCalculated`? (I think no)

If yes, are we sure it's going to be called only once? Otherwise, I'd need some sort of lock to prevent races causing duplicate diagnostics.

---

> to report this error into MethodCompiler's bag.

MethodCompiler isn't the only caller. Is there a problem if we always report the diagnostic into the bag given to the `SourcePropertySymbolBase` constructor?

---

> Alternatively, if we don't mind reporting this error per field usage, we could report this check in the binder, where ERR_InterfacesCantContainFields is reported.

I'm more with this approach, but instead of reporting on every field usage. We report once and use the property location, not `field` location.

And even then, we'll have a wrong behavior for initializers where we early create the backing field. This will another check and tests.

@github @github What do you think?"
"Instead of using contextual reflection it would be cleaner to just call `AssemblyLoadContext.GetLoadContext(type.Assembly).LoadFromAssemblyName`.

We recommend people stop using the `Assembly.Load` because of its weird behavior in terms of which ALC it loads into (without contextual reflection it relies on caller's ALC which is often times wrong)."
"> No, the transformation itself looks correct to me (well, there is one issue - `GTF_RELOP_JMP_USED` is not guaranteed to be maintained by this phase, so it'll have to be replaced by a check of the user's oper). It is just happening under conditions that are too lax. `LowerCompare` handles all sorts of relops, so this code will also optimize, e. g. `(x & 1) > 1` to `x & 1`, which is not correct.
>
I'm going to change `GTF_RELOP_JMP_USED` to
`cmpUse.User()->OperIs(GT_RETURN, GT_STOREIND, GT_STORE_LCL_VAR, GT_STORE_BLK, GT_STORE_OBJ, GT_STORE_LCL_FLD)`.
Is it correct? Do I understand you right? If yes then I'm concerned that I miss some operations or check wrong ones.
"
"@github you'd have to look at the output from the test; it's probably a build failure of some sort. The test will create a binlog for the build (the path is printed to the output), which you can view to see where things went wrong."
"to please policheck:
```suggestion
    # This is bad and wrong, but good enough to satisfy the build
```"
"Sorry i was looking at builder file and wrote comment at the wrong place.. and later i thought i didnt write it so wrote again.. "
"> I do not see the connection between this line and the method being changed in this PR. Could you please shed some light on it?

Right, wrong line, here: https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/importer.cpp#L6586"
"> if `prop` itself is a union or intersection property

@github uh dumb question, but any idea how to construct such a test? Union normalization is thwarting my very simple attempts."
"I think this is fundamentally the wrong approach here.  If we are worried about this scenario, we need a declarative way for source-generators to say: i need to process semantic models, please call into me to process that along with the other generators that are need the same.

Then, we aren't caching things and potentially blowing memory badly.  And we're not trying to come up with policies around caching that likely will not hold for arbitrary generators.  This last point is especially important.  This sort of approach doesn't work in general as we never really know what sort of caching strategy will work given arbitrary code execution."
"> Doesn't this break applications by removing a public API?

I think it's actually ok.  It's definitely a strange situation, but it's not a source breaking change because recompiling will just bind to the base method of the same signature, and if it were going to be a binary breaking change, it'd already be breaking, because the newslot method doesn't exist in the actual implementation. The base type has the same method name, and the C# compiler emits calls to this in a way where the runtime will end up just calling the base method, even though this has a new slot, e.g. via:
```
callvirt instance string [System.Net.WebHeaderCollection]System.Net.WebHeaderCollection::get_Item(string)
```
or
```
call instance string [System.Net.WebHeaderCollection]System.Net.WebHeaderCollection::get_Item(string)
```
depending on the access pattern.

@github and @github to correct me if I'm wrong."
"I'd removed it because I thought it was duplicate and wrong name.  But `FieldAsPositionalMember_Const` is on record classes. I'll restore

---
In reply to: [818381854](https://github.com/dotnet/roslyn/pull/52480#issuecomment-818381854) [](ancestors = 818381854)"
"I’d love to have something more powerful:

```ts
//@github 2322 ""Type 'number' is not assignable to type 'never'.""
```

Maybe with the option to omit trailing characters of the message and/or the error number. The former could be achieved via regular expressions:

```ts
//@github 2322 /^Type 'number' is not assignable to type 'never'\.$/
```

Rationale: It’s not only a problem to expect errors where there aren’t any, but also to expect the wrong kind of error."
"I'm going to close per https://github.com/dotnet/roslyn/issues/60002#issuecomment-1061414546. In case I was wrong and someone corrected me, I'll be happy to re-open and work on it."
"> does jit need an ability to deoptimize methods...?

Good question. Profile based optimizations rely on the past being a good predictor of the future. So any sort of profiling scheme is vulnerable to the profile not accurately representing future behavior.

We are using Tier0 to collect counts because it was fairly easy to set up, and provided an easy way to get profile data into the jit, so we could start improving the ways the jit uses profile data. But as you note, that means we only get to observe the first few calls for some methods. It remains to be seen how well (or poorly) this predicts future behavior in general.

I think we will get around to deopt eventually, as we start making stronger bets based on profile data and need the ability to reconsider and reoptimize if we have bet wrong. I don't know if we'd deopt because of poor block layout, though -- I was imagining it would be more for things like guarded (or unguarded) speculative devirtualization."
"> That's why I think referring back to SpeculativeSemanticModel is the most accurate fix.

I did try using that, but it didn't work. I've never used it before though so could very well be something I did wrong."
"> 1. Provide one signature completion per function-type constituent in the union
> 2. Provide signature completions only if there is exactly one function-type constituent in the union

I still don't feel super confident about putting a bunch of entries for the same symbol e.g. `M`, with no way to confidently distinguish between those, but I might be very wrong about it."
We generally don't try to provide quick fixes if they will generate wrong code. I think we have an `isExpression` helper which (ideally) gets kept up-to-date.
"> It looks like you've sent a pull request to update our 'lib' files. These files aren't meant to be edited by hand, as they consist of last-known good states of the compiler and are generated from 'src/lib' or possibly our lib generator. Unless this is necessary, consider closing the pull request and sending a separate PR to update 'src/lib' or https://github.com/microsoft/TypeScript-DOM-lib-generator

I modified the wrong file the first time, so I reversed the previous modification, re-repaired the files under `src/lib`, and did a force push"
"So interestingly, this seems to mean that JITing on arm64 in MacCatalyst apps is not possible.  The `pthread_jit_write_protect_np` function is marked `__API_AVAILABLE(macos(10.16)) __API_UNAVAILABLE(ios, tvos, watchos, bridgeos, driverkit)` ([pthread.h source here](https://opensource.apple.com/source/libpthread/libpthread-454.80.2/include/pthread/pthread.h.auto.html)).

So this did **not** work:

```console
$ arch -x86_64 ./build.sh mono+libs -c Debug --arch arm64 --os maccatalyst
$ cd src/libraries/System.Buffers/tests
$ ../../../../dotnet.sh build /t:Test /p:TargetArchitecture=arm64 /p:TargetOS=maccatalyst
```

I'm still investigating the crash to see if there's something else going wrong.  But at first blush it seems like the write protection bit still needs to be toggled, but the API for doing so is not available."
"> Can this be merged now?

I believe it is still broken and references a wrong name of the library in some of the managed code (per comments above and Helix results in the runtime-staging pipelines)."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Do all live range coalescing in genSetScopeInfoUsingVariableRanges to
make sure we catch as many cases as possible. In particular, we were not
coalescing ranges opened in the prolog with other ranges before.

The old logic also seemed incorrect: the end of live var ranges is
exclusive (the comment on it was wrong) which meant that the old logic
would coalesce two ranges that were separated by one instruction. This
means the new logic has more accurate reporting. However, the diff is
still negative because coalescing ranges from the prolog looks to be
more important: on my machine, SPC decreases in size by around 10 KB
from this change.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Lot of test runs marked as failures even though the logs say that the tests passed!

Eg.

`Libraries Test Run release coreclr windows x64 Debug` 
https://dev.azure.com/dnceng/public/_build/results?buildId=1364141&view=logs&jobId=55b384d0-d6b0-5894-fd8a-d754d713246e&j=55b384d0-d6b0-5894-fd8a-d754d713246e&t=8dcacd81-cb5e-5ac9-93e5-c3f19b19e19b

`wasm`: https://dev.azure.com/dnceng/public/_build/results?buildId=1364141&view=logs&jobId=a68d6dca-d11c-59af-6c4a-cf852cb20e3a&j=108d2c4a-8a62-5a58-8dad-8e1042acc93c&t=568f884b-cc12-5fd3-e7fe-790b5ac403f4

@github any idea what might be wrong here?"
"Me: But this feels like we're losing coverage from keys other than this one specific key...

AlsoMe: That's technically true, but there's not a whole lot in these tests that cares.

Me: What if there was something that failed in `AsymmetricDSASignature` because of some heretofore unseen key characteristic, akin to an RSA key having a diminished DP value?

AlsoMe: Then someone'd probably just hit retry and we'd never notice it.

Me: It'd still turn up in a report somewhere?

AlsoMe: The code is 17 years old, and has barely ever changed.  These days, you don't even really like the type existing, much less taking changes in it.  Also, it's DSA.  Does anyone even use DSA? If so, they're... (how should I say it?) ... wrong for doing so.  There's nothing left to test.  It'd have either been found by now, or won't ever be.

Me: Fair enough."
"There was a wrong image tag (same bug which caused https://github.com/dotnet/runtime/issues/70005), rerunning"
"Template projects are fine, this is just a case of the `Maui.Controls.Sample` project using the wrong `RegisterForJavaScript` overload. That said, I'm having a discussion offline with @github about potential improvements to the framework in this area."
"I'll give `ValueEquals` a try, maybe I was doing something dumb."
"Oops, copied from the wrong branch."
"If that's the case then we should consider renaming both of these methods.  The name simply does not match up to the actual implementation.  Consider this code

``` c#
var isConst = IsConstModifierType(type);
```

99% of developers who look at that line are going to interpret this as determining if `type` is the const modifier. In reality it's detecting if a) it's the const modifier and b) the present language supports it.  The 1% who will understand the behavior are those who realize the name of the method is wrong. 
 #Resolved"
"Why does LUT require me to define special LUT variables? Seems wrong. "
"Dumb question, is ""isVariableDeclarationContext"" necessary given that State.Generate can infer it from the first parameter passed in?"
Please excuse a dumb question but how and when can I get the fixing update if this is OK now?
"if what you mean is just return an empty parameter list and then check if it's empty and fill it with something... again, that's wrong because an empty one isn't the same as a missing one."
">typeWithModifiers = typeWithModifiers.SetUnknownNullabilityForReferenceTypesIfNecessary(moduleSymbol); [](start = 12, length = 102)

This looks like a wrong place to do this, constructors should handle this. #Closed"
"yes, it is possible, but that would mean we're in a very very broken state (e.g. the stream was created with the wrong properties / _jsonRpc is disposed).  Either way, liveshare / VS lsp client handles displaying and recording the error.  I don't know that there is anything we can do to recover here."
"Hey @github  I'm actually worried about this one, the time function stores a delegate to the underlying getter, but I don't think this test ever worked anyway as the value being stored is this the datetime from the first function, not a getter method to the underlying datetime.

[Here](https://github.com/dotnet/runtime/blob/master/src/libraries/System.IO.FileSystem/tests/File/GetSetTimes.cs#L68) we're creating the time function, but then just immediately storing the [output datetime](https://github.com/dotnet/runtime/pull/34229/files#diff-de74d261db69a93767732397a82a4f54R63) 

So either I'm going crazy, not understanding this or it didn't work and I'd like to look around the code base for more of these situations"
"If I wanted to perfectly preserve the old code, I should have had this function return `ImmutableArray<ISymbol?>`, which worked because the IsOk function handled null inputs. That was crazy, so I just fixed it instead."
"Ah, since it ends up being a mutable collection it does feel wrong."
"I sent the changes from the wrong branch, so I fixed that now."
"What happens now if we do have a programming error somewhere and the keys are not the same. The we use the key from the beginning which to my understanding would be wrong. So shouldn't we simply assert this or ignore the task if something goes wrong. "
Why weren't the existing PNSE configurations erroring then?  Sometimes CCI can get confused about core-assembly and a symptom will be that it emits things like System.String and System.Int32 etc instead of the keywords.  Usually the problem is that the references provided are wrong / imcomplete.
"OK fine. I'm trying to appease both you and @github at once. :P 

We'll save James's concern for a concerted effort LATER to not be dumb about this."
"@github 
I can remove it, sure. But this file uses ""wrong"" code style in other places as well :) 
![image](https://user-images.githubusercontent.com/10124814/47420375-f1602680-d786-11e8-9664-0d2b60f81bb3.png)
"
(Correct me if I'm wrong) It looks like you only set these in the constructor. Why not just make them `constexpr` in the namespace?
"The two code paths behave very different in these details. That's why I baked the exception handling into the member acessors.
Reflection does not throw a NRE when a method with value-typed parameter is called with argument null. So there is nothing to catch - Reflection.Emit throws NRE in this case.
Reflection throws ArgumentException when value is not assignable - Reflection.Emit throws InvalidCastException.

Bringing all these details about the member accessor implementation to the level where the delegate is called seems wrong to me.

> So you're interested in having better error handling


To be honest I was interested in a single unbox.any in .NET5 a week ago."
verb conjugations wrong. retrieves=>packs or retrieve=>pack
"Looks like my logic is wrong somehow. There are now multiple CS0017 that seem to be false positives.

Can someone have a look please?
I'm expecting viableEntryPoints.Count to be the number of synchronous entry points, and taskEntryPoints.Count to be the number of async entry points.

For versions less than 7.1, I take only the sync count, and for versions >= 7.1, I take the sum of sync + async.

@github @github  #Closed"
"@github, Yes the new test failed.

```
Expected:
                Diagnostic(ErrorCode.WRN_InvalidMainSig, ""Main"").WithArguments(""D.Main()""),
                Diagnostic(ErrorCode.WRN_SyncAndAsyncEntryPoints, ""Main"")
Actual:
                // (12,24): warning CS0028: 'D.Main()' has the wrong signature to be an entry point
                //   public static string Main() { System.Console.WriteLine(3); return null; }
                Diagnostic(ErrorCode.WRN_InvalidMainSig, ""Main"").WithArguments(""D.Main()"").WithLocation(12, 24)
Diff:
                    Diagnostic(ErrorCode.WRN_InvalidMainSig, ""Main"").WithArguments(""D.Main()"")
-->                 Diagnostic(ErrorCode.WRN_SyncAndAsyncEntryPoints, ""Main"")
``` #Closed"
"Ah right, I was having a déjà vu about this scenario and was searching that pr in wrong place (coreclr). 😁
I presume this PR also fixes #13647?"
This statement seems to be indented wrong.
"This indentation is wrong.  If the current test run passes, we can fix this up and merge without re-building."
"Oh, I see it's a Nullable<T>. In that case, I don't think you need the `!`.
@github should the compiler complain or am I reading wrong?"
"Now for a worst-case example, using the _Solarized Dark_ color scheme.

![image](https://user-images.githubusercontent.com/4181424/83972678-7145f080-a8d9-11ea-9d31-2ff4c2de0975.png)

As with the _Xterm_ scheme you can see some ""glitches"" in the 16-color mappings. Only now even the colors are wrong. For example, it thinks the _Solarized_ dark green is closer to a shade of yellow, and the blue looks more like cyan. But again, I don't think that is such a big deal - it's still mapping to a reasonable color.

The unexpected ""black"" spots are worse though. That's because those are colors that appear to be a medium shade of gray, and thus get mapped to index 8 (bright black), but in the _Solarized_ scheme, bright black is the darkest color in the palette, darker even than dark black. Without knowing the palette, there's nothing we can do about that.

And then you've also got the fact that half of the bright colors are just shades of gray. So the bright greens and yellows in the rightmost blocks of the color cube end up getting mapped to various shades of gray. But note that the original algorithm didn't do much better, with those greens and yellows being mapped to red, orange and blue.

Finally there are the shades of gray at the bottom of the test pattern where the middle section appears darker than the start. But again that's just because _Solarized_ has the black and bright black intensities reversed. The mapping in the old algorithm wasn't perfect either, but the shades of gray are at least in the right order.

So yeah, this case is a bit of a mess for the new algorithm, but that's not a huge surprise. And if you're using a _Solarized_ color scheme, then you're probably used to things being broken a lot of the time. 😉"
"> How did we miss this one?

Sorry! haha. I tested the (de)serialization. Just totally added it wrong in the defaults."
"I might be wrong, but I don't think completion would automatically format the text (like what code actions do), so this is required."
"> Isn't the result for `IsDynamicCodeCompiled` still wrong when the dynamic code is going to be interpreted?

I don't think so.  It will be `IsDynamicCodeCompiled == false`.

The code in intrinsics.c is only used by the JIT and the AOT compiler.  In the interpreter, `IsDynamicCodeCompiled` is an intrinsic that returns false.  So any interpreted calls to it will return `false`, as expected.  In any code that is compiled ahead of time, it will also be false."
"This is wrong :)

`protocol CHHapticAdvancedPatternPlayer<CHHapticPatternPlayer>`"
"I was wrong, it's set. I verified that -O (blended) and --Os (opt for size) both use DefaultPolicy and --Ot (opt for speed) uses ExtendedDefaultPolicy in crossgen2. "
The coding style is wrong in this file.
"@github could this be a breaking change?

The generated `Speed` property will be virtual, which means it can be overridden.

If a binary is overriding a virtual readonly property, and then the base property becomes read-write, the override will be wrong since it won't have the setter. I'm not sure mono will complain about this though.
"
"The PR title is wrong, I had it written up before I understood what was going on. I have not tracked down the original commit down, i'll do that tomorrow."
The copyrights in the other c# files are still wrong.
Ah I see. That sucks... now make sense.
"This feels wrong - having the makefile writing to the `~/.bashrc` file. Can the test code itself check if we are running in a docker container, and then add the switch?"
I think I got that wrong.
"Hmmm. Preventing this seems wrong and inconsistent with what `UTF16` formatting does. (`5.ToString(""G99"")` is valid)

The official docs (https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings) cover that it produces `Result: The more compact of either fixed-point or scientific notation` and `Precision specifier: Number of significant digits.`

There are notably some other inconsistencies here as well. Integers are missing support for `C`, `E`, `F`, and `P`. `Floating-point` more broadly doesn't support `D` either, but reasonably could (its basically just an alternative to `F0`)"
"I removed the global `foo` above because this PR reverses the decision documented here:

> A local variable would prevent import completions (see `completionsImport_shadowedByLocal.ts`), but a global doesn't.

If I kept the file `/global.d.ts`, you're right, it would still show up, but the imports below would _not_ show up, and this test would be testing the wrong thing."
"this test is a good start.

1. can you add tests for documentation as well?
2. can you add a test with the sequences [doc/no-tag, doc/tag], [doc/no-tag, doc/no-tag], [no-doc/no-tag, doc/tag], [no-doc/no-tag, doc/no-tag], [no-doc/no-tag, no-doc/tag]? There are other combinations but those are the ones that come to mind.
3. I couldn't get this to work in my editor when I played with it locally, although the tests pass. Probably I just set it up wrong, but you might want to make sure it at leasts works in your editor."
"the type qualification style seems wrong.  it should just be ""Name"" only right?
"
"I spent a couple hours today trying to convince myself if this check is needed or not, and the more I look at it the more convinced I am that the race condition is different than the original hypothesis

The `EECodeHeapIterator` uses `MethodSectionIterator` to go through all active jitted methods, and it will only return a method if the appropriate index in `HeapList::pHdrMap` is set.

But we only set the index in `pHdrMap` in `EEJitManager::NibbleMapSet`, which is called from `CEEJitInfo::WriteCode`, after the GCInfo is generated.

Either I'm missing something or the real issue is a combination of the freeing happening in the wrong order on all arches, and then pointer tearing on arm archictures because the publishing for codeHeaders happens outside the lock https://github.com/dotnet/runtime/blob/48adb84ddc2f48ae76adae5854f66371d5e6960e/src/coreclr/vm/jitinterface.cpp#L10927

If I run my repro app with the fix to move freeing the code header to after freeing the code data, I no longer hit the assert on x64, which suggests but does not confirm my hypothesis"
"> trying to load the min version first seems wrong to me.

Right, that is a remainder from the times when the minimum version was the version of ICU at the build time."
"@github Not recently, but in Dev16 as a part of the work to delay design-time builds until after project load. I mistakenly thought we could initialize just the files with Roslyn on the background and we wouldn't end up in any UI thread bound calls, but I was wrong. This is an attempt to fix that for this scenario (but not fixing the general desire to not have Roslyn init bound to the UI thread at all, like it is for CPS)."
"You are right. I have thought I have added it to the path, but I did it wrong. Now it is compiling libraries just fine."
"> The tests getting enabled in #38948 will need to be disabled again.

I think we should just skip the whole test assembly on Mono for Browser

EDIT: I thought there was only BinaryFormatter tests but that was a wrong assumption, we should just skip tests that use BinaryFormatter."
"@github Yes that is a known issue.  The current workaround is in the generate layout script
```bash
# Use the following script to:
# - Remove the incorrectly built native binaries above
# - Build the osx-arm64 native binaries for clr+libs
# - Run build-test generatelayoutonly
# - Replace S.P.C.dll w/ the IL version (presumably crossgen for the wrong arch)
# - Remove replace stray x86_64 native binaries (appears to not be needed)
src/coreclr/generate-osx-arm64-layout.sh
```"
"@github at this point I've reviewed all of the change. I have some remaining feedback about tests but it's small. Mostly opportunities to simplify with `[Theory]` usage and a couple of areas that got missed. There are two bigger items: 

1. The idea of having a pure syntax phase which would facilitate better caching. Think we can handle that as a follow up PR. Once @github confirms I can get an issue filed to track the work. 
2. Understanding why the tracked steps only has `Removed` when a file is deleted vs. having a mix of `Unchanged` and `Removed` [link](https://github.com/dotnet/roslyn/pull/61293#discussion_r890545938). Suspect this is a bug in the tracking code that we can track as an issue but want @github to verify (or help me understand why my expectations are wrong).

Overall this change is great. Really nice wins. 

Will sign off once we work through the test level feedback and then get the follow up issues filed as merge in the work"
"> I just tried to use this syntax without know it was a thing, and then I found this PR. So I'd say the syntax is intuitive to say the least.

Not everything which is intuitive is a good thing. I think that is was weswigham is trying to say.
I moved (after reading his comment) most of my unit test codebase from `@github` to `as unknown as string` (for tests with wrong function parameters) and found some unwanted wrong function parameters.

Typescript does not want to give you a bigger gun to shoot yourself in your foot."
"Hi @github, thanks for the review. I will update the PR accordingly, but I just need a little time, because things are kind of crazy right now."
"> Maybe thing's have gotten better since I last tried in macOS world (or maybe I did a bunch of things wrong 😄 ) but the problem with ""data"" keys as I call them is they don't seem to work fully in place of keychain-backed keys. e.g. `CopyWithPrivateKey` on `X509Certificate2` I think was one place that I hit.

I was playing with it today and it's a mixed bag situation.

First of all, the `SecKeyCreateWithData` API documentation states that it requires `kSecAttrKeySizeInBits` which is not true. The implementation doesn't look at it, never looked at it (as far as the published sources go), and even omits it in many of their own regression tests. It's much simpler to use when this is not required. I filed an Apple Feedback to clarify the situation.

Second, it does seem to work for RSA keys even with the item export. On ECC though it hits the problematic code paths in the native code which explain the issues you've hit.

I'll submit a PR later to convert the RSA code paths to use it.
"
"Ok, I think I get it now. It does look like checking for `entry.AbsoluteExpiration` and resetting `entry.AbsoluteExpiration` back to itself is redundant.

@github @github - any thoughts here?

> I also thought that if I did something wrong, then the existing quality wall should have rejected my changes.

I think the other way holds - if the existing quality wall rejects your changes, you did something wrong. But it isn't guaranteed that there are tests for every scenario. We strive for it, but it isn't guaranteed."
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

While looking at the Windows failures reported in #62384, #60267, #60204, #60017 I noticed a bunch of new MacOS failures starting from 2021-12-08, which all report `UnauthorizedAccessException`

By default, `LocalAppData` is undefined on Unix, the following line will actually reference to a file named `\NCLTest.Socket.SendPacketsAsync.testpayload` in the working directory of the test execution process:

https://github.com/dotnet/runtime/blob/a8c2d1eae1726b1e6ec50716b7d4c34bc21ba96e/src/libraries/System.Net.Sockets/tests/FunctionalTests/SendPacketsAsync.cs#L23

On CI it's a known folder so the path points to stuff like `/private/tmp/helix/working/A48D0921/w/C66409E5/e/System.Net.Sockets.Tests.app/Contents/Resources/\NCLTest.Socket.SendPacketsAsync.testpayload` on Helix Macs. I'm not sure what goes wrong with the access to the above folder, but I believe it's better to use the preferred `TempFile` utility to create temporary files, and this change will likely fix the `UnauthorizedAccessException`, since other tests using `TempFile` seem to be healthy right now.

Also changing the test to use the standard xunit test output instead of the legacy `TestLogging.GetInstance()`.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>antonfirsov</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Sockets`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> Does this need to be applied to the Pem ones as well?

Per local testing, disabling just these two types (ultimately the base class that powers them) was enough.  It'll get CI off the floor and let my compatriots in the OS group figure out what went wrong."
"> @github when I made the initial [proposal](https://github.com/dotnet/runtime/issues/69320#issuecomment-1133587458)

I think you are talking about this :
```
while (true)
{
    T? item;
    if (TryTakeWithNoTimeValidation(out item, Timeout.Infinite, cancellationToken, linkedTokenSource))
    {
        yield return item;
    }
    else
    {
        break;
    }
}
```

I did not follow the initial proposal, because (correct me if I'm wrong) your proposal assumes that when there is no element to take, `GetConsumingEnumerable` should end, whereas the actual code retry taking another element untill adding is complete
"
"Merging main fixed the issue above but now the layout is crazy

![image](https://user-images.githubusercontent.com/1235097/117460940-f2bc5d80-af44-11eb-8067-160ef88228ab.png)
"
This bool name is wrong though. Is _readingCompleted.
"the encoding collection is mutable, you could create your own instance and add it

this chafes me not because it's likely to be broken, but because it just communicates the wrong thing, you want to handle UTF8 in general, and using something like the webname is the right way to do that. "
"Too much Java. This doesn't look wrong anymore 😅 "
"Nah, just being dumb 😆 "
"What's the problem with that? Id rather see more information than less when we need to debug scripts. This doesn't cause any harm and it has obvious advantages in the case that in the future something goes wrong. (We captured all the information at the time, and we don't have to go and modify things to capture information in the future). Based on that, I'm leaving the script as is."
I was doing it wrong in another PR so i ended up not merging it.
There went something wrong...Remove this line.
"> (compareKind And TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds) = 0 AndAlso [](start = 18, length = 95)
> 
> (compareKind And TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds) = 0 AndAlso [](start = 18, length = 95)
> 
> (compareKind And TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds) = 0 AndAlso [](start = 18, length = 95)

Something feels wrong in this logic. Before, this 'if' was always executing while ignoring custom modifiers difference. With new condition, it looks like we never get into the block while ignoring custom modifiers difference.   #Closed
"
"The test was wrong before. Binding works with culture-specific values. The parsing was already culture-specific, so it was incorrect to test a culture-invariant input, and was failing on my machine (using months for days, and vice-versa).

The only reason it was passing in CI before was due to the cultural imperialism of `CultureInfo.InvariantCulture` being equivalent to US date formatting."
"> With this design, even the app developer proactively closes all their connections as soon as ApplicationStopping fires, this will still delay shutdown by an extra second. 😢

I just realized I was wrong about this because of `_ = CloseConnections()`. Why are we even building this list of Tasks then? 😆 

> We need to be the last application stopping event in the pipeline so that applications can block stopping before we do our work.

@github had a comment about this when I suggested something similar in triage."
"The `DataProtectionAdvancedExtensionsTests` one was my first attempt at fixing the issues before I realized a variable would resolve it, and then I forgot to update that file.

> What was wrong w/ using DataProtectionCommonExtensions explicitly❔

Oh, didn't realize that was already there, I just converted all of them during an intermediate attempt."
"> Sure. What’s great about this is that this thread will continue to run during the ramp up to a high number of threadpool threads. Today the thread pool needs to dequeue the timer callback as threads are slowly being injected into the thread pool (fighting other threads).

The thread could still get preempted. A developer could block too long in a custom IConnectionHeartbeatFeature callback. We could introduce a deadlock. There are a bunch of reasons we should still time OnHeartbeat() and log ""heartbeatslow"" if it takes over a second.

I agree that ""heartbeatslow"" warnings are likely more often caused because bunch of timer callbacks get dequeued in rapid succession as the threadpool works through a backlog of work items, but what's the harm in timing OnHeartbeat()? Are we sure that already-dequeued timer callback *never* gets preempted by the OS for over a second? What's wrong with logging something if and when this does happen?

Again, getting #15273 in the hands of customers would be telling."
"> This feels out of place. Conditions should be boolean; we have existing expression nodes that can express a null test. Also it seems strange to have an IfNull but not an IfNotNull.

I see nothing wrong to have an easy way to represent a null check in the graph. Of course, we'll discuss that at the design meeting. But for now I am changing Condition to a Value and adding this new branch kind. If any follow-up is needed based on resolution of the meeting, I'll do them in a separate PR  "
"A couple of issues so far:
- The arm64 ancm msi has the wrong bitness ancm included
- Schema file isn't included in the installer
- There's no way to test ancmv2 IISexpress installer as currently there's arm64 iisexpress build"
"> 900x improvement for `DecodeHeaderFieldLine_LargeLiteralValue` 🎉

What could possibly go wrong😁?"
"After splitting out it becomes quite obvious that values like this are wrong. For now I'm keeping them but that's just to keep the diff between YAML and real build minimul until we get some insertions going. Once we have that I will clean up this and other nonsense options. "
"Yes.  i would validate all argument passed in.  I would expect the set of file to exactly match the set of docs in the project.  if it doesn't (because it has too many, too few, or mismatched file names) i would throw and say that the caller is doing something wrong."
"this seems odd.  how do you know this will be ok?  Seems like the name could end up binding to the wrong thing.  We probably want to just generate the name fully (including 'global.'), but put the Simplificaiton annotation on it.

That said, i'm not going to push hard on this.  Esp as the previous approach was also not good :)"
">IsFeatureEnabled [](start = 59, length = 16)

This seems wrong. During binding, we shouldn't use `conversions.WithNullability(true)`. We should just use `conversions` (which has the nullability flag set to `false`). 
Tagging @github to confirm #Closed"
"> Determined by the caller. The one case in initial binding which still potentially passes true here though is when the nullable type is used explicitly in code. I assume, possibly wrong, that it should generate warnings in that case. 

Yes, that feels inconsistent with other similar places where we report warnings outside of NullableWalker. Like for example in SourceMemberContainerSymbol_ImplementationChecks.cs, SourceComplexParameterSymbol.cs, TypeSymbol.cs, etc.
We can easily check the language version here in the way the first iteration did it.

---
In reply to: [257406078](https://github.com/dotnet/roslyn/pull/33336#discussion_r257406078) [](ancestors = 257406078,257352693)"
"Even if ""this will never fail"" was true this is still the wrong place for the check. Powershell error management is really hard to get right. Asking future authors who change this line of code to correctly understand the implication of the change is not realistic. Putting it in the `try / finally` though ensures that it feeds into all of the safety checks we've put into place here. 

BTW: this can indeed fail. `$WarningPreference = ""Stop""`



"
"Hrmm... those extra scenarios feel like they would be fine for the caller to encode themselves though.  i.e. i try to get the node back.  if it has the wrong parent, then it's not a good node.  etc. etc."
"Yeah, this is definitely wrong, if we have a null type in hand at the time we're doing this check it means we either haven't frontloaded the binding enough, or we're doing the check too early."
"Yeah, I previously had an issue because pointers are unsigned so my less than zero tests always went the wrong way, which I hadn't expected :("
"To be honest I don't like the compat mode flag. Can't we deduce it from the missing V2 header instead? I find it really weird that we would have the new bundle, but try to mimic the old behavior.
Basically - I would expact behavior like this:
* `3.*` SDK will always use `3.*` `apphost` and also V1 header only
* `5.*` SDK building `netcoreapp3.*` app will use `3.*` `apphost` and V1 header only
* `5.*` SDK building `net5` app will always use `5.*` `apphost` and V2 header

The presence of the flag means that there will be a combination of `5.*` apphost used on `netcoreapp3.*` - I find that wrong."
Thanks.  It seems wrong to me that [DisallowNull] or [NotNull] should have any effect at all on a non-nullable parameter.
"@github I do not see a reason to create an object here each time a character is typed. the untitled event just sends around its resource URI and I would do the same thing here for files.

Cannot say it often enough, this model content change event WILL FIRE like CRAZY. And perf is a hot topic after hot exit :)
"
"Ok, if intentional there is nothing wrong as we have this with other assemblies that are also half in half out but it could cause problems whenever we service the package in the future as we would want to ensure that this implementation would be used instead of the one shipped inbox everywhere, specially if your assembly contains exchange types."
"I'm not quite getting why we need to map paths here, these come from the invocationinfo arguments, which is also where the path mapping is specified.  why can't these just be passed in already mapped?  

maybe an example of what mapping is being done might help.  Do the paths need to be mapped to load the files(if so why are they wrong to begin with), or is it just the lsif output that needs a new path?"
I think this enum descriptions and the default are wrong. Default should be true.
"This seems wrong, especially in the face of target-typed `new`. A type is not necessarily expected here."
"I don't know how to feel about this. I can't name another example of something generating COM class IDs on the fly to represent content processes. Is there a source in browser land or some other multi-process content/frame management code that does this already?

If we're the first ones to do it, it makes me think that we're ""holding it wrong"" and there's an existing provision somewhere that is better for this than camping the COM catalog."
The code is clear I guess. comparing 2 specific strings returning wrong results. I expect we'll remove this code when Windows fix the regression too. I added this code as I don't know specific versions will have the regression and when it is going to be fixed.
"I could be wrong, but I think we actually want this to stay the same? Looking at `MoveFocus` and that needs an arg, but is still defined here."
"This feels wrong to me. I know currently, actions are only triggerable with the keyboard, but theoretically, they might be invokable through other UI elements. Are we just trying to prevent the keys from being duplicated here? "
What was wrong with this?
"The description is derived and altered from `decimal`
![decimal](https://user-images.githubusercontent.com/24472128/94853173-43a62980-042b-11eb-823d-b307acaa58db.png)

I also experimented with a class implementing `IMethodSymbol` and calls to `ISymbolDisplayService` and `IDocumentationCommentFormattingService` but that ended up being too involved. So I decided to copy the `TaggedText[]` of the decimal and use that as a starting point.

It lacks the following features:
* The classification of source and target type as `keyword` is wrong for `Enums`
* The description is a bit misleading. It describes the operator method, but it would be more useful to describe the conversion itself, like ""Explicit cast from int to byte"".
* The description should not contain *of a* and *to a* to avoid grammar issues with type names starting with a vowel.
* Needs to be localized.
* Is `Environment.NewLine` correct here?
* It incorporates the nullable question mark in the method signature `int.explicit operator byte?(int value)` which looks odd (either no ? should be given (that is what user-defined operators do) or both types should have a ?)

Given, that the idea to create the `CompletionDescription` out of `TaggedText` is the right way to go here, I would like to change the description text and localize it."
"There's something wrong here, integration tests fail on Linux and macOS; terminal seems to be broken."
"Wrong. It is stronger in some aspects, but weaker in other aspects, e.g., dropping volatile reads or treating volatile reads as non-volatile ones.  That is why ""coding to the published open standard"" does not guarantee correctness and proves my point:

>""Correctly"" is a vague term until the alternative memory model is properly defined, documented, and developers are aware of it."
"🤯 magic Windows object system. The whole concept of waiting on a coroutine in another process sounds crazy to me, but I guess that is the runtime's problem not mine."
"I have written code similar to this for xabuild, maybe could reuse it? https://github.com/xamarin/xamarin-android/blob/b78dd8bf4b1656ade4f9a46de767975400bc0101/tools/xabuild/XABuildPaths.cs#L227-L245

This looks like the code in this PR would order alphabetical, I think I was seeing that putting things in the wrong order when I wrote the above for xabuild. I think checking for `Sdk.props`, is probably a good idea, though."
"I'm not totally sure about this, but should the text here read: ""You can use the navigation bar to switch context**s**"" (i.e. with the plural form of context)? I could be wrong, plus I see this string wasn't even declared in this PR, so probably not a big deal.

As an aside, I think ""navigation bar"" as a term isn't very intuitive, but I don't know of a better alternative. For example, when I first heard the term ""navigation bar"" I had to ask someone on the team what it was, because even searching the term on a search engine didn't pull up relevant results. Although this is likely unrelated to this PR, and just a comment about improving documentation in general. 😆 "
"Silly Q, but does the `map2.csv`-parsing code in generator trim whitespace, such that we could make this ""nicer"" by adding spaces before/after the commas to make things line up ""nicely""?  Or is that just ""crazy""?

```
E,30,android/accessibilityservice/AccessibilityService.GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD,40,Android.AccessibilityServices.AccessibilityGesture,TwoFingerDoubleTapAndHold,remove,
E,30,android/accessibilityservice/AccessibilityService.GESTURE_2_FINGER_SINGLE_TAP         ,19,Android.AccessibilityServices.AccessibilityGesture,TwoFingerSingleTap       ,remove,
E,30,android/accessibilityservice/AccessibilityService.GESTURE_2_FINGER_SWIPE_DOWN         ,26,Android.AccessibilityServices.AccessibilityGesture,TwoFingerSwipeDown       ,remove,
```"
"Possible crazy talk, but should we change the suffix if this & other classes from `Generator` to `Composer` to match the new base class?  Why did the base class name change?"
"The indentation looks wrong here.
"
"Indentation looks wrong here, are you mixing tabs and spaces?"
"Wrong pattern, i.e. that should not be static. I'm not sure if the registrars would run this correctly."
"I think @github meant the metadata, not the AOT code from that assembly (which ends up in the native executable). My guess is that it's needed, along with the .aotdata file, but my understanding of it could be wrong :)"
"Yea, I was wrong.  looks like it doesn't lose the owner."
"It is 0 thread safe, if two threads have the same object, change and change the callback, bad things will happen. The problem is that the C API relies on C callbacks, so unless I do something very smart, people should be doing the thread management in the code. I agree that the pattern sucks."
"Presently I like the separation because the `DeterministicKey` API is completely stateless. It's a `static class` which has all inputs which are effectively immutable data and returns a key. It fits with the theme of determinism. The builder APIs though are stateful, involve hierachies and non-static types. 

I thought about merging them but then we end up having to expose `abstract class` instances to customers for types they can never instantiate and for which there are no instance methods available. Felt wrong. "
This looks wrong. While the `incomingBuffer` buffer is empty on Unix it can have data via `ReplyOnReAuthenticationAsync`
"Up a couple lines we already check that to see if we should restore. I think this `rm` was just extra and me being dumb.
"
"shouldn't give two errors. the first one is the wrong one, I think."
Is _allocatedMemory == IntPtr.Zero a common case?  I'm wondering what would go wrong if you just deleted this if block.  Presumably then the only way this would fail is if this method could be called with a length in appropriate for whatever _allocatedMemory is?
"This looks wrong, won't it return true for any negative value?"
"> @github Does the WithStrictFeature also need changing to use withExperimental?
> Edit It need an entry in feature first. See #13238

I don't think so because it is not an experimental, @github can correct me if I am wrong. 
"
"Actually, does this need to have some negative termination condition to prevent it from going too far, e.g. not go out to the wrong scope? Or is that impossible?"
"Error message is wrong here -- the method is not public. Related: logged #163 
"
"This error message was changed from ""Constructor implementation expected."" to ""Constructor implementation is missing."". Given that error is usually reported on the line that contains the last overload wording ""Constructor implementation expected."" is not clear enough to explain what went wrong (should I create implementation instead of this overloads? But what if I need this overloads? etc...). In opposite ""Constructor implementation is missing."" implies that this overload itself is ok but it lacks implementation and thus error is reported
"
"Yes, it's a no-op, but the problem is that source build does not have access to this package at all. 

Another thing that we might want to consider is to set EnableRichCodeNavigation = true in one leg of CI build, so that we have some validation done during PR. This would avoid breaking our official build if something went wrong. How much time does it take to run the target?
"
"> If a mapped type has an as clause, is there a reason to continue to require that the type on the right of the in operator needs to be assignable to string | number | symbol?

@github You're right, no reason to constrain the `in T` type when an `as N` clause is present. Fixed by my latest commit.

> Also, in those mapped types, why does N need to be assignable to string (per your OP, as opposed to string | number | symbol)?

The OP was just wrong here, it's actually `string | number | symbol`."
"The fallback RID is not meant to guarantee binary compatibility for any OS. e.g. there are `linux-arm64` and `linux-mips64` also parented by `linux`.. so in case of fallback, the default x64 `linux` binary will definitely not work there.

> Android graph should match iOS here

If we examine the entire RID graph, we will see that it is actually iOS and tvOS that are at odds by not parented by OSX. It does not necessarily mean one approach is right and other one is wrong, it just shows that we are trying to achieve some concrete goals from the thing which does not guarantee them."
"Hm, still passing on my machine and failing in the lab.

I'll probably close this today and start over with smaller pieces to see where things go wrong.  Probable order:

* Move keygen (better OpenSSL 3 FIPS support)
* Move private key operations (eliminate RsaPaddingProcessor)
* Change parameter import/export
* Move public key operations / delete SafeRsaHandle."
"FYI, the auto formatting settings and using Visual Studio constantly change a few of the lines that aren't related to this PR and are in conflict with CI checks. See this undo commit for example https://github.com/dotnet/runtime/pull/53527/commits/1b484d7a9d088c4b41c20969b758142b1b9209ee.

Is something I'm doing wrong? I have muscle memory for ""Format Document"" and use it from time to time to make sure the formatting is correct. Should I not use it when working here, and instead rely on ""Format Section""? How do you work here and make sure the code is formatted accordingly to style rules?"
"Negative test cases

- [x] - wrong method name (and it's `not found` propagation to user)
- [ ] - wrong namespace
- [ ] - wrong class name
- [ ] - parameter: integer out of range
- [x] - wrong parameter type
- [x] - wrong parameter count
- [ ] - invoking method that throws (and it's propagation to user)
- [ ] - invoking method that never returns (like `await Task.Result` on something never completed)
- [ ] - test that cancelation token works"
Hey @github am I doing something wrong with `/t:UpdateRuntimeJson`? Should it have worked out of the box?
">> It's SendUsingHttp11Async itself we'd need to inline, into SendWithRetryAsync.

> That doesn't seem crazy either.

Inlining it would look like:
https://github.com/stephentoub/runtime/commit/d93ed5788d834ede6c307d476e76909add7bdae7
You're ok with that?"
"> A number of tests using `dynamic` can't work on iOS devices due to System.Reflection.Emit not being supported, added PlatformDetection checks for those.

~nit: I was wrong.  They're not using `dynamic` (from C#). They're using ""dynamic invoke"" (where Mono does an indirect runtime invoke using a single universal invoke wrapper)~

nit2: wrong again. They really do use `dynamic`.  (And also they happen to fall into the dynamic invoke code in the runtime.)"
Converting to draft as evaluation order is wrong.
"Tagging subscribers to this area: @github/area-system-xml
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

If this were actually called, it would either stack overflow or enter an infinite tail call loop.  Either way, it's wrong, and it would fail so spectacularly, it's likely just not being used.  @github?

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Xml`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
I think we still need to do this for ScopedCssInputs as they get removed from SWA as part of bundling (but I might be wrong)
@github/build something's wrong with our bootstraping process. I hit similar issues last time I setup a machine from scratch. Any ideas? This is the second report of this I've had today.
"GetQuality is wrong in this case, it works just fine if parameters is null, the Contract.Requires can be removed and paramters can be marked as nullable. There's no point in allocating an empty Paramaters collection just to search it for a property we know isn't there."
"`EditorConfigStorageLocation` requires `Func<string, object>`

```
Error   CS0407  'BinaryOperatorSpacingOptions CSharpFormattingOptions.ParseEditorConfigSpacingAroundBinaryOperator(string)' has the wrong return type
```
"
"This code appears to correctly modify the array so that there is a single applicable member when overload resolution succeeds. However, when there is more than one most specific candidate, this code may leave in the array some members marked as applicable even though some other member may be more specific (I think). We do have a way of seeing the candidate set through a public API in `SemanticModel` (I think). So it appears we may yield the wrong result in that particular case.

In the case that there is more than one most specific candidate (which will result in an error), I don't mind having the quadratic loop to precisely limit the set of candidates and eliminate those for which there is some more specific candidate. We could still have the code be fast in the non-error case, which is by far more common.

All of this is theory. I would ask @github to please either tell my why my theory is wrong, or craft a test that confirms my suspicion (by having a set of user-defined overloaded operators in a class hierarchy, an ambiguous use of the operator, and using `SemanticModel` to see the not-quite-correct overload set). And if I was right, I think the code should be adjusted, in the more-than-one-candidate case, to eliminate candidates for which some other method is more specific.
"
"this seems wrong.  you could have:

```a?[....actualStuff[```

Won't this find that outer conditional access?
Won't this "
">NamedTypeSymbol [](start = 110, length = 15)

The change in the key type looks wrong. #Closed"
Wrong direction
"these cases were already being tested in this file, but as part of one large test.  I kept hte large test, but also broke out individual cases to make things easier to debug when things go wrong."
"@github After removing the wasm/mono attributes the project generates an error:

```
   ""C:\Development\Source\aspnetcore\src\Shared\test\testassets\LinkerTest\LinkerTest.csproj"" (default target) (1:7) ->
   (ILLinkTrimProjects target) ->
     ILLink : error IL1009: Assembly reference 'System.Security.Permissions' could not be resolved. [C:\Development\Source\aspnetcore\src\Shared\test\testassets\LinkerTest\LinkerTest.csproj]
     ILLink : error IL1009: Assembly reference 'System.Threading.AccessControl' could not be resolved. [C:\Development\Source\aspnetcore\src\Shared\test\testassets\LinkerTest\LinkerTest.csproj]
```

There are no references to those projects in aspnetcore.

Any idea what is wrong? If not, who should I talk to?"
"this entire pattern seems repeated several times.  can we extract out a helper extension that does all of this for us.  That way we can make sure no one forgets an option, or improperly passes the wrong value to alwaysYield and whatnot?


effectively, it looks like it would be:

```c#
public static ContinueOnMainThreadAsync<T>(this Task<T> task, Action<T> act) { ... }
```"
"@github Sorry, I replied without seeing your comment somehow. 

> Why does `root.FindTokenOnLeftOfPosition(selection.Start).GetAncestor` not work for all three of those cases?

It would pick the wrong statement to refactor here:

```c#
            await TestInRegularAndScriptAsync(
@""class C
{
    void M(System.IDisposable disposable)
    {
        var ignore = disposable;
        [||]var name = disposable;
    }
}"",
@""class C
{
    void M(System.IDisposable disposable)
    {
        var ignore = disposable;
        using (var name = disposable)
        {
        }
    }
}"");
```
"
"This is the wrong check -- this will only return true if the type is missing, but you also want to check if it's malformed. You should be able to call `IsErrorType()` instead."
Do we have any tests that would fall if we got something wrong here?
I believe that some files are getting overwritten during the build with a wrong copy.
"This is the wrong file. Should be ""post VS2019"" one."
"I agree - but those other fields are just used to display data (number of items being worked on, status).  I don't think races here would be too impactful (but correct me if I'm wrong).  It could just slightly change the number of items / progress to whichever comes last."
Hmm that is weird. I'll have to debug to see what's wrong. Let me pull the sources and see what's happening here.
"I do not really like this call here.
When the repl gets layouted if the last element is visible we should reveal it?
Why should we reveal it if it is already visible?
Also on layout seems like a wrong place to call this. Layout happens every time the dimensions of the repl change and on the first render."
"In 3.1 we throw InvalidCastException; that seems more appropriate than JsonException which typically means the JSON is invalid for the given object model, not that a converter did the wrong thing.

Same applies to other tests here."
"Thanks for providing more feedback. Yes that seems to be happening, and I do agree we need to somehow hack it in that when the editor ""gets focus"" such that not too much is read out. We can aslo ask on NVDA github page for ideas how to potentially achieve this.
Also if we move paramter hints to also use `activeDescendetes` we will have the same issue, once the paremeterHints get closed the editor aria label we get re-read.

A crazy idea which I have and I am not sure if it will work is that we set `ariaHidden=true` on the editor instead of cleaning out its ariaLabel. The focus goes back to the editor, nothing gets read out and after a timeout we remove this `ariaHidden` attribute. That would sort of make the editor invisible to the screen reader for a very brief perioud of time.

For other fixes: no problem, no need for appologies :)"
"Sorry for the delayed response and thanks - yeah, this is wrong. GetSchemaTable should return nullable as in #41082."
"a couple questionss
- is there no clear / dispose on the queue?
- possibly dumb question: can we just dequeue the item and not callback since we don't want it to run anyway
"
"(This is a much larger discussion that doesn't have to be implemented as a part of this PR. So really I'm thinking out loud.)
I'm wondering if we should move `TerminalSettings` over to TerminalSettingsModel. Hear me out:
- if we're making `TerminalSettings` `IInheritable`, might as well move `TerminalSettings` over to TSM. It's a bit weird for us to grab this random file from a separate project, right? haha
- With regards to creating a TermControl preview in Settings UI...
  - I hit a problem today. TSE cannot depend on TermApp because that'd create a circular dependency (TermApp <--> TSE). So I tried making it so that TSE builds a `TerminalSettings` by firing an event to TermApp, but then TermApp would need to somehow get the synthesized `TerminalSettings` object down to the profile page _and_ update on each change. Having `TerminalSettings` be its own project or a part of TSM makes it it so much easier to construct `TerminalSettings` and just have one readily available for a TermControl preview.

What do you think?

CC @github for thoughts on this matter too. I might just be approaching the two things above completely wrong haha"
"```suggestion
        public SyntaxNode GetNameOfMemberBindingExpression(SyntaxNode node)
            => ((MemberBindingExpressionSyntax)node).Name;
```

no point doing an `as` only to immediately dot off of it.  if it's the wrong type it will crash, just with a less helpful exception."
"📝 This claim was added in a5973062, but has been wrong in OOP scenarios since 47d42f0. As best I can tell, bugs were never observed because we serialized metadata by references and didn't directly construct them in OOP code, so there was no way to end up with two projects sharing a metadata reference. This pull request resulted in OOP implementation code (which is running in-process for testing) sharing some metadata references, so we have to correct this at the same time."
The value parameter is set to null at the beginning of the method and isn't set back to pBuffer until after these throws.  Am I reading it wrong? Those checks for value == null look pointless.
"Seeing this warning after adding values for `highContrastLight`. Any ideas what I'm doing wrong?

```
color contribution gitDecoration.addedResourceForeground does not provide color 'defaults.highContrastLight'. Using color for `light` instead (#587c0c).
```

https://github.com/microsoft/vscode/blob/502276a3d6c93c67289f6c1a92a5a8b476003274/extensions/git/package.json#L2278-L2288"
"This seems likewise wrong: the `_CompileResources` target in this PR creates `$(IntermediateOutputPath)compiled.flata`, not `$(MonoAndroidIntermediate)`."
"Yep, this is wrong place. "
"1. i'm not a fan.  i'm not sure i'm aware of us *ever* checking these functionids for any purpose.  i think we need a rule that if we create a functionid that someone is assigend to track it, and they need to have a recurring task to check in and see if something is wrong.  otherwise it's just more noise in the noisiest system ever."
"It might be wrong to depend on the index. Keeping that temporarily until I get the ""basic"" of the feature working, then will write tests that fail with this and think of another way."
"Aaah, it looks like your newly-merged files have line endings in the wrong (?) (or at least, different-from-what-we-have-right-now) format -- this might make reviewing and merging this difficult.

This might be an instance where you'll just have to update ActionAndArgs youself to re-add those lines (based on your earlier commit before the merge). It's easy to lose things during a merge conflict ☹️ "
"@github no, a shallow copy would be wrong here.  This function is called from `monovm_initialize` with arguments that come from its caller.  We can't just stash them away in a global since we don't know how long the caller will be keeping them alive.  We _must_ do a deep copy."
"> Consider the following code. In this case, the lambda refers to another method type parameter, but there is nothing wrong to cache the delegate because the type parameter has a larger scope than the cache.

The concept of a ""larger scope"" for a type parameter probably needs a clear definition. And I think the suggested fix can esily be adjusted to ignore type parameters like that. However, if we are talking about method type parameters that are becoming type type parameters, then, perhaps, the ""after the substitution"" is the important part in the suggestion. Is it possible that ""after the substitution"" they become type type parameters and, therefore, are no longer treated as ""bad"" by the suggested fix? It has been a long time since I looked at this PR, so it is quite possible I am missing something."
that does not match the public API - wrong copy/paste ?
This would include net461-windows which is wrong as that's facade assembly. The current condition is probably missing a `'$(TargetsWindows)' == 'true'` condition.
"I'm more worried about the potential explosion of such functions for all `Mono*` types, across many API :| It won'y scale well, but maybe there's no need to scale it :)

They might be safer (as harder to get wrong) but they don't stop existing/new code from casting down to `MonoObject**` manually. Maybe renaming `xamarin_mono_object_release (MonoObject **mobj)` to something else (`_unsafe` suffix?) would made it easier to spot the _unsafe_ usage in the code base ?"
"> remove the task from the thread pool's queue
I might be wrong but that was only going to happen if the task was scheduled in a local thread pool queue and cancelled by the same thread. The first was not happening either way because we weren't passing `TaskCreationOptions.PreferFairness` to `Task.Factory.StartNew`."
"This is not a valid justification of suppressing this warning.

What line is this warning about? Something else is wrong here that we need to figure out."
"This seems like a very Windows-centric assumption. What characters does `IsNewLine` match? Because, and maybe I missed them, but I didn't see tests for other newline characters like `\n` and `\r` on their own.

I think this needs a `(may change semantics)` (or some other wording) note, because this converts specifically defined newline character sequences into whatever the current machine/git repo/etc. happens to be configured to use. If a user checks out a git repo on a mac, runs this refactoring on VS Mac, this could break things.

Unless I'm wrong and the new raw strings exclusively encode `\r\n` into the value? If so, then I guess this is okay, but would be good to confirm that `IsNewLine` doesn't match anything other than that."
"We need the `CMakeConfigurationEmsdkPath ` here. But I did the condition wrong, on the line above. It should be set for `Release` configuration."
"Oh, the transform looks correct -- the test file having a valid-looking output at all is wrong. Invalid syntax should either throw or stay as invalid syntax 😄 

This is probably out of scope of this PR, though, but the change to that file helped notice it."
"Should we enforce ordering between this and the other things listening to Paste? For example, there's some ""interesting"" paste handling in the RenameCommandHandler. If we get the ordering wrong, you may try to write to a readonly part of the buffer, etc. Let's figure out the correct ordering between all paste handlers.
"
"As described in https://github.com/deeprobin/runtime/commit/5de0bfb710285fb54e62fd0cbb381f5ca6901d8a#r70621974 this calculation is wrong. This causes test failures.

@github Some suggestions to fix?

```
      System.Tests.DateTimeOffsetTests.MaxValue [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   1704263580
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(17,0): at System.Tests.DateTimeOffsetTests.MaxValue()
      System.Tests.DateTimeOffsetTests.Ctor_Int_Int_Int_Int_Int_Int_Int_Int_TimeSpan [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   -1993306240
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(161,0): at System.Tests.DateTimeOffsetTests.Ctor_Int_Int_Int_Int_Int_Int_Int_Int_TimeSpan()
      System.Tests.DateTimeOffsetTests.Ctor_DateTime [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   -524812288
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(37,0): at System.Tests.DateTimeOffsetTests.Ctor_DateTime()
      System.Tests.DateTimeOffsetTests.Ctor_DateTime_TimeSpan [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   1704263580
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(84,0): at System.Tests.DateTimeOffsetTests.Ctor_DateTime_TimeSpan()
      System.Tests.DateTimeOffsetTests.ToLocalTime_MinValue [SKIP]
        Condition(s) not met: ""IsMinValueNegativeLocalOffset""
      System.Tests.DateTimeOffsetTests.Ctor_Long_TimeSpan [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   -1115569216
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(137,0): at System.Tests.DateTimeOffsetTests.Ctor_Long_TimeSpan()
      System.Tests.DateTimeOffsetTests.AddMicroseconds(dateTimeOffset: 1986-08-15T10:20:05.0700700+00:00, microseconds: -10, expected: 1986-08-15T10:20:05.0700600+00:00) [FAIL]
        System.ArgumentOutOfRangeException : Value to add was out of range. (Parameter 'value')
        Stack Trace:
             at System.DateTime.<AddMicroseconds>g__ThrowOutOfRange|87_0()
             at System.DateTimeOffset.AddMicroseconds(Double microseconds)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(528,0): at System.Tests.DateTimeOffsetTests.AddMicroseconds(DateTimeOffset dateTimeOffset, Double microseconds, DateTimeOffset expected)
      System.Tests.DateTimeOffsetTests.UnixEpoch [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   -1025114112
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1418,0): at System.Tests.DateTimeOffsetTests.UnixEpoch()
      System.Tests.DateTimeOffsetTests.Ctor_Int_Int_Int_Int_Int_Int_Int_TimeSpan [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   -1993706240
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(168,0): at System.Tests.DateTimeOffsetTests.Ctor_Int_Int_Int_Int_Int_Int_Int_TimeSpan()
      System.Tests.DateTimeOffsetTests.Ctor_Int_Int_Int_Int_Int_Int_TimeSpan [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   1801261056
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(234,0): at System.Tests.DateTimeOffsetTests.Ctor_Int_Int_Int_Int_Int_Int_TimeSpan()
      System.Tests.DateTimeOffsetTests.ImplicitCast_DateTime [FAIL]
        Assert.Equal() Failure
        Expected: 0
        Actual:   -524812288
        Stack Trace:
          E:\external\dotnet\runtime\src\libraries\System.Runtime\tests\System\DateTimeOffsetTests.cs(1151,0): at System.Tests.DateTimeOffsetTests.VerifyDateTimeOffset(DateTimeOffset dateTimeOffset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, Int32 microsecond, Nullable`1 offset)
```"
"I'm not trying to say what is right or wrong, just pointing out the consequences of such change."
"Possibly a dumb question, but doesn't the line end at `lineStarts[i+1] - 1`?"
"FWIW, your treatment of unsigned comparisons is still wrong, you cannot use the signed comparisons for the interval checks in that case. It is probably the reason for this problem. I would suggest you shape the code somewhat like the example I posted earlier."
"I like the concept, but I'm not crazy about the name `FunctionLike`. What gets lost is that it is a declaration (vs. say a symbol or a type). Perhaps FunctionLikeDeclaration is better. Or FunkyDeclaration. :-)
"
"@github  In the API review the allowed targets for the attribute were actually discussed quite a bit - I got the feeling that we try to reduce it to the very minimal set possible. Mainly because it gives people direct feedback in VS/build if they got it wrong.

In this case I don't like that solution mainly because it's basically always wrong (with this one little internal exception). I do agree that in theory it doesn't make sense to put the attribute on the method directly, but I can easily see people getting confused by this pretty quickly."
"Hm, not clear if something went wrong with these builds"
@github/roslyn-compiler for review. Apologies for everyone else I accidentally pinged by basing off the wrong branch.
"> Many workloads for which tasks were originally introduced, actually. Consider, for example, parallelized divide and conquer. A worker partitions its work into multiple pieces, queues identical workers to process N - 1 of those pieces, processes its own, and then waits for those other workers to complete. Also think about algorithms that require coordination between those pieces, such as various operations used by PLINQ (e.g. OrderBy) that needs to block each of the workers until they reach a common point so that they can exchange data and all continue on, and what would happen if one of the workers was throttled indefinitely

Today do the implementation of those kick end up doing Task.Wait?

> I think that's the wrong direction, at least for the foreseeable future. If we decided to go with an approach like the one proposed in this draft, I have trouble seeing it as anything other than opt-in, given all of the previously cited concerns, the potential for introducing deadlocks where they weren't previously, the potential for casting way too wide a net, the potential for negatively impacting the throughput of unrelated workloads, etc. _If such a mitigation was added as opt-in, and if enough testing demonstrated it was a good decision for certain workloads, then it could potentially be automatically opted-in for those, e.g. if you felt ASP.NET should always turn this on. Even there, though, I'd be surprised if in the current configuration that was a wise choice.

Yes I have similar fears but I'm looking for solutions. Maybe this isn't this one but there are aspects of this that seem interesting. Say we added a public API to enable this and it was opt-in, I could see the potential for adding a piece of middleware or filters that enables this on the current workitem before the blocking code executed. Something like this:

```C#
[HttpGet(""/blocking"")]
[EnableBlockingMitigation] // This name is terrible
public string BlockingLegacyCodez()
{
      return new WebClient().DownloadString(...); // I know we're never supposed to use this API
}
```

That filter could yield to thread pool to get off the current work item and enable mitigation on a unique workitem that's closer to this code. The equivalent of doing this:

```C#
[HttpGet(""/blocking"")]
public async Task<string> BlockingLegacyCodez()
{
      await Task.Yield(); // Make a new work item
      ThreadPool.EnableBlockingWorkitem();
      return new WebClient().DownloadString(...); // I know we're never supposed to use this API
}
```

Thoughts?"
"PTAL @github/jit-contrib , the PR fixes a recent regression and fixes wrong abstraction for `mov_xmm2i`."
"> > The Exception is not bubbled up to host.StartAsync.
> 
> I think that behavior is wrong. We should revert it.

@github - In looking at this again - an `Exception` thrown from a `BackgroundService` was only ever bubbled up to `host.StartAsync` when it was [thrown from](https://github.com/dotnet/runtime/pull/50569/files#diff-3f578e113b4e83fd5fe9e0073a4ebdd6230895dfc7429b058c26d6bb5fb47849L65):

```csharp
// Fire IHostedService.Start
await hostedService.StartAsync(combinedCancellationToken).ConfigureAwait(false);
```

Otherwise it was just logged in `HandleBackgroundException`. I believe that this was probably extremely rare, and I wouldn't be surprised if most errors [occurred in](https://github.com/dotnet/runtime/pull/50569/files#diff-3f578e113b4e83fd5fe9e0073a4ebdd6230895dfc7429b058c26d6bb5fb47849L79-L87):

```csharp
await backgroundService.ExecuteTask.ConfigureAwait(false);
```

Since it is possible for an error to occur on either call, I intentionally grouped these two together to capture both possible background service failure scenarios. Are you suggesting that we `throw` from within the `TryStartBackgroundServiceAsync`? If so, why bother calling `StopApplication`?

I'm still a bit confused on why we wouldn't call `StopAsync` in the `catch` clause in the `TryStartBackgroundServiceAsync` method. 

**_Update_** in chatting this over with @github I have a better understanding now. Updating this now."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/dotnet/runtime/issues/53362

This change is fixing the wrong behavior of the Culture Native and Display names. We had the following behavior:
- Display names were cached which is wrong. The display names should be treated as the localized resources and should be retrieved every time using the CurrentUICulture.
- There is some old special case for supplemental culture which is not applying anymore because Windows already using supplemental culture LCID values for some of its built-in cultures. 
- When requesting the native or display names using ICU, if ICU couldn't find a suitable resource for the request, it just return the culture name e.g. `en-US instead of English (United States) ` which is not suitable to use in the UI apps.

The fix here is doing the following:

- For display names now, we use CurrentUICulture to retrieve the name.
- Removed the supplemental culture special case. 
- When requesting the display and native names from ICU, we fallback to English names if couldn't find resources for the requested culture. 
- Added some test

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> @github can you please take a look at the Fuzzlyn-arm64 failure, is it worth investigating?

I've seen it a few times, I don't think it's related to this PR. Seems like either Fuzzlyn can generate extremely large structures or something else is wrong. It's probably the former."
"> I'm not against an internal abstraction here if it helps more than it hurts, but I'm not seeing it at the moment. You mention this will help better address future issues; can you elaborate?

3 things come to mind:

1. There's a reqeuest from the OpenXML team to bring back the `ZipArchive.Flush` method that we didn't port from .NET Framework. The API would unblock some problems they found in System.IO.Packaging APIs. I experimented with adding a `Flush` method, and realized that the behavior would have to be special-cased depending on the mode. `Flush` would do exactly what we currently do inside `Dispose`, minus the disposal of the internal streams. But since the expectation is that the user should be able to continue manipulating the archive and entries after they call `Flush`, then we need to put the streams back into a good state, and this is where I was finding the complications due to the read/create/updaet logic being intermixed.
2. `ZipArchive` also has different behaviors when loading the archive and the entries, which depend on the mode. It would be quite helpful to have a separation of the logic depending on the mode, if we want to fix the memory-related issues (linked in the description).
3. Finally, if we want to add zip64 support, I imagine we would have to split the code even more. I haven't dug deep into this, but my first impression is that this could be another layer of abstraction if we use the strategy pattern (I could be wrong).

> I generally agree with @github here; I'm not seeing what this abstraction is really buying. 

A good alternative @github gave me is to add specialized methods instead, and split the methods into partial files depending on the method. I like the option since I don't have strong arguments for points 2 and 3 yet. So until I can confirm we have an additional abstraction layer besides `ZipArchiveMode` that would require a strategy pattern, we can stick to partial files.

How does that sound?"
"> I think there was more utility back when we thought we would have multi-RDN value support.

Yeah, but we have the wrong shape for that.  The one multi-valued test we have (https://github.com/dotnet/runtime/blob/e74c3e812fa5c96dc7ebaff655bff8820f3f9a62/src/libraries/System.Security.Cryptography.X509Certificates/tests/X500DistinguishedNameTests.cs#L23-L33) shows the encoding:

```
SEQUENCE (1 elem)
  SET (2 elem)
    SEQUENCE (2 elem)
      OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)
      PrintableString James
    SEQUENCE (2 elem)
      OBJECT IDENTIFIER 2.5.4.10 organizationName (X.520 DN component)
      PrintableString Microsoft
```

If it was a multi-RDN escape hatch then we'd've had just `AddEncoded` which required the input to be a SET( OF).

> I suppose AddEncoded could be removed under the same pretense that multi-RDN was removed: you are doing something interesting / unique and you can probably just use AsnWriter.

Yeah.  Let's just cut it.  If we remember why we wanted it it's easy enough to add back (and already API-Approved)"
"The test still fails with:

```
[17:25:59] fail: [FAIL] System.Globalization.Tests.RegionInfoPropertyTests.DisplayName(name: ""en-US"", expected: ""United States"")
[17:25:59] info: Assert.Equal() Failure
[17:25:59] info:            ↓ (pos 1)
[17:25:59] info: Expected: United States
[17:25:59] info: Actual:   US
[17:25:59] info:            ↑ (pos 1)
[17:25:59] info:    at System.Globalization.Tests.RegionInfoPropertyTests.DisplayName(String name, String expected)
[17:25:59] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object obj, Span`1 args, BindingFlags invokeAttr)
```

IIUC, we are building with `InvariantGlobalization=false`, so I would expect this to pass. I tried this with a regular build, and relinked.
This [EnglishName test](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Globalization/tests/System/Globalization/RegionInfoTests.cs#L159) passes though.
@github @github please correct me if I'm wrong.

So, if that's correct then we can close this PR, and the issue should remain open."
"I don't think passing in 1000 endpoints here is viable whether we pre-sort them or not. You're asking us to iterate 1000 endpoints multiple times and process policies on all of them. At that point you're holding it wrong. 

I don't think this is a implementation strategy we should try to enable. If you're writing a CMS with 1000s of endpoints you need to apply some kind of lookup yourself and not *just* use `IEndpointSelectorPolicy`. I haven't heard anyone ask for this."
"I think the reason we didn't `try`/`catch` this before was that we expected that, if any of the `Dispose` calls throws, then that's going to bubble up to be an unhandled exception on the renderer, which is fatal and will dispose everything (including all components) anyway.

Was that reasoning wrong? Could you clarify why?"
"One other sticking point is that there's no guarantee that the same algorithm is used to compute the hash code of a `string` vs. the hash code of a `ReadOnlySpan<char>`. In fact, `Dictionary<string, ...>` _throws away_ the default comparer and uses a specialized string comparer for greater performance. It's definitely solvable, but doing this in a manner that won't regress performance of _existing_ scenarios is a much more complex problem than it appears.

Edit: The reason this matters is that the hash code is needed to compute which bucket the key maps to. If we inadvertently compute the wrong hash code, we could end up in a situation where the dictionary truly does contain some `string` value but we say it doesn't contain the equivalent `ROS<char>` value."
"Wouldn't doing it on a `finally` block the CircuitHost achieve the same result? If something went wrong with the previous call, we should fail and tear-down the circuit, shouldn't we?"
"This seems wrong to me.  THe idea behind this type is that it's long lived, and unbound to any particular cancellation exception we might have gotten for some operation (like the ones we create during 'add using').  If we don't have this cancellation token, and we now use an ambient cancellatoin token passed in by a feature, we will make it so that this type is no longer long lived, and no longer sits patiently in its loop, updating the index on its prescribed schedule."
"The justification is that the implementation is incorrect, and the test carefully tests only one case for which the incorrect implementation happens to work. If you test the existing implementation on a random sequence of data it will be wrong more than 1000 times for every time it gets it right.

The escaping logic in the compilers is today computed on a character-by-character basis. There is not enough information from a single surrogate character to determine whether or not escaping it is necessary, so escaping it is the only correct approach without considering more context.

It might be worth changing the escaping logic by making it more complex such that it scans the sequence of characters and considers each character in the context of the characters that precede it and follow it to determine if escaping is necessary. I don't think that is worth the effort.
"
"Sorry, here's the top error from the latest build:
https://dev.azure.com/dnceng/public/_build/results?buildId=904543&view=logs&j=1b89928a-2219-5ef9-602f-f95beb3da4dc&t=bcce746a-741e-59b7-adec-a4a82d8c5e52&l=1721
```
  Error: Could not load file or assembly 'System.IO.Pipelines, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified. (0x80070002)
  Error compiling F:\workspace\_work\1\s\artifacts\bin\Microsoft.AspNetCore.Components.Web\Release\net6.0\Microsoft.AspNetCore.Components.Web.dll: Could not find or load a specific file. (0x80131621)
  Error: compilation failed for ""F:\workspace\_work\1\s\artifacts\bin\Microsoft.AspNetCore.Components.Web\Release\net6.0\Microsoft.AspNetCore.Components.Web.dll"" (0x80131621)

```

There's also something wrong with the razor tests.
https://dev.azure.com/dnceng/public/_build/results?buildId=904543&view=ms.vss-test-web.build-test-results-tab&runId=28871332&resultId=100024&paneView=debug"
"Perhaps you can file a follow up issue to do so, to minimize this change. I think there is value in letting users know things are wrong. I am doing this in the EnC implementation now. It helps us prevent ""it doesn't work and I don't know what's wrong"" kind of bug reports."
"Given the current setup when I hit F5 will the debug fail to launch if the copyright is wrong? That was the #1 complaint when it came to StyleCop. "
:memo: Wrong indentation
Another case where we are accepting a base type and forcing it to be a derived type on the implementation. This feels very wrong.
"That's because they're wrong :) I mixed up the ordering, and the cast will never make sense. Fixed and removed the cast"
"i agree.... however, just do a test for this so you don't crash if you're wrong in the future :)"
"There are cases where it does not make sense. For example, if there are multiple arguments and it is not clear which one to blame for having wrong value. "
You're not getting it because it was wrong. Switched to false and added a test. 😬
">ERR_AttributeCantBeGeneric [](start = 37, length = 26)

This diagnostic seems wrong. It should be a LangVer diagnostic, or `ERR_NotAnAttributeClass`, or maybe both?"
"Unsure if the view model is the right place or if the listeners should be in the notebook text model. For instance, an extension can open a notebook document without an editor and the change the language for a cell. I believe in that case we would miss those updates but I might be wrong"
wrong formating
"`std::size`! How did I not know about thee?

I've been writing dumb stuff like `std::extent<decltype(x)>::value`"
"I'm not sure where on the barometer to place this, but it took me a little while to remember that _whether we produce a 0 or a 1_ is based on the receiving type. `_GetModifier` takes a size_t, so gets a 0. Discriminated types, as you called out, get a 1. If somebody were to change the type `_GetModifier` accepts, all this code would silently continue working (so long as the type it accepts meets `sizeof(T) == sizeof(size_t)`) but produce the wrong value.

Is that a concern? Or, am I overindexing on the concern?"
"I combined both the ""Add parentheses"" and ""Remove parentheses"" for methods in only one analyzer, but it's still not working.
Can't even get the breakpoint for InitializeWorker to be hit. Not sure what's wrong."
@github I removed the fallback. But at @github request added an exception if the registry key from the ENVVAR does NOT exist. This seems reasonable given the fact that the key should almost never be wrong.
"It ended up in the wrong spot on my first test of the https://github.com/lunapaint/tga-codec build task:

![image](https://user-images.githubusercontent.com/2193314/175293356-c4b2a767-e6e9-4bdb-aa04-4cc983b2a5ad.png)
"
"You're gonna think this is crazy, but... check this out.

I *think* you can do this with WIL, and I believe that you can even use the pseudotokens that do not need lifetime management.

```suggestion
auto elevationType = wil::get_token_information<TOKEN_ELEVATION_TYPE>(GetCurrentProcessToken());
auto elevationState = wil::get_token_information<TOKEN_ELEVATION>(GetCurrentProcessToken());
```"
"ok so the problem with the failing tests is because we are not correcting the casing of the items the ManagedParser is generating. Its because we are now using the `R.txt` file if it exists. Before the path was wrong so it was never picking  it up. 
I need to look into how to fix this."
"> I'm thus slightly dubious about the `NetworkInterface`-related errors in this PR being due to the emulator.

Continuing on this, something is *wrong* with this PR.

Case in point:

  * Good: https://artprodscussu1.artifacts.visualstudio.com/A011b8bdf-6d56-4f87-be0d-0092136884d9/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2RldmRpdi9wcm9qZWN0SWQvMGJkYmM1OTAtYTA2Mi00YzNmLWIwZjYtOTM4M2Y2Nzg2NWVlL2J1aWxkSWQvNDQ5MDAyNy9hcnRpZmFjdE5hbWUvVGVzdCtSZXN1bHRzKy0rQVBLK0luc3RydW1lbnRhdGlvbistK21hY09T0/content?format=file&subPath=%2FDefault%2FMono.Android_Tests-Signed.apk
  * Bad: https://artprodscussu1.artifacts.visualstudio.com/A011b8bdf-6d56-4f87-be0d-0092136884d9/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2RldmRpdi9wcm9qZWN0SWQvMGJkYmM1OTAtYTA2Mi00YzNmLWIwZjYtOTM4M2Y2Nzg2NWVlL2J1aWxkSWQvNDQ5MDE5My9hcnRpZmFjdE5hbWUvVGVzdCtSZXN1bHRzKy0rQVBLK0luc3RydW1lbnRhdGlvbistK21hY09T0/content?format=file&subPath=%2FDefault%2FMono.Android_Tests-Signed.apk

Those are `.apk` files.

Download, and grab `libmonodroid.so`:

```
% unzip Mono.Android_Tests-Signed.apk lib/x86/libmonodroid.so
```

Disassemble:

```
% $HOME/android-toolchain/ndk/toolchains/llvm/prebuilt/darwin-x86_64/bin/i686-linux-android-objdump -D -s  lib/x86/libmonodroid.so > a.s
```

Then grep the contents of `a.s`.  The ""good"" version contains multiple mentions of `netlink`:

```
% grep netlink a.s | wc -l
     152
```

The ""bad"" version…doesn't:

```
% grep netlink a.s
 5a40 006e6574 6c696e6b 00706173 73696e67  .netlink.passing
```

The bad version contains *only one* mention of `netlink`, *not* as a function.

*This* is why all the `NetworkInterface`-related tests are failing: the CMake cleanup broke something."
"Something's wrong locally with this PR, I get an error I didn't get before (this is during XA build, not application build): 

```
bin/Release/lib/xamarin.android/xbuild/Xamarin/Android/jcw-gen.exe"" -v10 -o ""src/Mono.Android/obj/Release/netcoreapp3.1/android-30/jcw/src"" -L ""bin/Release/lib/xamarin.android/xbuild-frameworks/Microsoft.Android/netcoreapp3.1/"" -L ""~/.nuget/packages/microsoft.netcore.app.ref/3.1.0/ref/netcoreapp3.1/"" ""bin/Release/lib/xamarin.android/xbuild-frameworks/Microsoft.Android/netcoreapp3.1/Mono.Android.dll""
  jcw-gen: Java.Interop.Tools.Diagnostics.XamarinAndroidException: error XA4200: Cannot generate Java wrapper for type 'Org.XmlPull.V1.IXmlPullParser'. Only 'class' types are supported.
    at Java.Interop.Tools.Diagnostics.Diagnostic.Error (System.Int32 code, Mono.Cecil.Cil.SequencePoint location, System.String message, System.Object[] args) [0x00000] in external/Java.Interop/src/Java.Interop.Tools.Diagnostics/Java.Interop.Tools.Diagnostics/Diagnostic.cs:153 
    at Java.Interop.Tools.JavaCallableWrappers.JavaCallableWrapperGenerator..ctor (Mono.Cecil.TypeDefinition type, System.String outerType, System.Action`2[T1,T2] log, Java.Interop.Tools.Cecil.TypeDefinitionCache cache) [0x0007f] in external/Java.Interop/src/Java.Interop.Tools.JavaCallableWrappers/Java.Interop.Tools.JavaCallableWrappers/JavaCallableWrapperGenerator.cs:113 
    at Java.Interop.Tools.JavaCallableWrappers.JavaCallableWrapperGenerator..ctor (Mono.Cecil.TypeDefinition type, System.Action`2[T1,T2] log, Java.Interop.Tools.Cecil.TypeDefinitionCache cache) [0x00000] in external/Java.Interop/src/Java.Interop.Tools.JavaCallableWrappers/Java.Interop.Tools.JavaCallableWrappers/JavaCallableWrapperGenerator.cs:65 
    at Java.Interop.Tools.App.GenerateJavaCallableWrapper (Mono.Cecil.TypeDefinition type, System.String outputPath, Java.Interop.Tools.Cecil.TypeDefinitionCache cache) [0x00000] in external/Java.Interop/tools/jcw-gen/App.cs:86 
    at Java.Interop.Tools.App.Main (System.String[] args) [0x00215] in Java.Interop/tools/jcw-gen/App.cs:71
```

I'll work on it tomorrow"
"@github [asked](https://github.com/xamarin/xamarin-android/pull/6340#issuecomment-928579566):

> Is this a symlink?
> 
>     /s/bin/Release/lib/xamarin.android/xbuild/Microsoft

Yes:

```
# Microsoft symlink points to?
lrwxr-xr-x  1 builder  staff  77 Sep 27 22:07 bin/Release/lib/xamarin.android/xbuild/Microsoft -> /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/xbuild/Microsoft
```

Which is more or less what I expected.  Yay?

No NodeJS dir anywhere in there, though.

Also, re-reviewing [the CG issue](https://dev.azure.com/devdiv/DevDiv/_componentGovernance/112013/alert/5831478?typeId=6317076), the **Affected pipelines** include:

  * Xamarin.Android (Build and Smoke Test)
  * Xamarin.Android (Dotnet Build and Smoke Test)

which are on the *Windows* machines.

No idea why **Location** is providing Unix-style paths if this is perhaps happening on Windows?

Looks like I'm checking the wrong machine, though."
"I believe `everytime` is intentional because “_you would all be running the latest console bits everywhere everytime_” looks nicer. Yet all dictionaries agree on _everywhere_ and _every time – I don't know the reason for this discrepancy, it's probably explained somewhere on the internet ([Everytime or Every Time?](https://www.grammarly.com/blog/everytime-every-time/)). Other exceptions seem plain wrong.
"
seems I read the wrong thing earlier and there's no base ctor to copy :)
"@github  I got it wrong in the other PR, that's why I triple tested :/ 

Yeah screenshot is just to show it does not crash. "
"`Contract` ""blows up"", meaning we get an actual failure (and watson etc.) so that we know we did something wrong and have to go fix it.   A null check like this masks a logic bug in our code, which can then manifest as broken behavior for users thatw e have no insight on what actually went wrong.  

In general, if something indicates a logic bug in our code, we do not try to be resilient to it.  Rather, we fail early and report the NFW so we can actionably address teh scenario.  This approach is born out by enumerable experiences trying to go the ""be resilient and just trudge along"" route, and how much extra cost that has given us over the years as we've attempted to track down failures and intermittent behavior for users."
"> @github you'd have to look at the output from the test; it's probably a build failure of some sort. The test will create a binlog for the build (the path is printed to the output), which you can view to see where things went wrong.

One of the svg files were too new of a version! I never would have guessed that haha thanks"
actually this comment is wrong. I'm removing it. The correct cases are already articulated in inline comments just below.
"> Lets wait to see the diff. I wonder if the links are correct in the comment. I suspect they won't (but I hope I'm wrong)

Totally forgot to change the links. I'm scratching my head as to why the CI didn't fail regarding the wrong link names, but I will get those fixed"
yeah. also addeventListener has the wrong signature. will need to fix them all.
"Note: This test was simply wrong. Removing either cast to CByte(0) would result in the type of the ternary conditional changing from `Byte` to `Int32`. These should only be marked as redundant if the type of the ternary conditional is already `Int32`.
"
"Indention here is off; not sure if it's this line that's wrong or all the others.
"
"This return type is wrong. AFAIK, `module.exports` here should be a `number[]`."
"> That might just be a case of ""play stupid games, win stupid prizes"".

That is how I am thinking of this feature. There are cases where the compiler can definitely determine if the user is doing something wrong, but also where it _might_ be doing something wrong. The [`Span<T>.ToArray()`](https://docs.microsoft.com/dotnet/api/system.span-1.toarray) is another example. If a user calls `ToArray()` and `T` is known to be ByRefLike, the compiler could issue a failure. However, if `T` isn't know at compile time then it would be up to the implementer to have handled this appropriately using something like the proposed intrinsi-fication of `typeof(T.).IsByRefLike` in this document. The updated `Span<T>.ToArray()` would look as follows and handle the case at runtime. The other APIs in question would have similar checks.

```diff
[MethodImpl(MethodImplOptions.AggressiveInlining)]
public T[] ToArray()
{
+    if (typeof(T).IsByRefLike)
+        throw new InvalidProgramException();

    if (_length == 0)
        return Array.Empty<T>();

    var destination = new T[_length];
    Buffer.Memmove(ref MemoryMarshal.GetArrayDataReference(destination), ref _pointer.Value, (uint)_length);
    return destination;
}
```"
The name of this test method is now wrong. But can we just delete these tests now?
">dateTime = dateTime.AddMicroseconds(microsecond); [](http://example.com/codeflow?start=16&length=49)

This is wrong. imaging users passing microseconds equal -10 for example. this should throw but with this code possibly will not throw. 

You need to manually test microseconds, like:

```C#

if ((uint)microsecond >= MicrosecondsPerMillisecond) 
{
    Throw...
}

var dateTime = calendar.ToDateTime(year, month, day, hour, minute, second, millisecond);
_dateData = dateTime.AddMicroseconds(microsecond)._dateData; // Note, it is wrong to assign _dateData to UTicks.
```"
I don't know if this is the proper way to get the coreclrpal target to build.  It works but I'm not sure if i'm doing something wrong here.
"It's just a proof of concept right now just to catch clearly wrong code. My understanding is that these types are widened, so checking the intersection is potentially wrong."
"Create `dotnet.cjs.mt.lib.js` and do it in build files ?

We need to do something smarter about those `linked_functions` in the future. 
I'm not confident what we have is the best solution.
There is some crazy transormation on it by emscripten."
"Actually, I would think that the real perf gain would be when using it through the LS, since it would run over time and get the chance to be inlined. I might be wrong, but either way it's still probably a good idea.
"
"So, if the programmer omits a type annotation on a `this` parameter, you will think there was _no_ `this` parameter and get your parameter count adjustments wrong below. You need to track the presence of a this parameter separately from its type. When the type annotation is missing you should use `unknownType`. Also, you can just use `getTypeFromTypeNode(param.type)` instead of `getTypeOfSymbol`.
"
"In the meantime I've moved all call sites I could find to the new API (where it was possible without potentially introducing new/different exception types, and where targeting allowed it): 044c710 minus 300b725

I've also consolidated the various different hex encoding/decoding implementations across the libraries to the ones in the internal common class `HexConverter` (25d222e). If you'd like to see those kinds of changes in a separate PR, then I'll revert it in this branch.
If we decide to merge this PR as is (after re-review of course) then there are only very few hex encoding/decoding implementations left. Those are not consolidated here because they:
- are used by projects that still target pre-`Span<T>` TFMs
- do more than just hex encoding/decoding (e.g. handle octal strings as well)
- are in test code and adding including `HexConverter` to test projects felt ""wrong""

@github @github @github PTAL again"
"In the [spec](https://tc39.github.io/ecmascript-asyncawait/#prod-UnaryExpression) it looked like 'await' was specifically exempted from following. Maybe I read that wrong. 
"
"Seems to fix the following repro:

```ts

/**
his is a comment with dumb indentation for some auto-generated thing.
 */
export class SomeAutoGeneratedThing {}
```"
"I would file a new issue (as this is the wrong place to discuss it), but I'm not sure that we do anything special for a method bound like that. Check out the `d.ts` file output given in your example; the method's type is identical whether or not the constructor reassigns it.

This is no different than how we've always behaved in the non-generic case: [Playground Link](https://www.typescriptlang.org/play?#code/MYGwhgzhAEAqAWBLAdgc2gbwFDV9CA9gLYCmACgE4EAOJFALgJ7QC80ALAEwDcWOewAsgj0KAV2D0CFABQBKTPzx56SCADpCpALIlVBACatoqxBq0ld+g+oBGKAzNMQ5vZQF8+yi1fiH5isrKgsIEICTqIASoMgBEABKI0ABmVET4xJZ6fgaxckrQnp5YyWLIkohCKQQEMgAeAFxwSGgK2Mrh9JgZpJQ0dEwANNDqoxQkIoXGdbwFAPRz0ACqECRGUtAA7tIA1sNm0MgEm9BgyNB0VBQAhPOLfbQMzADkPtmGz9AGBBOHBF0kOpmLpVJi0aDPADyREQ9AAPLBhrELA8BoxYtAAD7QZGZXyGWIAPme6gK4xEmjx70criwxWSNRkyBIJwQKBiclcQA)

This PR made things consistent between the two."
This fix fixes a bug that was on all platforms that we just hadn’t noticed. The previous code was semantically wrong in all cases and just happened to work.
"> Currently, we wait for these descendants only when the user does not provide any timeout value, meaning that the user can wait up to infinity. I don't believe that this behavior should be changed. It's by design.

By design means this is intentional.
If a user kills a process, why would he then want to wait up to infinity to read its output?

This is how I came to making this PR:

msbuild has some code like this:

```cs
process.Kill();
bool exited = process.WaitForExit(timeout);
```

The timeout is here to avoid the the infinite wait when a grand child still holds the terminal.

The msbuild repo also had a long standing open issue where things went wrong for an unclear reason that was hard to reproduce.

The root cause was a bug in the `exited` `false` path, which was very unlikely, but not impossible, to occur."
"@github The problem is not the lifetime of the strings themselves, the problem is the life-time of the objects allocated between these forever live objects.

# What might go wrong?

Let's say you have a scenario where you do something like this.

JIT a method (and therefore allocates some string literals on POH)
run some code (and therefore allocates maybe some objects on POH), and then
JIT another method (and therefore allocates some string literals on POH)

The POH will look like this.

```
...[string-from-method-1][object1][object2][string-from-method-2][string-from-method-2]...
```

The strings from methods never go away, so they are stuck. By themselves, they don't cause fragmentation. The problem is that object 1 and object 2 might not be needed anymore. Currently, we need a gen2 to eliminate them, so if there is an object 3 allocation before that gen 2 GC happens, it won't be fit in that location. Even after the gen 2 GC, those holes might be small and won't fit future allocation, and that space is practically done and be wasted forever. The fact that we need to wait until the next gen2 GC makes it less than ideal if we use it as if it is malloc/free.

> Opportunity - does it make sense to enable a user to free a managed object so that it gets into the free list right away for LOH/POH objects without having to wait until the next gen 2?

That also explains why it is a really bad idea for collectible assemblies. When a collectible assembly is unloaded, all the associated strings will be eligible for collection, and the collection will create lots of tiny holes (most strings are probably error messages, maybe 200 bytes or less?). We can imagine it would be hard to reuse those holes.

# How do I fix it?

One way to optimize POH utilization is to make sure all objects allocated there are long-lived. Either they are actually being used (like the strings), or they are pooled so that we reuse them instead of creating holes and allocates again. 

> Opportunity - does it make sense to have a single shared pool of pinned buffer allocated on the POH so that could be reused by all libraries that need pinned buffers? 

Another way to optimize for POH utilization is to allocate objects of similar lifetimes together in time. So that we can create a big hole when they go away, and a big free list block is much more likely to be reusable.

> Opportunity - does it make sense to enable a user to manually specify a collection of objects to have a similar lifetime so that we don't allocate others with a different lifetime in the same (segment/regions)?

This is not backed by experiment yet, this is just speculation. I hope this clarifies what @github meant by _when_."
I was unable to figure out what's wrong yet. I cannot get access to the lab machines and this change works fine on both of my local macs (x64 and arm64).
"The `Maestro auto-merge - Do not automerge downgrades` is wrong, there's no actual downgrade. Tracked by https://github.com/dotnet/core-eng/issues/13967"
I think we may be leading users in the wrong direction by including the file path.
"> Hmm - that's odd. I would have expected the app to exit. I don't think this is a mode that we should fall back into.

I agree with @github. The behavior should be deterministic and not surprising to the users. In genral, we always fail fast if anything goes wrong. This gives the user the user to know what is wrong and fix it instead of having the user experience multiple failures during the runtime. We'll need to have a failure message be clear though. "
Here and below... Just throw. No need for clever things later on. The path was probably wrong.
"It’s important because caching the wrong version of a file is bad - you can’t easily recover from that without manually clearing caches, which is impossible to explain to most end users. The hash check protects users from this situation, so at worst they can reload the page to recover. 

Consider visiting the site at the same moment that a new version is being deployed. Half the assemblies are the old versions, then the second half comes from the new versions. This likely means a broken app, or at least undefined behaviour. Without the hash check this combination of files would get cached and that user would be stuck with the errors. With the hash check, the initial load fails which is good as it prevents the undefined behaviour, then on the next visit the user gets and caches a working state. 

Same general situation if you have multiple front end servers and no client affinity. If you’re incrementally rolling out updates, we want to detect the case where you load an inconsistent set of resources because the requests were handled by an incompatible collection of servers. "
What goes wrong if they only wait 2 minutes?
"Well, maybe I'm wrong - the MessagePack portion of the spec shows 0-length StreamID arrays when it's absent: https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/Gson.html

But the JsonProtocol portion claims it's optional: https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/HubProtocol.md#invocation-message-encoding

I'll update to account for it being optional"
I think it's always wrong - any PR merged to azdo's release/x branch will never make its way back to the public release/x branch (there's no mechanism for mirroring in that direction)
"My overall point is that this entire PR is extremely hard to review and verify correctness on.  There have been at least two locations that look wrong *from a local analysis*.  I haven't even been able to get to the point of understanding about how this all works together *non-locally* to validate correctness.  

Can we move to a simpler and safer approach that gives us the semantics we seem to want (deterministic release if all outstanding references are disposed), and then move to something more complex *if* data demonstrates that there is actually a concern of something like contention overhead.

These codepaths are only hit for creating streams/SourceTexts for syntax trees we've dumped and need to read back in, or for metadata references in VS.  It's unclear to me why this would be an area that necessitates things like Lock-Free.  "
"Though the checks are passing, I'm seeing a build flakiness. It seems like sometimes the wrong configuration of the Razor SDK is being built during tests on Windows which fails all Razor.SDK tests. Debugging."
It feels wrong to report a nullable conversion problem when there is no conversion in the first place (from `T` to `IEnumerable<T>`) #Pending
"so... quite possibly a dumb question... but why not just have a normal remote-service in OOP (like the reset of our remote services) that uses all the standard Roslyn/OOP concepts, and just asynchronously computes the results.

Then in VS itself, you can take those results and translate tehm to whatever the CodeLens system thinks it needs.

--

I ask because it's *super* weird to see these APIs that take guids/strings/etc. instead of things like Project/DocumentIds and whatnot.  It feels like we're leaking over the codelens ickyness to OOP, instead of keepign OOP clean and having the translation only occur in VS.  

Thoughts?"
"Hum, I'm probably wrong. There's probably still a hole in scenario where `ShouldCheckConstraints` is true. #Resolved"
Feel like this is the wrong approach. It means reference assemblies will have different content depending on how they are compiled. It also means that /refout is not equivalent to /out + /refonly. That feels wrong.  #Resolved
What scenarios result in `location == Location.None`? It seems like something must have gone wrong somewhere in this case. If that's true consider adding a `Debug.Assert(location != null)` instead of `?? Location.None`. #Closed
dumb question.  why do we need this?  i thought the compiler already had a comparer or .Equals method for this sort of comparison...
"We don't crash but ICU return wrong results. I am still seeing have ICUVersion is very useful for us. Sometimes it helps in diagnosing some raised issues without the need for deep debugging. Another minor reason is when writing the behavior of different ICU version in the test helps us to know the history of the change. This is really useful in some cases when it is needed instead of going back and try to figure out what has changed. 

In short, I don't mind changing the tests but I am still seeing a value keeping the ICU version property in our tests."
"Don't know. I'm copying from `src/mono/mono.proj` (which probably copied it from `src/coreclr/runtime.proj` which does it this way).

I tried taking out those two lines and I see my `<Message>`s printing:
```
  Creating .csproj files for mono runtime tests
  Mono obj dir is mono//
  Mono obj tests dir is mono//mono/tests/
  There are 2 tests, 2 simple
    Csproj mono/mono/tests/array-12193/array-12193.csproj
    Csproj mono/mono/tests/debug-casts/debug-casts.csproj
```
which is wrong (the obj dirs shuld be somewhere under `artifacts`).  So the `<Import>`s do _something_ and taking them out seems to break things."
"> I think if I left a gap it wouldn't merge cleanly, so I just copy/pasted to hopefully make the merge clean.

I think it will still require minor manual intervention given the addition of a line below, pretty much the same level of intervention as for a gap. But I might be wrong.

---
In reply to: [413958941](https://github.com/dotnet/roslyn/pull/43355#discussion_r413958941) [](ancestors = 413958941,413415975)"
"@github `Platform.OS` could be the wrong OS if connected to a remote. Will `getDefaultProfile` ignore the wrong platform in that case? "
"> shouldn't all other loops be implemented the same way? Why were they left to read it continuously?

Don't discount the possibility that all those other loops are just wrong :)

I thought Stephane was referring to an issue like IEnumerable.Count(). But if the worry is the value of Count changing because the underlying collection changes, then it might make sense to cache it before the loop. Or perhaps he's worried about the speed of accessing the member during the loop. "
"This is .try_as. If they turn out to be null for whatever reason, does `.insert` below get upset? Should you fail gracefully if it doesn't cast correctly? Or is it a fail fast scenario for completely unexpected behavior that we programmed wrong?"
Can we document what `__declspec(noinline)` inline does here? This looks like someone's taking the crazy pills.
"The comment on all of these is wrong.

Also, please make these changes in Visual Studio. Just use Solution Explorer to get to this resw file (should be under the TerminalAppLib project). Then you should get a nice table to be able to do this in. Make and save the changes there."
they're winrt objects. it sucks.
"@github 

> Also in case iconv-lite author will decide to reject my PR we can still proceed forward by allowing > only subset of encodings in the browser for which we can ensure Uint8Array support by test 
> coverage.

This would not be a good option going forward though. VSCode itself is exploring to enable a sandbox option from Electro that prevents any node.js code to be executed in the window. My hope was that the work you do can benefit both web and the future sandboxed desktop environment. I would want this solution to support all encodings in both web and sandboxed desktop if possible. If there is a reason we cannot support this for some encodings, we should understand why that is and come up with a custom solution if possible. I thought that `iconv-lite` through webpack would support all encodings because there are no native dependencies, but please correct me if that assumption was wrong. E.g. if we need node.js for the UTF-16 conversion, we should try to write our own converter if possible.

> Is loading from file system crucial for us when testing nativeTextFileService?

Yeah I think for desktop I would like to preserve that because it will test the actual stack down to the disk. However, we have a way to register file system providers and we could simply swap out the disk based provider with an in-memory one here:

https://github.com/microsoft/vscode/blob/b8f63e9ebeaee7f6117476bb52abb270bed32adb/src/vs/workbench/services/textfile/test/electron-browser/textFileService.io.test.ts#L54

In other words, all those tests could run fine in web if the file system provider registered is one that is in-memory for web. For example we have one here:

https://github.com/microsoft/vscode/blob/b8f63e9ebeaee7f6117476bb52abb270bed32adb/src/vs/platform/files/common/inMemoryFilesystemProvider.ts#L53

> It looks like AbstractTextFileService only uses what is defined in common, but itself is in browser. > Is it intentional? Should it be moved to common?

It cannot move currently due to:

https://github.com/microsoft/vscode/blob/b8f63e9ebeaee7f6117476bb52abb270bed32adb/src/vs/workbench/services/textfile/browser/textFileService.ts#L32

"
"Yeah I think that was a fallout from not having a clean build. I was reacting to the error that suggested a ref was missing/wrong. Thanks @github "
"The motivation seems to be [rolling back an unsuccessful cursor position query](https://github.com/dotnet/corefx/commit/3aac19549465452c36f57ed3749ac8ee73e1956b#diff-5468165269572f0f5bbcc85a2ba0f9c559de23459a54de60bc842904dfd0d4baR393-R397), when the user might have typed their own inputs concurrently. The byte-by-byte copying logic seems deliberate, perhaps to emulate user input? But it feels wrong to me, especially when the console uses non-ascii encodings."
"skipped the rest until here.

consider making this a runtime assert, not a debug one.  this should be a cheap check and we want it to fire if we got anything wrong."
"1. who calls this method? 
2. get rid of localized string.  if this is to catch us diong something wrong in tests, we would not have a localized string here."
"> This behavior seems wrong, but I didn't file an issue for this because from our discussion, trying to adjust this seems very risky (likely performance impact and other unknowns). 

I do not remember us discussing this, unless this somehow involves ""Ignored"" annotation. It doesn't look like it does. I think we should fix this. Not necessary in this PR, unless the behavior is related to the changes in it.


---
In reply to: [536369020](https://github.com/dotnet/roslyn/pull/49723#discussion_r536369020) [](ancestors = 536369020)"
"I think this is wrong... We have to list hidden profiles right?
In that case I need to write a wrapper function real quick which filters deleted profiles."
"> These test projects run against the live runtime. We should use NETCoreAppCurrent and restore them against the ref pack that we build in the packs.product subset.

Master currently uses the 5.0-RC1 targeting and runtime pack: https://github.com/dotnet/runtime/blob/543cb488437ea0b05a58e3297214a0c9fb2064ea/src/installer/tests/Assets/TestUtils/TestProjects.targets#L20. If I got this right, then https://github.com/dotnet/runtime/blob/543cb488437ea0b05a58e3297214a0c9fb2064ea/src/installer/tests/Directory.Build.targets#L16 is publishing the entire bundle to disk which is then used for the test invocation.

Based on that I don't see how changing the tfm would impact whether we run against the live built runtime. I'm not an expert on the installer subset so please correct me if I'm wrong here."
"I don't think we should remove this call.

The `init_logging_categories()` invocation in `JNI_OnLoad()` allows *global* settings to be processed, but not per-package settings.  This *is* noted in the comment in `JNI_OnLoad()`, but this is basically removal of existing functionality.

If we call `init_logging_categories()` *twice* -- once in `JNI_OnLoad()` and once here -- then existing functionality is retained, while also allowing ""global"" state to be used before `Java_mono_android_Runtime_init()` is invoked.

It should also be safe to call `init_logging_categories()` twice; at least, I don't see anything obviously wrong with doing so."
"What we are trying to achieve is to generate an assembly. My understanding of source generators is that they would generate code which would then be included in the project which is being compiled (please correct me if I am wrong).
The idea here is to create a stand alone assembly which contains all the resource ids. But can be easily swapped out with the final version once we know what all the final app resource id values are.

Hope that makes sense."
"You are right, the code is not guaranteeing against null, but somehow [PropertyValueCollection[index]](https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.propertyvaluecollection.item?view=dotnet-plat-ext-5.0) and [PropertyValueCollection.Add(object value)](https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.propertyvaluecollection.add?view=dotnet-plat-ext-5.0#exceptions) both documented to be non null (it says it throws ANE for null value). Literally for all references we are suppressing the return value from `(string)PropertyManager.GetPropertyValue(context, rootDSE, PropertyManager.DnsHostName)!` which also illustrates the intention was `non-null`, there is something wrong here or we are missing something."
"@github Sorry about the delay! You happened to catch us at exactly the wrong week - everyone on the team is basically offline for the entirety of the 23rd-29th. I can promise that tomorrow, there's gonna be a _lot_ of discussion about this PR, because it's frankly incredible"
"Hi @github and @github 

I am consuming this change in the latest version of Visual Studio Preview 17.3. Preview 1.1 using Maui (.NET 6).

I can confirm that the test using the badssl website with self-signed certificate works and gets correctly bypassed, thanks for the change!

In fact, every common certificate problem they have in their website works with the validation callback bypassing cert errors, except for the [wrong host example](https://wrong.host.badssl.com/)

This scenario, along with all others, were working before, but this particular one is, unfortunately, a blocker for me. I believe you will be able to repro it on your side as well by attempting to access that URL.

Follows the exception I get after using the validation callback to bypass the certificate errors in the wrong host website from badssl:
System.Net.WebException
  Message=Hostname wrong.host.badssl.com not verified:
    certificate: sha1/1fBSv4IoEephjuel/BGL9TBSEgk=
    DN: CN=*.badssl.com
    subjectAltNames: [*.badssl.com, badssl.com]

(Please let me know if I should file another bug for this particular case)"
"I'll not pretend I understand everything in here, but this struct `CredentialConfig` is created to correspond to `QUIC_CREDENTIAL_CONFIG`:
https://github.com/microsoft/msquic/blob/a0dd95474c40ea3f675b6a58083b1149c9b0b19d/src/inc/msquic.h#L251-L264

Underneath is the union `CredentialConfigCertificateUnion` (referenced by `IntPtr` on line 202 here) corresponding to the inner union:
https://github.com/microsoft/msquic/blob/a0dd95474c40ea3f675b6a58083b1149c9b0b19d/src/inc/msquic.h#L254-L260

If I understand it correctly, there are 2 layers: struct with TYPE, FLAGS, etc. and within it a union with different ways to define the certificate itself.

@github could you be more precise with what exactly is wrong and how it should look like?

Note that, we're not actively using any of it ATM."
"I'm not 100% convinced the AOT compiler can get here, after all.  Let's drop it. The AOT compiler will break in CI if I'm wrong.

If it turns out this is necessary, I think it's slightly cleaner if the return is before the `create_autoreleasepool` initialization.

(Same thing for cleanup platform state).

"
Wrong indentation
"I considered that but for now decided against it. It's not inherently wrong to ask for a key on a non-deterministic build, we just have to meet the contract that it never compares equal. I also worried that it would create friction points for consumers where they have to keep taking different paths whether a specific option was passed to the compiler. 

I actually started wondering if the opposite was needed. Essentially make the output deterministic even if the options weren't deterministic. Consider the C# IDE case as motivation for this. They are trying to determine equivalence between open / closing the IDE and remote sessions. That shouldn't all fall apart if the customer didn't use deterministic builds. It also seems odd to call `WithDeterminism(true)` before calling the API. Possible better to just ignore that option in the output. 
"
"> Why does this not apply to all of the other fixers and refactorings we offer?

It's my opinion here that this is a very rare, but explicit, trigger that indicates the user intends to use a file-scoped-namespace.  The trigger specificity, and the lack of overlap with any other constructs means we can specialize this as something explicit we do.

>Also, why doesn't this logic apply to the two namespaces, or nested namespaces scenario? If the reasoning is ""the user typed a semicolon, they must want file scoped namespaces"", then why not also just convert the first namespace in the file, and the user can move the second one to another file afterwards?

This is a good question.  Primarily I was concerned about actually breaking code and putting the user in a space that they didn't know how to fix.  Namely that they then might trigger ""move to file"" and things might go wrong because it would take the new *nested* interpretation instead of hte original sibling interpretation.

We also checked the C# repos we have access to and found that ""single namespace + type"" is the 99.9 case (i think 99.97), so it felt this was hitting a reasonable sweet spot here :)"
The coding style is wrong in this file.
This is wrong. Some of these libraries aren't part of WindowsDesktop's targeting pack anymore.
"Done - added a report and catch to the deserialization path so that we know when it goes wrong.  Since intellicode is providing the json, we definitely want to be notified if it is malformed."
"Yes, you are right I looked at a wrong place. The essence of the change is to handle `frame.Type == FrameType.RstStream && ((RstStreamFrame)frame).ErrorCode == 0x8` the same way as `frame == null`."
"I was wrong about this :) this needs to be restored to ensure we produce the correct metadata name in some cases, particularly for synthesized types."
"this seems wrong e.g. bunch of spaces added to where they should not be. "
I believe `isStringOrNumberLiteralExpression(node.initializer) || isSimpleLiteralEnumReference(node.initializer) || node.initializer.kind === SyntaxKind.TrueKeyword || node.initializer.kind === SyntaxKind.FalseKeyword` will already be false if `node.initializer.kind === SyntaxKind.BigIntLiteral`. Am I wrong?
"Also, correct me if I'm wrong but passing in a ref to a the cached behavior should be safe even in multi-threading scenarios since even if two threads happen to try to evaluate the case behavior they would have both set it to the same value so I believe concurrency should not be a concern AFAIK"
"Oh! Red alert! Two things:
1. @github: The schema correctly shows the values of the SuppressionStates enumeration as ""suppressed"", ""suppressedInSource"". But the code gen hints file gives the enumeration constant names as ""SuppressedInSource"", ""SuppressedInBaseline"", so the generated file SuppressionStates.cs is wrong. I'll fix that.
2. @github: The interpretation of the SuppressionStates enum is subtle. Every result that is suppressed, for whatever reason, should have the value ""suppressed"" in the ""suppressionStates"" array. Those results that are suppressed because of an in-source suppression should _also_ have the value ""suppressedInSource"" in the array. I can explain offline the reasoning behind that.

So, since in Roslyn every suppression you see is a source-level suppression (that's right, isn't it?) your code should be

```
            _writer.WriteArrayStart(""suppressionStates"");
            _writer.Write(""suppressed"");
            _writer.Write(""suppressedInSource"");
```

... resulting in

```
            ""suppressionStates"": [ ""suppressed"", ""suppressedInSource"" ]
```

---

In reply to: [63035326](https://github.com/dotnet/roslyn/pull/11233#discussion_r63035326) [](ancestors = 63035326)
"
"https://github.com/microsoft/msquic/blob/8cba1150674cbecda7a136f344acc64c65f49932/src/cs/lib/msquic_generated_macos.cs#L8

It's on your side. Or am I going crazy? :smile: "
"My point wasn't that i cared about the name.  it was that i was uncertain if this method was on the right object.  i.e. you're sayign ""AnalyzerService remove the cached data for this workspace"".  Rather than just asking the analyzer itself to do that.  Since you created the analyzer, it made sense to me that you would then be the one asking it to clean up.

Now: i could def be wrong here, and putting this functionality on the service may be the right thing.   However, i'm looking for information/explanation to help me understand why this is the right location. 

Thanks!
"
"An alternate approach is to use the warning to trigger, but still have the fix compute all the changes necessary.  There's nothing wrong with that approach.  The real questions is whether we feel that people will want to add each node one at a time, or will they want to do it in one fell swoop.  I'm leaning toward the latter.  But i don't feel strongly. 
"
This code also seemed wrong before -- it would not include all the debug information in some cases.
"I haven't been able to figure out the remaining x86 test failures.  With BMI1 and LZCNT enabled on a compatible processor, this should be a zero-diff change on the JIT side, and only the subtraction->xor change to `BitOperations.Log2` on the managed side.  However, I have a `System.Memory` test that fails reliably on x86 with my PR build.  That particular test only makes use of `BitOperations.TrailingZeroCount`, and disabling BMI1 does switch the TZCNT to BSF as expected... then it fails in exactly the same way.

I tried running a jit-diff against the base of my branch, but I get an error about the JIT being the wrong version (is that because of the GUID change?).  Running the test with COMPlus_JitDisasm, the jitted code is identical right up to the point the baseline completes the test and the PR build throws an exception.

I'll do another debug session on it tomorrow, but for now I'm stumped."
"GitHub checks are linking to the wrong run. Here are links to the correct, passing CI runs.
CI - https://dev.azure.com/dnceng/public/_build/results?buildId=987155
Integration CI - https://dev.azure.com/dnceng/public/_build/results?buildId=987156"
"OK, sorry for the wrong answer then, I'll hide my reply to avoid further confusion and let others answer ..."
I think something went wrong here. I can't see some changes in this PR that exists `main` (this only happened after resolving the conflicts).
"Sorry, I was wrong, System.Diagnostics.Process uses reflection to access it."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Three bugs being fixed here:
1. The SlideCursorToStartOfBuffer method is incorrectly assuming that the buffer is filled to its end (that m_Buffer.Length = m_CharsRead).  As a result, two things happen.  First, we copy more data than is needed to the temporary buffer; that's just unnecessary but not harmful.  But second, when it issues a read to fill the remainder of the buffer, it does so at the wrong position, both leaving zeros in the buffer that end up getting parsed as real data and losing real data from the end.
2. IncreaseBufferSize assumes m_CharsRead = m_Buffer.Length, which may not be the case.  As with (1), this can result in it reading into the wrong part of the array and leaving garbage that gets processed.
3. IncreaseBufferSize is always increasing the buffer size, even if only a small portion of the buffer is used.  This can then result in the whole operation failing when it repeatedly increases the buffer size and ends up failing due to ticking over the max buffer threshold.

(1) doesn't exist in .NET Framework 4.8 but (2) and (3) do.  (1) is easily triggered by a stream that sporadically doesn't produce all the data requested; (2) and (3) end up needing a stream that frequently produces much less than requested.  This PR fixes all three.

Without the fixes included, here is how the tests being added here fail on main:
```
      Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Large(fieldsInQuotes: False) [FAIL]
        Assert.Equal() Failure
        Expected: String[] [""sssssss"", ""s"", ""s"", ""s""]
        Actual:   String[] [""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""...]
        Stack Trace:
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(431,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream(Boolean fieldsInQuotes, Int32 maxCount)
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(383,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Large(Boolean fieldsInQuotes)

      Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Large(fieldsInQuotes: True) [FAIL]
        Microsoft.VisualBasic.FileIO.MalformedLineException : Line 535 cannot be parsed using the current Delimiters.
        Stack Trace:
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\src\Microsoft\VisualBasic\FileIO\TextFieldParser.vb(917,0): at Microsoft.VisualBasic.FileIO.TextFieldParser.ParseDelimitedLine()
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\src\Microsoft\VisualBasic\FileIO\TextFieldParser.vb(362,0): at Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(430,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream(Boolean fieldsInQuotes, Int32 maxCount)
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(383,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Large(Boolean fieldsInQuotes)

      Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(fieldsInQuotes: False) [FAIL]
        Assert.Equal() Failure
        Expected: String[] [""s"", ""ss"", ""sssssss"", ""sssss""]
        Actual:   String[] [""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""...]
        Stack Trace:
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(431,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream(Boolean fieldsInQuotes, Int32 maxCount)
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(389,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(Boolean fieldsInQuotes)
        Assert.Equal() Failure

      Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(fieldsInQuotes: True) [FAIL]
        Expected: String[] [""ssssss"", ""s"", ""s"", ""sssss""]
        Actual:   String[] [""ssssss\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""..., ""s"", ""s"", ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""...]
        Stack Trace:
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(431,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream(Boolean fieldsInQuotes, Int32 maxCount)
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(389,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(Boolean fieldsInQuotes)

```
and on .NET Framework 4.8:
```
      Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(fieldsInQuotes: False) [FAIL]
        System.InvalidOperationException : TextFieldParser is unable to complete the read operation because maximum buffer size has been exceeded.
        Stack Trace:
             at Microsoft.VisualBasic.FileIO.TextFieldParser.IncreaseBufferSize()
             at Microsoft.VisualBasic.FileIO.TextFieldParser.ReadNextLine(Int32& Cursor, ChangeBufferFunction ChangeBuffer)
             at Microsoft.VisualBasic.FileIO.TextFieldParser.PeekNextDataLine()
             at Microsoft.VisualBasic.FileIO.TextFieldParser.get_EndOfData()
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(428,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream(Boolean fieldsInQuotes, Int32 maxCount)
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(389,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(Boolean fieldsInQuotes)

      Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(fieldsInQuotes: True) [FAIL]
        Assert.Equal() Failure
        Expected: String[] [""ssssss"", ""s"", ""s"", ""sssss""]
        Actual:   String[] [""ssssss\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""..., ""s"", ""s"", ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""...]
        Stack Trace:
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(431,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream(Boolean fieldsInQuotes, Int32 maxCount)
          D:\repos\runtime\src\libraries\Microsoft.VisualBasic.Core\tests\Microsoft\VisualBasic\FileIO\TextFieldParserTests.cs(389,0): at Microsoft.VisualBasic.FileIO.Tests.TextFieldParserTests.ReadFields_PartialReadsFromStream_Small(Boolean fieldsInQuotes)
```

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Microsoft.VisualBasic`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>7.0.0</td>
  </tr>
</table>
</details>"
"@github, I am encountering a weird issue in our CI testing.

Right now, this PR includes a couple of changes where I intentionally crash or return a wrong return code in some tests. The goal is simply to make sure the tests are actually run and validated.

I tried a few times, but I just can't make a GC test to fail the CI. The tests are supposed to fail on every platform, but it doesn't. If I ran the generated cmd file locally it fails locally."
"> what functionality should we expect from the file system in WASM? I assume setting permissions is expected to fail and such tests should skip there?

It seems to be partially supported. See [FS.chmod(path, mode)](https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.chmod):

`The underlying implementation does not support user or group permissions. The caller is always treated as the owner of the folder, and only permissions relevant to the owner apply.`

[FS.open(path, flags[, mode])](https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.open):
`The underlying implementation does not support user or group permissions. The file permissions set in mode are only used if the file is created. The caller is always treated as the owner of the file, and only those permissions apply.`

@github @github please correct me if I'm wrong."
"I found [the comment](https://github.com/aspnet/KestrelHttpServer/pull/2977#discussion_r222387365) I made to @github the last time he brought this up. I'm not sure I was wrong, but I've learned since then to be extremely careful with this code."
Am I crazy? It doesn't look like it's actually possible for `builder` to be null here.
Have trouble believing the previous `Exclude` item was wrong. Instead the ref/ project shouldn't provide metadata in `@(ReferencePathWithRefAssemblies)`.
"Yeah, I mixed up the extensions. Using signalr.client.java.Tests.javaproj would also have been wrong❔ Please file an issue to ship that.

Guess I'll have to find a non-C#, non-F# project that's neither shipping nor packed. Will anything go sideways if I use src/SignalR/clients/ts/common/common.npmproj (after marking it explicitly not to ship) or &hellip;/FunctionalTests/SignalR.Npm.FunctionalTests.npmproj❔ Any preference❔"
">System.InvalidOperationException: Unable to resolve service for type 'Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies' while attempting to activate 'Microsoft.EntityFrameworkCore.Migrations.Internal.SnapshotModelProcessor'.

In https://github.com/dotnet/efcore/pull/19896 `SnapshotModelProcessor` took new dependency on `ProviderConventionSetBuilderDependencies`. Seems like something is wrong there.

cc: @github "
"That only works if we have conditional `ProjectReference` items. Tests like CSharpSymbols would then need to reference `TestUtilities.CoreClr` only when building for netcoreapp. That isn't supported today and seems a bit crazy. 
"
"@github/aspnet-build Any suggestions on what's going wrong here? I'm specifically looking at the Windows ARM64 build failure where pretty much every project fails with the same issue

```
src\Analyzers\Analyzers\test\Microsoft.AspNetCore.Analyzers.Test.csproj(0,0): error NU1503: (NETCORE_ENGINEERING_TELEMETRY=Restore) Skipping restore for project 'D:\workspace\_work\1\s\src\Analyzers\Analyzers\test\Microsoft.AspNetCore.Analyzers.Test.csproj'. The project file may be invalid or missing targets required for restore.
```

I'm able to build the projects (including all the native projects that I've modified) through their respective build scripts `.\build.cmd /p:Platform=arm64`.

I've also tried modifying the sln file to add arm64 config section to each project to no avail.

<details>

Regex to modify `.sln` file

Search: `(^\t\t\{[0-9,A-F,-]{36}\}\.(Debug|Release)\|)(x86)(\.)(Build)(\.0 = (Debug|Release)\|Any CPU)$`
Replace: `$1$3$4$5$6\n$1ARM64$4$5$6\n$1ARM64$4ActiveCfg$6`

</details>



"
"> I though they had to be evaluation time constant but that might be wrong: https://github.com/dotnet/project-system/blob/c954a632f74afdac9118a1f505257107789ff00e/docs/up-to-date-check.md#customization talks about a target. So it might be doable to add the NativeContent item to UpToDateCheckInput after RAR/design-time RAR. @github, that might be worth clarifying in that doc.

@github yes, you can modify the set of `UpToDateCheckInput/Output/Built` items via the targets specified in those docs. We use design-time build data for that.

I'm unclear on the clarification you're after though.

> I'm confused by ""Note that UpToDateCheckOutput exists but is deprecated and only maintained for backwards compatability."" in the docs.

@github I know you edited this, but regardless: you're right, this is confusing. I've removed mention of the deprecation in https://github.com/dotnet/project-system/pull/7840. Technically `UpToDateCheckOutput` is redundant, but in practice it's less confusing to allow its use, and we can't remove it anyway.

> Hmm I've just realized it's the VS build, not command-line, it's harder to get a decent binlog that involves both projects. Not sure how to investigate this. If you keep building, does it still rebuild every time?

@github since then you pointed me to the use of `MSBuildDebugEngine` environment variable for full-fidelity binlogs, as described in https://github.com/dotnet/project-system-tools#getting-higher-fidelity-logs-from-vs

@github can you suggest a solution filter and project to test the no-output case with? I've burnt my budget today on trying to get the solution building locally. Narrowing to a subset of projects might be helpful."
Wrong direction
"Yes, that's wrong. Just forgot to update this. I'll fix it and add a test."
Not emitting a sequence point for a sequence point node would be wrong. #Resolved
Indentation (nesting) looks wrong. I think the variable declarator should be directly beneath VariableDeclaration.
dumb question.  how is ths better?  Won't this still block the UI thread while this is happening?
">Compilation.Options.NullableContextOptions != NullableContextOptions.Disable [](start = 48, length = 76)

It feels like this is the wrong condition to check. We should simply check if the feature is enabled, i.e. check the language version.   #Closed"
`d` is the wrong acronym here
"> Is something wrong with it? Did I miss something?

We're not overriding it in this PR."
"Ah, you're right: this is the wrong repo.

My goal: I'm writing an NPM package for [multiplexing streams](https://www.npmjs.com/package/nerdbank-streams) to work as a companion to your vscode-jsonrpc package. I already have it defined in a .NET library and of course I want cancellation support. I certainly do not want to redefine cancellation tokens as your package has already done it. My package does not require JSON-RPC itself, but it depends on vscode-jsonrpc the package in order to get cancellation tokens. But I need the functionality that this PR adds (albeit to the wrong repo) to be complete.

So it seems I should close this PR and open one against the right repo. And if you'd entertain the idea, perhaps I can start a new repo with all your cancellation token code in it as a new package, then send a PR to this and/or the vscode-languageserver-node repo to consume the new one so you have just one code base for cancellation tokens. 

Thoughts?"
"The condition is wrong. It should have been
```suggestion
        if (len <= suffixLen || strcmp(g_szCoreCLRPath + len - suffixLen, PAL_SHLIB_SUFFIX) != 0)
```"
"@github & @github -> Joel, this is the wrong DTO and task. It should be resolvedTaskDTO. and resolvedTaskDTO"
hyper-nit: the indenting of this line looks like it might be wrong
"@github the regex may still be the better way to do it, but in thinking about this, I've come to two realizations:

1. This should just be replacing Windows-space line endings with Unix-space line endings
2. I have had which character is _named_ which in the CRLF pair backwards for my entire career and this is the first time having the name wrong has actually mattered -- the code as written strips carriage returns, not line feeds."
">this.RetargetingTranslator.Retarget(overridden, MemberSignatureComparer.RetargetedExplicitImplementationComparer) [](start = 22, length = 113)

Retargeting the overridden method calculated in a different ""universe"" feels like a wrong thing to do. I think we should re-resolve overriding instead, otherwise we will not match result with metadata when an override is added/removed, etc. in the new compilation.  #Closed"
Also it looks like all these paths are wrong since they omitted `Runtime` from `System.Runtime.CompilerServices.Unsafe`
"So just to get this straight - if the user does something like:
* set the color table with `colortool -x whatever`
* Then change the scheme with the `SetColorScheme` action

Then nothing will actually change for the `SetColorScheme` action, because the palette was already overridden by the control at runtime?

(not saying this is wrong, just want to get our ducks in a row)"
"Meh. The sentinel thing seems like the ""best bet"". It would let us MUI it in propsheet and RESW it in settings. I do understand why that sucks though :)"
"This function unifies our many, many manual ways to read files from the disk.
This ensures we focus unsafe API usage in a single function and can easily introduce features like:
* Preventing us from returning cut-off files / files that were changed while reading
* Retrying in case something goes wrong temporarily."
"This is going to sound like the rantings of a crazy person, but we learned that MSVC has some _unfortunate code gen_ when confronted with a string_view copy. References proved to be slightly better, and since we're doing this per character in the hot path it might be wise to take every win we can get.

@github knows more, but I do not recall whether he's available right now."
"I did an experiment in MS Docs to verify point no. 5, and I was wrong: sentences are not handled as independent paragraphs by the MS Docs CSS. See the test PR results: https://github.com/dotnet/dotnet-api-docs/pull/5213/files

So if we want to preserve paragraphs, we will have to keep empty lines, which would make several remarks quite large."
"@github I guess I can't figure out anymore how I originally fixed the issue. 😐
Due to that I'll now add a special handling for `^@` using the old and proven test for `vkey == VkKeyScanW(0)`.

One quick question regarding this PR though: Should I revert my addition of `ToUnicodeEx`?
It's benefit is that it can properly handle shift keys. For instance this PR can differentiate between:
* <kbd>Ctrl+Alt+.</kbd> which yields `^[^.` and
* <kbd>Ctrl+Alt+Shift+.</kbd> which yields `^[^:`

The current solution with `MapVirtualKeyW` only supports the unshifted character `.`.
Another benefit is that after merging this PR we can remove _all_ of [this special handling altogether](https://github.com/microsoft/terminal/blob/ea1bb2ed9359fcc6ded32ad11a8cab544b91ae0e/src/terminal/input/terminalInput.cpp#L347-L416).
Since `ToUnicodeEx` supports Shift we can now use this to easily differentiate between `Ctrl+Alt+/` and `Ctrl+Alt+?` as well. All of the `VkKeyScanW` based code can thus be removed.

But the downside to the `ToUnicodeEx` based solution is that it changes the current behavior slightly:
When you now press <kbd>Ctrl+Alt+A</kbd> it'll technically generate `^[^a` (i.e. lowercase ""a"").
Due to [the way Ctrl masking works](https://garbagecollected.org/2017/01/31/four-column-ascii/) I _believe_ that all currently supported Ctrl+Alt combinations should produce the same output as they did before though.

What are your thoughts about this?
I'd personally go ahead with `ToUnicodeEx` because it supports the Shift key and it allows us to clean up `_searchWithModifier` later on. But since I'm not familiar with MS internals, I cannot properly estimate what the risk factor for getting something wrong in this component and changing existing behavior is."
"I think this is wrong, the composition should be done at a higher level. You are mixing WASM tooling with target configuration"
indent looks wrong - but it might be the existing (not the new) code
">nonOutConstructorCall is not BoundObjectCreationExpression { ResultKind: LookupResultKind.Viable } [](http://example.com/codeflow?start=16&length=98)

This approach feels somewhat fragile because we have no idea what went wrong and whether we would prefer reporting the errors rather than trying to bind with an additional out argument. For example, what if the only reason the attempt failed is a missing assembly reference? Should we instead ask to add the reference, or move to the second form? I assume there could be other similar situations. Perhaps we should pay attention to the reasons why “best” among “bad” candidates were rejected. I think we mark candidates with the failure kind during overload resolution. #Closed"
"@github I think you picked the _wrong_ implementation between those

./external/corefx/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs
./mcs/class/referencesource/System/sys/system/IO/compression/DeflateStream.cs
./mcs/class/System/System.IO.Compression/DeflateStream.cs

The first one is much more recent, e.g. use `Span>` and provide `Task` API, and does not suffer from the validation issue (of the last one) that Rolf spotted."
"synchronisation is a tagged pointer, this write is wrong. Use lock_word_get_inflated_lock"
"> I'm a bit worried about modifying the environment from a test. Smells like a concurrency issue waiting to happen. Is that something we do elsewhere?

In general this is true. For example if we even see environment variables being manipulated from within individual unit tests then that is highly suspicious. In this case though we are manipulating an the module initializer level so that effectively means it's setting it at the process level. 

The one part I'm worried about though is there is the potential for a subtle timing issue. Essentially imagine if DiaSym gets loaded before the module initializer runs. Then it will potentially load from the wrong place and there is no protection or detection for that. 

@github in the case this does happen how would we know DiaSym got loaded from the wrong place? "
"Correct me if I'm getting this wrong for this case! Don't we usually add the newest enums at the end of the list? "
"why do you think it is not useful?

i have the problem that a server is configured exactly the wrong way. since the class `DecompressionHandler` is internal sealed, i can't customize it either and have to re-implement / copy and customize all the code or try to place  another HttpHandler before the DecompressionHandler.

btw, the position is resetet in CheckContentSignatureAsync, but as I said, it is untested and maybe I am also wrong

"
I'm again confused here. It seems like the writability of the variable `s` doesn't really affect the writability of variables referenced by `s`. Is that wrong? #Resolved
"> My most recent understanding is that it should be part of the composition

Maybe I'm reading the XML wrong. Its in the composition, but won't be scanned. Perhaps that just means it won't be scanned for `[Import]`s but can still participate in `[Export]`s? @github probably knows.

> The public surface area is similar to that of VS Windows

How similar? Is it a bad idea to reference it from a platform agnostic library? ie, is there a chance that this will break VS Mac because the snippet expansion provider isn't present there?"
"I'm confused - why is the provider kicking in here at all (after the `)`)?  Not saying that this fix is the wrong thing to do, but it seems like (and testing confirms) we will still have problems with pre-selection happening in contexts like this, where it shouldn't even if it's not a comment.
"
decorators and modifiers are in the wrong order.
"why are we using Close over Dispose here? If it's just about flattening I'd go ahead with `using XmlWriter writer = ...`, if there is something wrong with Dispose it's most likely a bug"
"Unless, you are relying on the uniqueness. It seems I might be wrong here.
If you guarantee that what you return from this API is unique, then you need CompareExchange
"
"Don't assert, throw, since this means something is actually wrong.
"
"Uh-oh, I didn't expect any baseline changes. I counted the spaces and 19 is correct counting from 0; 20 is correct counting from 1. I'm not sure which we do for chars, but I see lines counting from 1 in tests/baselines/reference/jsonParserRecovery/TypeScript_code.errors.txt

I think this change is wrong. Sorry for steering you wrong. =("
"> Another thing that we might want to consider is to set EnableRichCodeNavigation = true in one leg of CI build, so that we have some validation done during PR. This would avoid breaking our official build if something went wrong. How much time does it take to run the target?

This build target is very quick since it only produces an extra file near the output file with some build info (not index itself). There would be another build step (which I was thinking to do in a parallel CI for now to not cause any issues with existing builds) which then runs the actual LSIF tool based on those files."
"At this point we're not sure that it's a duplicate default export, right? Maybe the name should be different.
(I could be wrong, I've only skimmed `areAllFunctionDeclarations...` so far)
"
"@github Hmm, not that I know of, but I could be wrong.
There's also a similar problem here when invoking the code cleanup keyboard shortcut Ctrl+K, Ctrl+E, i.e. nothing would happen. edit: I guess we could possibly give the user an error message, but this would involve the UI thread (I think?).

cc @github, would you happen to know whether there's a way to hide the code cleanup button in this scenario?"
"@github I'm doing things wrong here. For new apis with optional parameters my understanding is that we only ever want one overload with optional parameters. However, in MSBuildWorkspace we wanted to avoid forcing a type to load so we did things differently. I curious what your recommendation would be for how to proceed.

"
"Another note: I couldn't find anything on this in the ECMA spec, so it's possible the CoreCLR behavior here is wrong? It certainly seems undesirable to _me_, but maybe I'm not thinking this through well enough. cc: @github "
"Tagging subscribers to this area: @github/gc
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

When running with MARK_LIST not defined, I noticed a crash due an incorrect #ifdef, which caused GcWeakPtrScanBySingleThread to be executed by *multiple threads*. The #endif is in the wrong place - we didn't notice because we usually have MARK_LIST defined.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>PeterSolMS</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20787,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/><!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Thanks for spotting it. Quotes on line 270 were optional, but 269 were wrong. Comments on that PR are locked for non-members."
"> Hey @github am I doing something wrong with /t:UpdateRuntimeJson? Should it have worked out of the box?

I don't know what UpdateRuntimeJson is exactly doing without looking into its sources. I think @github should be able to answer."
I believe this change is now ready as well but let me do some additional validation and verification tomorrow. Also I'm waiting for the Helix test results to see if I got something wrong.
"> Was this the cause of the docker pull failures, e.g. in https://dev.azure.com/dnceng/public/_build/results?buildId=1643557&view=logs&j=8679535e-9046-505f-8bbe-da251e73ecbd&t=ab7958ed-5297-5b46-f99a-06ce433e067d

Unless you accidentally pasted the wrong link, this isn't a docker pull failure.  (Regardless those are mostly Mcr.microsoft.com having a bad minute or two)

While it is a docker work item, this failure is :
``` 
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='dev.azure.com', port=443): Max retries exceeded with url: /dnceng/_apis (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x04A42DA8>: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond'))
```

reference query:
``` 
let logsIWant=
WorkItems
| where JobName == ""90026d98-4db1-4199-a444-1d69b8aafa14""
| where FriendlyName == ""System.Xml.Linq.Properties.Tests""
| project WorkItemId;
Logs
| where WorkItemId in (logsIWant)
```

There's lots of retries for this talking to Azdo stage, but sometimes it just doesn't work well.  It's also important to note that the ""talking to azdo"" stage occurs on the host, not inside the container, so we can't blame Docker for _this_ one."
"@github bad rebase? wrong branch? "
"This feels confusing/wrong programming model wise. As far as I understand, state is internal to the component and the component is responsible for triggering renders when its state changes and it needs to rerender."
"Is this the only place transportEnum is modified outside of the ctor? If so, couldn't we just remove this and make it final? It seems wrong to ""reset"" this to `TransportEnum.ALL` when the HubConnection could have been constructed with a different initial value. If someone configured the HubConnection to only use long polling, whouldn't the HubConnection still try to use WebSockets if you stop and restart it? That seems like a bug."
"In this case ""beholder"" is a whole team responsible to keep code not necessarily the best looking ever but consistent. There is nothing wrong with the way you wrote your loop. It's a valid code with no bugs. But it's just inconsistent with other code in this repo. And keeping things consistent in a large code base is what helps people get through different pieces of code without trying to understand it's code conventions and constructs anew every time."
"It is hard to see how the problem I theorize could arise for the binary operators could arise for unary operators, because I expect the ""better operator"" relation is transitive for unary operators. But I could be wrong. If we adjust the code for binary operators, I recommend we do so here as well."
hmmm.. looks like something is wrong with public API analyzer.
"> Because when we apply the workaround that copies 5.0 stuff and give it a 6.0 TFM,

True but we should never stop at that point. The workarounds elsewhere (Directory.Build.targets) update the versions to use the incoming Microsoft.NETCore.App.Ref and the just-built Microsoft.AspNetCore.App.Ref. That said, we may be doing things in the wrong order because eng/Workarounds.targets is imported later in Directory.Build.targets than we correct the versions, meaning the metadata `Condition`s in the following might always fail
https://github.com/dotnet/aspnetcore/blob/master/Directory.Build.targets#L152-L159

> I'm starting to work on adding targeting support for .NET 6.0 to the SDK

Thanks @github❕"
"Wrong direction. @github "
"@github , I dug into it a lot deeper last night, asp.net is obviously doing the right thing.  F# obviously has a bug.

The net5.0 is a red-herring.

The F# Compiler has always done a thing that is pretty icky, that Roslyn doesn't really do.  It was originally done for usability reasons to make the command line compile easy for developers to manage when typing ````fsc program.fs```` and also to make ````fsi.exe```` not require a bunch of ````#r ""references""```` for framework assemblies.

When we originally did the coreclr port of fsc this behavior was omitted, but over time, much of it has crept back in.

The F# compiler tries to acquire the framework assemblies at the start in order to do that it has a bunch of horrible probing code.  The xcopied coreclr + global.json scenario is just not consistently and well followed by fsc.exe and fsi.exe

What is going wrong in the case shown above is actually two bugs.

1. We appear to be finding the wrong ````dotnet.exe```` we are executing the global one from program files instead of the xcopied version.
2. Even if we got that correct (which we don't) a later step which then tries to get the contents of the pack directory would only examine packs from the global dotnet location rather than merging them with the xcopied packs folder in order to find the correct set of framework reference assemblies as specified by the global.json

So in short ... F# is buggy in the presence of an xcopied netsdk and global.json file. 
"
"This seems wrong, and I'm surprised this would not cause bugs.
I'd expect that we're in a single context at a given time (either object, array or constructor). But it looks like this invariant is not protected.
I would have thought the other two properties would have been saved and reset to `false`. 
Alternatively, I think we should use an enum for context (None, Object, Array, Constructor)."
"@github can you expand on this?  It's unclear to me why Julien's suggestion would not work.  Namely, after getting the token, the logic for trailing trivia should be:

1. attempt to consume as much whitespace as possible.
2. attempt to consume a comment if possible.
3. consume a newline if possible

It's unclear what would be wrong with that.  Or why that would have a problem with something like `_EOF`.  If there is a problem, can you give an example of some code that doesn't work here, and why it doesn't work?  #Closed"
"No. It's the wrong type.
Follow-up https://github.com/dotnet/roslyn/issues/30362 #Resolved"
passing context.CancellationToken here will cause AggregateException errors as it is the wrong cancellation token when the fix is applied.  pass along 'c' here. #Resolved
"as previously mentioned, this seems entirely wrong.  Many places expect to be able to get the location of something as the expected place to either navigate to or squiggle.  it should not be the FullSpan."
Is it conceptually wrong to access `VisualStudioProject` off of `AbstractLegacyProject` in the product code?
Why do we need to make this parameter a pointer? What's wrong with reference?
"Or when cancellation has been requested, or when something goes wrong."
"If something goes wrong this is just going to say `Expected: NegativeInteger, Actual: TextString`.  If you think that's actionable enough without the state being recorded with it OK. (It probably is, I'm just raising the concern.)"
"We are past loc deadline, @github is this OK if this still goes in? This is for a message that would be for an exception being thrown from our API, so won't be seen in Visual Studio unless something is going very wrong."
"I think this should be an append-style method, so instead of resetting and resorting all locations we should always have append-insert semantics. So, if provider A returned `A` and `C` and if slow provider B returns `B` the order should be `A`, `C`, `B`. My goal is a stable UI, think of the following: `A` and `C` are in the UI and the user is just hovering over `C` to select it. At that time  `B` is getting resolved. It should not push down `C` because the user would then select `B` instead of `C`. The tricky bit is that we are talking about a tree. I not sure what to do when the tree contains `A/B` and `C/D`, the user is selecting `D` and at the same time another child is inserted into the `A`-subtree. It will push down the `C`-subtree, making the user click the wrong item.
"
"I was trying to avoid cases like Unicode_11 where we accidentally loose test data because of the wrong IdnType.

> could you add ""Windows"" to the class name then?

So you mean adding a new Unicode_13_0_IdnaTest? 

I think it makes sense to instead add a comment explaining that Nls uses Transitional. "
"It looks like we would report this for an array of function pointers, that feels wrong because an array can be used as a type argument. Consider adding a test that is not anonymous type specific. #Closed"
"This feels wrong, It feels unexpected for a symbol to expose modifiers as ```ImmutableArray<CustomModifier>.Default```. I think we should understand the root cause.  

---
In reply to: [417705806](https://github.com/dotnet/roslyn/pull/43275#discussion_r417705806) [](ancestors = 417705806)"
"I couldn't quite figure out where the PEAssembly was, so I hacked this (very obviously wrong) thing together to make sure I was using the reader correctly. "
"I'm assuming this path isn't supposed to work right now, correct? It looks to me like at the end of this block, the `logic` is going to have it's refcount decremented and it'll get cleaned up. Seems like the App would need to hang onto it as a member... but I could be wrong."
"I think this value is wrong here with ""horizontal"" in the name... But this might be another issue."
"@github I have the idea for a fix with NVDA. Truth be told I read through the source code to figure out why this reading may happen. Since I need a good IDE for some types of my work with are mostly accessibility unrelated, I can still make this better.


From: Isidor Nikolic <notifications@github.com>
Sent: piątek, 21 lutego 2020 16:54
To: microsoft/vscode <vscode@noreply.github.com>
Cc: Pawel Urbanski <pawel@pawelurbanski.com>; Mention <mention@noreply.github.com>
Subject: Re: [microsoft/vscode] Fix: #89098 Editor title being read out once suggestion is accepted (#90837)


Thanks for providing more feedback. Yes that seems to be happening, and I do agree we need to somehow hack it in that when the editor ""gets focus"" such that not too much is read out. We can aslo ask on NVDA github page for ideas how to potentially achieve this.
Also if we move paramter hints to also use activeDescendetes we will have the same issue, once the paremeterHints get closed the editor aria label we get re-read.

A crazy idea which I have and I am not sure if it will work is that we set ariaHidden=true on the editor instead of cleaning out its ariaLabel. The focus goes back to the editor, nothing gets read out and after a timeout we remove this ariaHidden attribute. That would sort of make the editor invisible to the screen reader for a very brief perioud of time.

For other fixes: no problem, no need for appologies :)

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://github.com/microsoft/vscode/pull/90837?email_source=notifications&email_token=AAWAEQEBGFU6P2DWKGFWOV3RD72IXA5CNFSM4KWU3LBKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEMTE6WY#issuecomment-589713243>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AAWAEQEIJHCU2K7YFATS2ZTRD72IXANCNFSM4KWU3LBA>.
"
"Yes, it will keep all the Sum overloads. It is possible to fully specify the exact method, but it really complicates the signature. And in my opinion, makes this a lot more risky. We do get linker warnings if the method can't be resolved. But if we get the wrong one, we could have a bug.

For example:

```C#
[DynamicDependency(""Where`1"", typeof(Enumerable))]
```

would now become:

```C#
[DynamicDependency(""Where`1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"", typeof(Enumerable))]
```

Do you think I should go ahead and change all of them to specify the exact signature?"
"Man does this feel like a statement that's someone is going to look at in a few years and go ""well that was wrong"" #Pending"
"@github, how are you? I hope that you and everyone are safe.
I did another merge and solve some conflicts in Control Gallery projitems. And I don't know if I did it correctly. When I have a merge conflict like this I have to keep my version or merge the versions?

If I did something wrong I'll open a new PR, that way we don't spend more time trying to solve the mess of my merge."
"Hey, I assume you selected the wrong target branch :)"
"> Seeing this warning after adding values for `highContrastLight`. Any ideas what I'm doing wrong?
> 
> ```
> color contribution gitDecoration.addedResourceForeground does not provide color 'defaults.highContrastLight'. Using color for `light` instead (#587c0c).
> ```

It's just a warning which will occur with all extension that use color contributions until they adopt the new property.

For git we can fix it here: 
https://github.com/microsoft/vscode/blob/ea72a76e7b0cb342e57a80895573ddba280d7e1e/extensions/git/package.json#L2285
"
"Sorry for getting this wrong and thanks for the pointer to a sample test. I added a new test in 569d0ea7 that should test the right thing now. One kind of symbol, that is not covered yet are `SignatureOnly...` symbols. Azure pipelines CI revealed that (see [test-results](https://dev.azure.com/dnceng/public/_build/results?buildId=957883&view=ms.vss-test-web.build-test-results-tab&runId=30203184&resultId=107662&paneView=debug)). I fixed that in 388097d. Do we need tests for this kind of symbol too?"
"I don't think this is the right place to be doing this. You're deferring the viewport size, but that's not the same thing as the buffer size. I don't know if this is good enough to make the Terminal alt buffer work (I haven't looked at that side), but in cohost the results are a bit bonkers. For example, try something like this:

```
printf ""\e[?1049h"" # Switch to alt buffer
printf ""\e[8;24;60t"" # Make the window narrower (assuming 80x24 shrinking to 60x24)
printf ""\e[?1049l"" # Switch back to the main buffer
```

I'd expect the main buffer to keep that 60x24 size, but what you get is a 80 width buffer in a 60 width window. In other cases it'll just do nothing at all.

And ideally this would be using the same mechanism as the existing `_fAltWindowChanged` deferred sizing, otherwise there are bound to be weird results when you mix the too. I don't know how feasible that is though.

I honestly don't know what the right answer is here, but this definitely feels wrong."
"> Do you want the output of the tool to explain how typemaps work and what they are? 

No, not the *output of the tool*;  The `README.md` of the tool.  Which is why this comment thread started on the `README.md`.

And again, I'd be happy to write up that description, I just wasn't sure what some of the values were supposed to mean.

For example, my initial Hello World build did no linking, and thus was *huge* (yay?), with 6062 Java-to-managed entries and 5376 Managed-to-Java entries.

This should be ~everything in `Mono.Android.dll`, right? (Perhaps not?  There are 10848 TypeDefinitions within `Mono.Android.dll`, though not every typedef is a distinct binding, so ""half-ish"" might be a sensible value.)

So why don't any of these entries appear to produce output in the `Is-Generic-Type?` column?  Or am I missing something?  I thought we needed the `generic` column for e.g. `Android.Runtime.JavaList<T>`?

…which oddly isn't present?!

```
% grep JavaList x/typemap-v1-Debug-X86_64-managed.txt
Android.Runtime.JavaList, Mono.Android	java/util/ArrayList		duplicate entry
```

There *is* a generic type present, but it doesn't have anything in the `Is-Generic-Type?` column:

```
% grep JavaArray x/typemap-v1-Debug-X86_64-managed.txt
Android.Runtime.JavaArray`1, Mono.Android	mono/android/runtime/JavaArray		
```

Why doesn't `JavaArray<T>` have a value for `Is-Generic-Type`?

For that matter, why is `JavaArray<T>` the only generic type in here?

```
% grep '`' x/typemap-v1-Debug-X86_64-managed.txt
Android.Runtime.JavaArray`1, Mono.Android	mono/android/runtime/JavaArray		
```

At this point I start wondering if something is wrong with my setup…?"
"It's weird that the line endings were wrong, I thought they were ok before I pushed them. I used GitHub's Merge conflict resolution tool to fix the conflict, is that possibly part of the issue? 

To fix the ActionAndArgs thing, would I just go back to the commit before the merge, modify ActionAndArgs, and git push --force onto my fork's branch? If I'm correct, I think this would let me fix the merge conflict using GitHub's merge conflict tool. "
"@github Since this is an nint, this'll be wrong on 64-bit right? What's the right way to bind:

```
CWEventTypeUnknown                  = NSIntegerMax,
```
"
"I know that usually @github doesn't want to fix that even if it was wrong to avoid merge issues. Just wanted to point this out, I agree it was wrong."
"Is there any use for this scenario? This synthesized `Main` is not callable and since it didn't exist before the edit we know it's not in the call stack. At the same time, I guess there is nothing wrong with just allowing it."
"I followed the wrong sheep then: https://github.com/xamarin/xamarin-macios/blob/xcode10/src/Metal/Defs.cs#L223-L227

```
typedef struct {
    uint32_t threadgroupsPerGrid[3];
} MTLDispatchThreadgroupsIndirectArguments;
```"
"From the perspective of the analyzer ALC there are essentially two different questions that it needs to answer for a given assembly path that it's asked to load. 

1. Is this an assembly that should be handled by the default ALC? 
2. Is this an assembly that was specified via `/analyzer` and hence valid to *attempt* to load here? 

It is unclear based on the method name here which of the questions this is satisfying. Given that it is on the `AnalyzerAssemblyLoader` type though likely this handles case (1) above. 

If so though then specifying a file path is likely the wrong parameter type. Instead I would expect `AssemblyName` as the parameter, or even just a `string` representing the simple name. That is all the information required to answer (1) above. 

Essentially I was expecting something along the lines of: 

```c#
/// <summary> 
/// Determines if this <see cref=""AssemblyName""/> is the responsibility of the default <see cref=""AssemblyLoadContext"" /> 
/// to load. 
/// </summary>
internal bool ShouldLoadInDefaultContext(AssemblyName assemblyName); 
```
"
"I still think `BoundDagAssignmentEvaluation` is the wrong name. If we had an ""assignment"", then we wouldn't intersect sets of values. Maybe ""unalias"" would be a better term for what we're trying to do here. #Closed"
"I'd argue that is was a fix after the fact, not a consideration when the feature coding was done.

Now there's nothing wrong about putting performance first, it made a lot of sense for the original scenarios that netcore targeted. This is also true for mono. There's a lot of code, even in the Xamarin years, where performance alone (without size) was considered.

Expending the scenarios to include mobile means that code examples (like your linke) will become more common (at build time or thru the linker).

Ideally new code will consider both perf/size and not assume existing code did the same :)"
">_lazyBackingFieldSymbolForFieldKeyword [](http://example.com/codeflow?start=63&length=38)

This feels like a move to the wrong direction. It looks like now we can end up with two backing field symbols at the same time. One is created for the initializer, another is created for the ```field``` keyword. Not only we increase the amount of information we store for a property symbol, we also create confusion with two distinct field symbols to work with and choose between. 
I assume that this change was made to be able to distinguish tree states:
1. We haven't created a backing field and we don't know if we need it. 
2. We haven't created a backing field, but we know that we don't need it. 
3. We created a backing field.

As I indicated in one of the earlier threads, we can distinguish all tree states with just one field by using a sentinel value that indicates the ""unknown"" state (null value become a ""known"" state when the field is not needed). Here is the quote: ""Usually, we don't use any additional flags in order to be able to track three states like that. Instead, we use sentinel values to represent uninitialized/unknown state. See ```SourceMemberMethodSymbol._lazyIteratorElementType```, for example.""

Given that it is hard to create a dummy value of ```SynthesizedBackingFieldSymbol```. I suggest doing the following:
- Add ```static private readonly _sentinel = new object();```
- Change ```_lazyBackingFieldSymbol``` as follows ```private object _lazyBackingFieldSymbol = _sentinel;```.
- The field value should be updated only if its value is equal to ```_sentinel``` value. ```InterlockedCompareExchange``` can help with that.
- A simple check against ```_sentinel``` value (instead of a null value) can be used to test if we are still in an unknown state and have some work to do.
- We might need to record an extra information about whether the symbol was created by constructor. That can be recorder in the ```SynthesizedBackingFieldSymbol``` the same way we record whether it was created for a ```field``` keyword.
 #Closed"
"This is going to be a problem if the split did not return with 2 items in it. To avoid  surprises, test the length, if it is not the correct, exit 1 stating the reason. Otherwise we might get a $null. Pwsh does not throw exceptions when you index wrongly an array, for example:
```pwsh
$foo = @(""one"", ""two"")
$result = $foo[3]
if ($null -eq $result) {
    Write-Host ""You've got a null value!""
}
```
Because you are getting null, you get the wrong path. "
">nameof [](http://example.com/codeflow?start=95&length=6)

The presence of `nameof` here makes no difference because we are not speculating on the resulting ```InvocationExpressionSyntax```. This confuses the reader and because of that potentially sets wrong expectations."
"Unfortunately the packaging fails [which I anticipated] by having the symlinks point to wrong location:
```
filipnavara@172-4-1-17 app % ls -l /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/lib/mono/Xamarin.Mac/RedistList/
total 0
lrwxr-xr-x  1 root  wheel  161 Mar 23 07:57 FrameworkList.xml -> /Users/builder/azdo/_work/1/s/maccore/release/_mac-install/Library/Frameworks/Xamarin.Mac.framework/Versions/7.11.0.225/lib/mono/4.5/RedistList/FrameworkList.xml
```

I suppose I need to modify it to make the symlink with absolute path.

Is there any way to make the packages locally? Or can you give me pointer on how the other symlinks are handled? I also have an alternative solution without symlinks but I would like to understand the process nevertheless."
"Should we enforce in the runtime that the field passed to `CreateSpan` is always of a locally defined type and the packing matches the alignment (unless ref emitted, I guess)?

That way we won't have IL Linker/crossgen2 breaking code that works in the absence of those tools. There's still a slight chance that the alignment in metadata is wrong, but it eliminates some of the risk. E.g. Roslyn sometimes avoids introducing the PrivateImplementationDetails type if it can use a primitive type and who knows if that codepath could kick in."
"Ah, the beauty of ""Why didn't we have tests for this?"". ""We do, they just expected the wrong behavior"" :-)"
"I'm still getting used to the way we use intersection types in TS, so pardon me if this is a dumb question: why return the extra property using an intersection type and then pass it on as a separate parameter?  Also, why not actually add it to the type?  To avoid modifying the exported interface?"
Can we add some assert here that we never get non-generic IEnumerable interface. Just to protect against any wrong future use of this method.
"Right, things have already gone very wrong if think we have a tailcall with a retbuf that can be optimized with this optimization.
I will just revert this change, we will hit the assert inside of `gtCallGetDefinedRetBufLclAddr` if the flag is set and we don't have a retbuf."
"Correct me if I am wrong but a bad guessing is not really a problem - it just most likely will cause the first ""reserve"" probe to fail - we'll append 4mb to the address for the next probe 🤷‍♂️"
"Are you sure? It could be that rather than choosing a method with the wrong
signature to add to the event that the wrong event had been chosen.

On Mon, 8 Aug 2016 17:08 Kevin Pilch-Bisson, notifications@github.com
wrote:

> In
> src/Features/CSharp/Portable/CodeFixes/GenerateMethod/GenerateMethodCodeFixProvider.cs
> https://github.com/dotnet/roslyn/pull/12977#discussion_r73903609:
> 
> > @@ -80,6 +83,12 @@ protected override SyntaxNode GetTargetNode(SyntaxNode node)
> >                  return memberBindingExpression.Name;
> >              }
> > -            var assignmentExpression = node as AssignmentExpressionSyntax;
> 
> That sounds like a bug in the span being reported by the compiler -
> @github https://github.com/jaredpar?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/dotnet/roslyn/pull/12977/files/5f4832d3d3046ca8fbc428d32fed2980e1938493#r73903609,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AA822tneAUnNK522AGVuHtb1sq1vl51Dks5qd1RugaJpZM4JeRUh
> .
"
"We want existing ruleset files to work cross platform - so that users can open existing projects in Xamarin Studio on Mac, for example. So we need to handle both separators.

How about we first check if the file exists as specified. If it doesn't let's make the `\` to `/` replacement in the original string (before we expand env vars) and repeat the process. This won't handle crazy corner cases like mixed separators in Linux-mounted Windows partitions, but I think that's fine.

BTW, I noticed we call `ExpandEnvironmentVariables`. I bet Linux implementation of this method doesn't handle %VAR% syntax, or does it? I guess with some luck not many customers actually use this feature and leave it Windows specific for now. Perhaps file an issue to track this as a potential cross platform problem.

I also noticed that this class is public yet doesn't any argument validation. Also Path APIs throw on invalid characters, we should handle that and report diagnostics rather than crash.
"
"How do I know this? 

Because I had to do 30 minutes of research into LLVM to find out if it modifies the call variable or not to better understand its behavior. Nothing wrong with the people who wrote the original code; it can just be better."
"something is wrong with the indentation.
"
"In #7138 I had the equivalent of `mapper1.mappedTypes.concat(mapper2.mappedTypes)` which I'm pretty sure is wrong. But it should really be `mapper1.mappedTypes.intersect(mapper2.mappedTypes)`, I think.

Since this is an optimization, I don't think it will make a practical difference, because constructing a pathological case would be _very_ difficult.
"
"@github Is there a binary we are shipping right now that this is excluding? Or is this just cleanup to generally make this more maintainable? Both are good don't get me wrong, but is the best test of this to compare the before/after and know what changed?"
"I came from the [beta announcement](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/#esm-nodejs) page so assume this is the right place for this comment, but this PR is closed, so please correct me if wrong.

I have to agree that I **_really_** dislike the need to import `.js` files from TypeScript files, especially when they are logically referencing fellow TypeScript files that are being transpiled to JS. It really feels like a leaking abstraction. If my whole project is defined in TypeScript, why am I needing to reference JS files, that's basically a runtime concern in my opinon.

I also _quite_ dislike the need to specify a file extension in the first place. It is a DX regression from where we are today IMHO, and is not common in other programming languages.

In summary I would hope the TS compile can convert non-suffixed imports into `*.js` suffixed imports as part of the transpile step and keep the DX experience a lot cleaner.

I'm sure I'm missing a lot here, but just providing feedback from my DX perspective."
"Although the bot is obviously wrong, I noticed what looks like a typ while looking at it. `If he number will be` should probably be `If the number will be`. "
"> Today do the implementation of those kick end up doing Task.Wait?

There are a variety of patterns folks employ.  Sometimes it's:
```C#
Task t = Task.Run(() => ...);
... // do work
t.Wait();
```
Sometimes it's:
```C#
Task[] tasks = new Task[...];
for (int i = 0; i < tasks.Length; i++)
{
    tasks[i] = ...;
}
Task.WaitAll(tasks);
```
Sometimes it's:
```C#
Parallel.For(...); // or Invoke or ForEach
```
Sometimes it's:
```C#
var ce = new CountdownEvent(count);
for (int i = 0; i < count; i++)
{
    ThreadPool.QueueUserWorkItem(_ =>
    {
        try { ... } finally { ce.Signal(); }
    });
}
ce.Wait();
```
Etc.

Both Parallel.* and PLINQ use and wait on Tasks internally.

> new WebClient().DownloadString(...); // I know we're never supposed to use this API

FWIW, that will use the sync methods on HttpClient now.

> [EnableBlockingMitigation]

From a ""make sure we don't negatively affect unexpected things"" perspective, I'd be happier with that, assuming it wouldn't require anything in the runtime to do reflection on everything to look for things that might have such an attribute.  It of course still requires someone to know there's a problem, what the problem is, and what solutions there are for addressing it: at that point, we're limiting ourselves to the subset of problems where the developer is prevented from actually doing the ""right thing"" (e.g. they're forced to implement a sync interface and have only async tools at their disposal to do so) rather than the subset where they don't realize they're doing the ""wrong thing"".  From a complexity and impact perspective, while I do understand the appeal of a detect-bad-actors-and-throttle-them approach, I still think we should first be looking at and testing out simpler approaches, like tweaks to thread injection strategy we've talked about previously (e.g. ramp up beyond ProcessorCount faster than we do today)."
"I just checked on the [succeeding] leg I retried in the originally failing run and I clearly see in the log that the DllImportGenerator project gets built twice - perhaps it's a dumb idea but wouldn't it be possible to just somehow deduplicate this at the build script level?

<pre>
  WindowsBase -> D:\a\_work\1\s\artifacts\bin\WindowsBase\net7.0-Release\WindowsBase.dll
  System.Private.CoreLib.Generators -> D:\a\_work\1\s\artifacts\bin\System.Private.CoreLib.Generators\netstandard2.0-Release\System.Private.CoreLib.Generators.dll
  Microsoft.Interop.SourceGeneration -> D:\a\_work\1\s\artifacts\bin\Microsoft.Interop.SourceGeneration\netstandard2.0-Release\Microsoft.Interop.SourceGeneration.dll
  DllImportGenerator -> D:\a\_work\1\s\artifacts\bin\DllImportGenerator\netstandard2.0-Release\Microsoft.Interop.DllImportGenerator.dll
  DllImportGenerator -> D:\a\_work\1\s\artifacts\bin\DllImportGenerator\netstandard2.0-Release\Microsoft.Interop.DllImportGenerator.dll
  System.Collections.Specialized -> D:\a\_work\1\s\artifacts\bin\System.Collections.Specialized\net7.0-Release\System.Collections.Specialized.dll
  System.Collections.NonGeneric -> D:\a\_work\1\s\artifacts\bin\System.Collections.NonGeneric\net7.0-Release\System.Collections.NonGeneric.dll
</pre>
"
"Tagging subscribers to this area: @github/runtime-infrastructure
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The goal of this PR is to enable [pipeline-caching](https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops) for build scenarios of coreclr and libraries. In future, we would like to extend it for scenarios like building test, Mono and to some extent test execution. 

## Overview

The idea behind pipeline caching is simple. After the artifacts of a particular job is produced, store it in an Azure cache against a particular ""cache key"". If there is a subsequent run that happens in the pipeline (related or unrelated to the original run), and if the ""cache key"" matches, the job will simply download the cached contents and skip producing the artifacts entirely, saving us some machine time. In this PR, the artifacts creation that I am optimizing is the creation of coreclr and libraries binaries. During the coreclr/libraries build step, it will see if we have already built the binaries and if yes, it will simply download it from Azure storage and upload it as pipeline artifacts. All the steps related to installing pre-requisite tools, product build, zipping, etc. will be skipped. This is possible using `Cache@2` task of AzDo.

## Scenarios

In this PR, the support of pipeline-caching is added to all the pipelines (internal and public) that consumes `coreclr/templates/build-job.yml` and `libraries/build-job.yml` files and if triggered `Manually` or through a `PullRequest`. To take an example, if a developer submits a PullRequest that just touches `libraries` folder. During the first execution of `runtime` pipeline on the PR branch, the `build-job.yml` would build required coreclr/libraries builds. If the developer further pushes more changes and if between the initial and subsequent changes, if there were no additional changes done in `coreclr` folder on `main` branch (see more details below), the caching will restore the previously cached CoreCLR binaries without needing to build them again. It will also upload the required artifacts, just as it happens today. Since there are at least 10~30 different configuration of `coreclr` builds we do, if the cache is ""hit"", we could save approximately 30 * 15 mins = 450 minutes of machine execution time on the subsequent run once this feature is enabled. As of today, the cache key is only matched per PR-branch. In other words, if there is a PR# AAA that touched `libraries` folder and we built and cached the artifacts that were produced out of it. Next there is another PR# BBB that is sent out and it too just touched `libraries` folder, and between `AAA` and `BBB` there were no `coreclr` commits in `main`, PR #BBB will still not be able to use cached contents. I have opened an https://github.com/microsoft/azure-pipelines-tasks/issues/15589 to check why. The documentation clearly says that such scenarios are allowed, and cache can be used across branches within the same pipeline. However, if there were further updates to PR `AAA`, the cached contents can be used.

To summarize, in the best case, for a single additional push to a PR branch, pipeline caching can save up to 450 minutes of machine time. The worst case, when there are too many frequent changes in `coreclr` and `libraries`, the cache-key will never match and we will end up building the product, the way we do today except that we will continue to cache them in the hope that some run will use it. The step that caches the contents takes approximately 20 seconds and hence should not regress the current workflow.

## Cache Key

`Cache@2` needs a cache-key that should be unique for that particular run. Azdo creates a fingerprint of the cache-key and uses it to search for the cached contents. One portion of the cache-key should contain the build specific information like OS name, Architecture, BuildType (Debug, Checked or Release), framework name, etc. However, we also need a unique identifier to confirm if there were any changes in folders/files that would help us decide if a build is needed or not. The way I approached it is by checking the git-hashes of the paths we are interested in. [get_commit_hash](https://github.com/dotnet/runtime/pull/62464/files#diff-e60af28e3f16bb69b02b4c0017f9bd4b7abfdd0a50416e1848858d4a59c886faR41) is the python script that I would trigger to fetch the git-hashes of the paths that are interested for that particular build. For examples, if building `coreclr`, I would check the git commit hashes of `src/coreclr` and `src/native` folder. All the git commit hashes along with the build configuration (OS, architecture, etc.) is saved in a commit.txt file. I then use the contents of this file as the cache key that AzDo will use to check if it is a ""cache hit"" or a ""cache miss"".

Before we run the pipeline, we always merge the latest `main` in the PR branch. In such cases, if files inside `coreclr` is touched, we will always find a unique *merge* hash commit for `coreclr` folder and hence mismatch the previous cache key. This will guarantee that we build `coreclr` if there are any changes in that folder. On the contrary, we just fetch 40 commit's history during checkout. I added code to fetch little more history so we can correctly see the last commit that changed a folder/file. But sometimes, that might not be enough, and the files/folders might have changed prior to the history we have on AzDo machine. In such case, I will make an entry of `grafted` next to the file path. [Here](https://dev.azure.com/dnceng/public/_build/results?buildId=1503794&view=logs&j=54cabf5c-1ba4-54c9-31cb-a3ef0d378039&t=43aed140-0b0f-5596-36b8-b27458d6e610) are sample logs from [get_commit_hash file](https://github.com/dotnet/runtime/pull/62464/files#diff-e60af28e3f16bb69b02b4c0017f9bd4b7abfdd0a50416e1848858d4a59c886fa).

## Design

As mentioned previously, the `UsePipeline` variable is set to true only if the run is triggered from a PullRequest or Manually. It will be used to determine if `Cache@2` needs to be executed. There are other variables like `BUILD_CACHE_RESTORED`, BUILD_LOGS_RESTORED`, etc. that are set if the cache is restored. The values of these variables are then used to determine whether we should perform a particular step or should skip it.

There are few templates where the checks for `BUILD_CACHE_RESTORED` was needed and there is not a reliable way to add this in condition. Hence, I had to add their check explicitly in those yml files.

## Lookouts

Reviewers, please make sure if the paths I have listed in [get_commit_hash](https://github.com/dotnet/runtime/pull/62464/files#diff-e60af28e3f16bb69b02b4c0017f9bd4b7abfdd0a50416e1848858d4a59c886faR41) are correct and if more paths need to be added in the given categories.

## Next

I have a kustos query to understand if we are hitting ""Cache Hit"" or not. So in future, if we think that we almost never hit cache, we can look back and see how to improve things. Overall, if this is successful, it will also prove beneficial to cache building coreclr/libraries test because they are changed less frequently and hence will certainly be restored from the cache.

## Risk

It could happen that due to a bug, we might restore the cache that contains wrong or incorrect build artifacts. To work around, a developer can always make changes to one of the paths listed under `common` category and in such cases, the cache will always guarantee to see a cache miss. I have also opened https://github.com/microsoft/azure-pipelines-tasks/issues/15583 to track some other issues in this feature.


Contributes to https://github.com/dotnet/runtime/issues/59598

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>kunalspathak</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> It looks like you have a lot to implement. Am I looking at this too soon?

@github Does you think more needs to be implemented before this change can be merged? I.e., is this wrong as-is, or just incomplete from a ""full implementation"" perspective? I presume that there will be additional work to make LoongArch64 a complete implementation."
"~~@github I guess we can't do the same because the native code for managed code is allocated on a heap with ASLR and all addresses are quite large~~

hm. or maybe I am wrong, checking.."
"I think this is wrong fix. SslStream _can_ be disposed while in use. Avoiding that in our tests is not the right answer IMHO. "
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

In https://github.com/dotnet/runtime/pull/68085, I relaxed the heuristics under which we would use SIMD registers for copy block unroll code. The code generated uses temporary registers to addresses to copy (could be GC references) and they are not reported. As such, we should mark the unroll code region as GC non-interruptible to make sure GC doesn't kick in and collect the wrong objects.

Note: We were marking `gtBlkOpGcUnsafe` only for situation where destination address was local, but never checked about the source address. This PR expands it to situation when either src/dst addresses are non-local (on heap).

Fixes: https://github.com/dotnet/runtime/issues/68530

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>kunalspathak</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Technically we should fix the doc - maybe it is the wrong index as I see a `1`. Maybe we renamed a param and did not update the xml files?
"> Is that really a problem, though? The prerendering system never starts emitting any response until the initial async render is completed. So the only way that the response has started is if it's for an unrelated reason, so it's no different from someone trying to do a redirection in MVC after they've already started flushing out output - the rules for that are well understood. As such it doesn't look to me like this would be unreliable at all.

Yeah, but this needs to work well with MVC and I'm pretty sure we've discouraged people in the past from doing a redirect within a View. Even if you succeed in the redirect, a lot of things can go wrong in the server and it's just walking into unknown territory.

It's not simply about performing the redirect, but about what happens on the server. How do you stop rendering, do you throw? If so you start polluting your logs with exceptions that are surreptitiously used to do flow control.

IMO we need to think about this in detail, so for now I want to just throw until we tackle it in a holistic way."
"Because when you run tests and do things like shadow-copying (like in tests), the location points to the wrong place. This is what MVC does to find related assemblies as part of application parts, and it has been improved a couple of times based on user feedback."
"The scenario that caused it was that my tests new-up an Application object then operate on that, so when I for example do two adds it's operating on the same object, so it tries to Load the project twice. Obviously that's not a ""real"" scenario, but it's the simplest way to test things, and it hardens us against having trouble if some future refactor should end up having use run LoadProject in two different places within one command, plus to my knowledge there's nothing ""wrong"" about it."
"> I think we need to at least check on the RemoteRenderer before we call ProcessPendingRender during OnRenderCompleted

Great point. Yes. I'm adding a check for that.

> Should we log something here and no-op instead?

Since we have no reason to believe it's at possible to make this happen through normal coding patterns, I'd be more interested in having a way of getting alerted if we're wrong and it does somehow happen.

If we can articulate definite scenarios where we want to support this I'm totally open to changing this though!

> I think no-oping is safer as there might be legitimate scenarios where something got queued into the sync context and the context got disposed before it got a chance to execute (as things get serialized).

Do you have specific scenarios in mind? The scenarios I'm aware of when renders are started are:

 * If a component asks to be rendered - this already no-opped if the renderer (or component) was already disposed.
 * When adding a new root component. If the renderer was already disposed, I think it's good to throw, since it's so bizarre to be adding a new root component then. For normal server-side Blazor, the registered root component(s) will be added immediately during host creation, so definitely before disposal.
 * When resuming the queue processing after an ACK, which will now be no-opped by the updated logic here.
"
"I don't think this is working. Looking at the public CI artifacts (which perhaps are wrong) I see: `3.1.1-ci`. That indicates two things to me:

1. The `.1` patch version is applied. We want these to be `3.1.0`.
1. The `-preview1` label is being lost, though again, perhaps that's a problem in the public CI.

@github/aspnet-build do you have context on this? The same problem likely applies to the other two PRs (https://github.com/dotnet/aspnetcore/pull/17041, https://github.com/dotnet/extensions/pull/2618)"
"This was a result of Pranavs changes. I can no longer have IVT to the component factory. We can remove it or file an issue to add it back once we merge back into the appropriate branch. 

I don't feel strongly about it, so your call.

Where this help is in understanding what went wrong when you change service registration, thats why I added the test in the first place."
Dumb question but why is this better? Wouldn't the startup type be referenced in the func when it is created?
"This description looks wrong. Is the underscore a typo❔

If possible given the JSON parser used, add a comment about `invertBoolean` changing the `id` and `name.text` meanings. They look out of alignment without more info."
">Skip = ""https://github.com/dotnet/roslyn/issues/15508 [](start = 14, length = 53)

It feels wrong that parser now produces single type tuple types or tuples. I believe language grammar doesn't allow such syntax. I think it should add a missing comma token and missing type/expression for the second element, this is what we do for other similar situations. #Closed"
"I have no idea, I'm sure I'm doing something wrong. I'll rebase these changes out."
"Apparently this makes the whole code path not trimmer friendly. The DynamicallyAccessedMembers annotations are on `type`, but our attempt to unwrap nullable types messes with it because the returned value does not have any annotations. I wonder if I'm holding it wrong or if the trimmer needs to special case this API.

@github / @github?"
"@github I didn't realise there were any issues *building* the E2ETests project. That sounds serious and we would want to know if that goes wrong. I don't think we should be suppressing that kind of problem (e.g., maybe it reflects some actual SDK issue)."
"@github i highly suspect your'e right.  This is why i proposed the above:

> Note: a better approach might be to have this data just passed through the API instead of trying to re-establish it at this point in the code. It might make it clearer at which point the info is getting 'out of sync' as it were...

It's pretty clear to me that this code is trying to synthesize a relation that doesn't seem to exist.  So, it would likely be better if the entire codepath was explicit about passing this data along, and then had explicit code to try to decide what to do if/when the data didn't meet its expectation.  i.e. if the buffer we have for ""newTreeTags"" doesn't match teh one for ""oldTreeTags"", we really need to have explicit code to understand what that means, and what to do about it.

Note: this is also pretty scary to me given that taggers are supposed to be either view or buffer associated.  If we're breaking that assumption... then we need to do some pretty substantial rethinking of things.  

As an alternative, we could try to figure out why we're getting a tagger that isn't really associated with a single buffer, and we could try to change things to make it so that we have that invariant.  i.e. instead of reusing this tagger across buffer, ensure we have a unique tagger per buffer.  That way we coudl then put in invariant-checks in the code that we weren't operating on the wrong buffer."
"Gotcha!  Pity about this.  Tagging @github for visibility.  If we do want to use JTF more in IDE, it would be good if we could get our other core primitives to play nice with it.  AsyncLazy is particularly useful and it's a pity to not be able to use it.

That said, it sounds like AsyncLazy would be wrong here anyways since this is a mutable concurrent value, not a compute-once value.  So i retract the suggestion here anyways."
"We never freed this temp previously, which is why I'm not assigning this to recieverTemp (which gets freed later) and instead I'm assigning it to a new variable.

However this seems wrong to me. Could someone who understands codeGen better than I do confirm?"
"There's nothing wrong with making IExperimentationService async -- the remote implementation we checked in is doing this today:

https://github.com/dotnet/roslyn/blob/6ead316e86d304e8b5bf2b85b71cbdf35bb2b52c/src/Workspaces/Remote/Core/Services/RemoteExperimentationService.cs#L13-L17

We didn't make it async at the top level because of the uses in the constructor that you're fixing."
"The second overload below handles cases with modifiers, and depends on this overload not handling them. I see similar path for `IsTypeDeclarationContext` overloads. Either they're all wrong or for some reason by design. Before we have answer, let's make the comment acurate so not to cause misleading further."
"Based on my previous comments (they come from the wrong usage) we should remove ""!""."
This is an unrelated change. the target was just in the wrong targets file so I moved it.
"Note for other reviewers:
I thought this was wrong at first by expecting the filter to be the first attribute to be `filter`, but if you see line 821, you'll see that this is the output of `git check-attr` specifying the `filter` attribute (rather than getting the raw line in `.giattributes` [which was discussed in the PR description]), so this works generically."
I think I prefer it like this - not capturing `this` at all makes it harder for us to accidentally do the wrong thing.
"if this is required on Tizen, it probably means the platform is doing something wrong"
"actually, in this case, your x:Static syntax is wrong, but whatever, the point is having a markup that throws..."
"@github I think there is a weird cycle now between `editorGroupView#layout` and `tabsTitleControl#layout`: 
* first we ask the tabs title control for the height using `offsetHeight` which can trigger a full browser layout btw
* then we ask to layout the tabs title control
* this potentially results in the title control to change its height depending on the logic inside
* but we still use the previous computed height for the editor
* we may end up using the wrong height for the editor

I think conceptually it should be:
* `editorGroupView#layout` which will trigger...
* ...title control layout which returns its height that it ended up using
* then editor control layout with that height

With this algorithm I would also think that you do not need to know the editor height, you can simply pass the overall height into the title control layout and then decide from within if the title should wrap or not.

Does that make sense?

As for the additional challenge that a `redraw` of tabs can result in the title height changing: I think this should not trigger a `relayout`, rather I would think that the tabs title control should have an event that is fired whenever the height changes and the editor group can register on that to trigger `redraw`. I think that would also help for the current logic that triggers `redraw` when breadcrumbs are enabled or disabled.

**PS:** I think it would be good if the CSS changes in tabsTitleControl.css could get some comments, I am having a hard time understanding the need for the properties, as well as the `important` and it would help for future maintenance if the logic is explained via comments."
"This is almost certainly not the right place for this comment, but sorry: It seems like an incredibly small and simple change to review and merge! And it seems like such a no-brainer... most (99%+) programmers write their code starting at the top with the first line, not at the bottom with the last line... so covering up stuff you've just written, above where you're currently writing, seems like the wrong thing (to 99%+ of users)."
"welp, I pushed to the wrong branch."
"I added this check to avoid setting the wrong value for ContractAssemblyPath in cases like net5.0-windows. (we dont have ant net5.0-platform) currently.

"
If it's not a failure then the comment above is wrong.
"...now that we're digging into this, an obvious question is this: *Why does anybody care?*

Additionally, the description is wrong.

(Also, let's stop using ""Android Callable Wrapper"" and stick with ""Java Callable Wrapper"". ;-)

Consider a variation on the previous [repro instructions](
https://github.com/xamarin/xamarin-android/pull/2258/files#r222784089): two assemblies which both declare the ""same"" C# type:

```csharp
namespace Lib1
{
  public class EmptyClass : Java.Lang.Object
  {
  }
}
```

We thus have two different `Lib1.EmptyClass` types running around.  However, because there is no `[Register]`, then we hit the default ""md5-ify everything"" approach, which means we *can* emit two separate Java Callable Wrapper types: `md56bf89f81d87b2a3b578f763649ead9ef.EmptyClass` for `Lib1.EmptyClass, Lib1` and `md551eaf02b2ef90dc8aacda5445b93be5c.EmptyClass` for `Lib1.EmptyClass, Lib2`.

We *can* -- *do* -- generate Java Callable Wrappers for *both* types.

Thus, why care that we have two separate ""Lib1.EmptyClass"" types running around?  What's the *actual* problem?

The actual problem comes in places where an assembly cannot be specified, such as within `.axml` files.  There, if we used `<Lib1.EmptyClass/>`, there is no way to say ""use the `EmptyClass` type from Lib1"" vs. ""use the `EmptyClass` type from Lib2"".  It's ambiguous.

However, *fragments* allow avoiding this, e.g. by using `<fragment type=""Lib1.EmptyClass, Lib1"" />`.  (No idea if anyone actually uses that functionality, but it exists.)  Again, though, if you use `<fragment type=""Lib1.EmptyClass"" />` -- no assembly -- then *one* of the types is picked.  The first one.

What is the fix?  Change the type names so that they have different C# Namespace.Type names.  The documentation should likewise mention how to fix the warning."
"Okay this is better.
- [x] - Locking wasn't being taken during scrolling causing part of the invalidation state to occasionally be replaced out from under a drawn frame
- [x] - Moved all of the questionable MUL/DIVs into `scale`, `scale_up`, and `scale_down` methods.
- [x] - Added compensation in all the invalid rectangles and scrolling to use the scale factor. I played with both ceil and round and they both didn't always do the right thing... thus remaining drift. Round is a bit better than ceil. 
- [x] - Changed scrolling to hold only full cell deltas and scale at the very end.
- [x] - Changed the scroll rectangle (fed to Present1) to never include gutter pixels at the bottom/right.
- [x] - Added some more `til` templates for creation with floats (especially to `rectangle`)

But:
- [x] - Still has a bit of drift on scrolling. Only in High DPI, disabled until #5320 
- [x] - Need to add tests for the `scale` family of methods and remove the ones for MUL/DIV. Build will fail.
- [x] - Need to add tests for the new constructors with floats in `til` stuff.
- [x] - Code format.
- [x] - Need to double/triple check font size changes. Might have to paint the gutter out... - I clear the entire surface now on an invalidate all as is what happens on resize, font changes, and DPI changes. That **SEEMS** to have fixed it.
- [ ] - Check #1680 or undupe it. - 4/10/2020: can't figure out how to set up repro.
- [x] - Hang/lock scrolling while lots of text prints out (`dir /s` the OpenConsole directory then scroll) [this didn't happen for me at regular DPI. Try again with high after I change]. @github says he isn't seeing this and I believe it was probably what @github fixed in #5289
- [x] - Should `ForComposition` use `til::size` above?
- [x] - Trash the junk from `til/point`
- [x] - Present1 failure on ""wheeling like crazy"" - Converted to retrying with Present for now to ensure we don't go down for Present1 issues.
- [x] - Selection invalidation problems when scrolled - Turns out this was always broken but unioning rectangles compensated for it. Fixed in renderer base.
- [x] - Random cursor turds, on running tests in column 0? - This is dupe of 1px drift on scrolling above.
- [x] - Selections getting left behind. This was bad locking in terminal control (and by bad I mean... not locking and editing things while renderer believed it held the lock.)"
"The implementation here is wrong then, because with `/foo.bar/zap` it'll return `/foo`, which is clearly wrong."
"Getting the name of the argument this way seems wrong, is there another way to do it?"
"Yes, I got this wrong 🤦‍♂️ "
"@github because I am dumb and missed the `NWParameters` parameters class 🙈, I'll use that instead"
"I was wrong about this. I recall now that you're still expected to get a different initial state when the 'this()' constructor you chain to has SetsRequiredMembers, versus the 'base()' constructor you chain to having it.

For some reason I expected a further simplification in NullableWalker to fall out of the decision to require SetsRequiredMembers to be used on constructors which chaining to a SetsRequiredMembers constructor."
"I added a card to our board to test this.  I'm not so worried about accidentally setting path, that's easy to fix and user can change it per their intent.  I am worried if somehow we can lie to the installer javascript detection, since that would put the files  in the wrong place.  @github https://github.com/orgs/dotnet/projects/38#card-69051611"
Yea - that was wrong. I was guessing based on the test failures.
"something is def wrong here.  this indicates that selectedMemberNodes does not contain an appropriate node :)

can you report a NFW and/or assert when you get null back, so we can figure out what node types are causing this?"
"The approved API code was wrong, the comment above the code states:
> We decided to rename the QueueProcessingOrder members from { ProcessOldest, ProcessNewest } to { OldestFirst, NewestFirst }"
"so, we still have something that tells us that one is using wrong dll right? I just hit this yesterday and it was really helpful.
"
"Call me crazy, but I don't actually think we need a new test for this change. 🐱 memberScope.errors.txt and importDeclWithDeclareModifier.errors.txt, for example, show exactly the improved error message that is intended."
"It seems kind of weird to use a switch and then TypeSwitch on them. What's wrong with casting in each case?
"
"Oops.  That code is just wrong.  We should be returning getAndSetMethods.GetMethodDeclaration there.
"
"If the locale is changed after boot this will have the wrong description, since this object is created immediately. This would affect other refactors too. Should we fix this?"
"> wtf i get notifications and i can approve MR. i see this repository first time in my life and i have permissions
> [sceen](http://joxi.ru/EA4Rw3xHXyZbWm)

sorry, wrong autocomplete from github."
"I wanted to make sure that the body is fine, before passing it to `IsBetweenTokens`. But that seems to be wrong in case the semicolon is missing? Will review it carefully. The semicolon seems to be always there, at least a 'MissingSemicolonToken'. So this Assert will always succeed and therefore makes no sense. Removed.
"
"Hi! @github I think this is wrong. You should not treat it as a ""base"" of the import. It should be a fully qualified import specific. With the current behavior, it is impossible to make it emit like: `import { jsx as _jsx } from ""//cdn.example.com/my-jsx-lib/jsx-runtime.js""` cause it is not possible to add a "".js"" at the end of the import specifier.

This also requires the imported file to name exactly as ""jsx-runtime""."
I think the consensus from the meeting we had was that we should hold off on considering syntax errors until we’ve  seen that other mitigations aren’t sufficient. But @github can correct me if I’m wrong.
"> An alternative might be to not use this class at all - and instead change AesImplementation.Browser to not use this one-shot mechanism at all.

I had started down this route, but it felt like I was ""fighting the design"" too much. I would need to make a bunch of .csproj changes on which .cs files were included, and the existing one would need to be named `*.NotBrowser.cs`, etc. Also, I would need to handle all the cases that `OneShotDecrypt` already handled for me. In the end, it just felt ""wrong"".

I wasn't sure if the `cipher.HandlesPadding` / `cipher.ValidatePaddingMode` was a great design choice either, but I felt like it fit into the existing model better.

@github @github - any thoughts here?"
"That is actually not needed, I think. I have a comment here: https://github.com/dotnet/roslyn/pull/12927/files/55b4181c4040cae49c209fc23dd9b8e829cefb55#diff-8ab92731d875a419c8808cd50f634912R92

Let me know if I am wrong here.
"
You should be able to just leave them in the `checkGrammar` functions (and assume my intuition here is wrong).
"Out of curiosity, does this need to be on the top level service (or public)?  @github you don't ever implement this right?

I think this is more for C# and VB to have their really crazy impl that attempts to reuse old results and then patch them up.  I think we could make this internal.
"
"The problem with making things optional is that people forget to pass the right value in.  When i had it optional there were a bunch of places that were missed, thus causing the version of the source file to be wrong.
"
Thanks a lot @github - I thought I knew how this works... apparently I was very wrong.
"This is incorrect.  Null arguments to these methods are allowed; the docs are wrong.

See https://github.com/dotnet/runtime/blob/5ebf5867c29f3d053b74561e119853b33dfeea9a/src/libraries/System.Net.Http/src/System/Net/Http/HttpRequestMessage.cs#L94-L95
and
https://github.com/dotnet/runtime/blob/5ebf5867c29f3d053b74561e119853b33dfeea9a/src/libraries/System.Net.Http/src/System/Net/Http/HttpClient.cs#L725-L728
where if the uri is null, the HttpClient's base address is used.

This is the same behavior carried over from .NET Framework."
"> Given @github has a good lead on the underlying problem I would just take the most expedient step to disabling the test. Odds are we can fix and re-enable by EOD

I doubt it will be by end of the day 😄 
My guess seems to be wrong. I'll try to re-investigate next week after my mid-terms in case it wasn't picked by someone from the team."
"> * do we have an existing bug with incremental parsing of lambdas? (that was resolved)

My thought is ""no we don't have an existing bug"", but definitely better if someone else can take a look and confirm in case I'm wrong.

---

> how can we remind ourselves to adjust IsFabricatedToken when new uses of MergeAdjacent are made?
I thought the assertion would still be useful for the latter. Is that not the case?

Maybe just a doc comment? Or an assert that we can skip for things where we think it's okay to not be included in `IsFabricatedToken` e.g. `EqualsGreaterThanToken`.

Note that #60002 is still open and should be tracking what the correct action is."
"> Make the scanner pretend that one single line JsxText token is actually a series of consecutive JsxText tokens separated by trivia. That way, the core formatter logic Just Works™.

Oops, I said this wrong. I meant

> Make the scanner pretend that one **multiline** JsxText token is actually a series of consecutive JsxText tokens (**one per line**), separated by trivia.

E.g.

```ts
const foo = <div>
  one
    two
      three
  </div>
```

You want to treat `one`, `two`, and `three` as separate tokens in the formatting scanner, right? Just checking if I understood that correctly.

> I can take a deeper look if you feel really strong about it, just let me know.

> Working on doing a better job in documentation.

I actually think your code comments are good, they’re just hard to find because they’re two whole files away from the formatter. You wouldn’t really know in `formatting.ts` or `formattingScanner.ts` that you were going to create “synthesized” tokens, so to speak, unless you actually went into the scanner itself. This is part of the reason why I do think it’s worthwhile to at least investigate moving that logic out of the scanner."
"@github I am doing this analysis now. 

What we did know is that there are scenarios where the old scheme caused unnecessary heap growth, because we deleteted the free lists in gen 2 at the start of a background sweep, and so a gen 1 GC occurring at the wrong time may find fail to find a free space to compact items into. 

The new scheme updates free lists incrementally, so should not suffer from this problem.
"
"I'm extremely worried about the perf implications of this...

Update: wrong!

@github perf test this"
"> The previous code was semantically wrong in all cases and just happened to work.

Yep, my bad 😄. I always forget that `bool` is `int` by default, even on non-Windows (this also why I explicitly use `byte` and `int` in my own P/Invoke code >.>)."
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Hopefully this fixes issue 32972.
The added files are auto-generated I think.
The makefile.am.in does not compile
I am a newcomer to open source development, please tell me if I am doing something wrong. Thank you!

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>mihir-b-shah</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"How is splitting the code into partial classes and conditionally compile them different from the ifdefs? I thought that:
> Can we instead do this with a few strategically placed Http3.IsSupported calls.

means that we can guard the HTTP/3 stuff in place without splitting the code. Or am I wrong?

I'd really like to understand this change and what the general consensus here is, so please bear with me."
"Tagging subscribers to this area: 
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The issue is that `mono_type_is_reference` does not look at whether a generic parameter has a constraint that would make it a reference type (there is a big comment near `mono_type_is_reference` that making it do so would break generic
sharing).

The issue is if you have something like:

```

class BaseClass {}

public class C {
       public virtual BaseClass SomeCovariantFunction() => ...
}

public class G<T> : C where T : BaseClass {
       public override T SomeCovariantFunction() => ...
}
```

Here when setting up `G<T>` we do a check that the override of `SomeCovariantFunction` that returns T is a valid, which boils down to checking that `T` is ok for a covariant return from `BaseClass`.  This is mostly the same as `BaseClass` is-assignable-from `T`, except we also need to check that `T` is not a valuetype that implements interface `BaseClass`.  That check was wrong.  The fix is to check for `is_valuetype`, not `!is_reference` on `T`.

Fixes https://github.com/dotnet/runtime/issues/49731

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>lambdageek</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/dotnet/runtime/issues/58326

Backport of #58392 to release/6.0

/cc @github

## Customer Impact

Without this fix, users of `TimeZoneInfo.HasIanaId` can get wrong values when using `TimeZoneInfo.Local`.

We have exposed the new property `TimeZoneInfo.HasIanaId` in .NET 6.0. This property tells if the Time Zone object is created with IANA Id. This property returns the correct results except when using `TimeZoneInfo.Local`. The reason is when we initialize `TimeZoneInfo.Local` property we clone the object before returning it, but we missed cloning `HasIanaId` property inside the returned object. The fix is to ensure `HasIanaId` is initialized correctly in `TimeZoneInfo.Local`.

## Testing

I tested this on Windows and Linux. Also, I have run the whole regression tests with the fix without any problem. I added more tests to cover the test gap for the functionality we are fixing here.

## Risk

Is low. The fix is scoped to the `HasIanaId` property only which is a newly exposed property in .NET 6.0. The change is well tested and added more tests too.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> I pushed another commit in this PR. We also need to keep function names otherwise it will never enter in this case on MonoProxy.cs:
> 
> ```
>                             case ""mono_wasm_fire_debugger_agent_message"":
>                             case ""_mono_wasm_fire_debugger_agent_message"":
> ```
> 
> Using this PR the debugger tests are working using runtime on release and also a Blazor app can be debugged using runtime on release.

~That should be instead exported under INTERNAL, which would stay un-mangled anyway. All other non API methods should be mangled~

I was wrong, this is stack walk and so the function name needs to stay un-mangled.

@github 

"
"> I think we may be leading users in the wrong direction by including the file path.

I am not sure what you mean.  The path is hardcoded and the message contains the path that has been used to examine the limit, not some path I fancied would be appropriate.  If it stops working because of a change in the kernel, we shall have to change that in the code anyway, and the path in the message will change accordingly."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

I am wanting to test this out. I'm sure it's wrong, but I am curious.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>TIHan</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>TIHan</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I feel this is the wrong place to do validation. The setter on the property should throw for invalid values:

https://github.com/aspnet/AspNetCore/blob/master/src/Middleware/RequestThrottling/src/RequestThrottlingOptions.cs#L19
"
"Talked offline. We might do this in a subsequent PR, but the kind of stuff I was trying initially where `Mvc.ModelBinding.IBindingSourceMetadata` implements `Http.Metadata.IBindingSourceMetadata` was pretty ugly.

```c#
namespace Microsoft.AspNetCore.Mvc.ModelBinding
{
    /// <summary>
    /// Metadata which specifies the data source for model binding.
    /// </summary>
    public interface IBindingSourceMetadata : Http.Metadata.IBindingSourceMetadata
    {
        /// <summary>
        /// Gets the <see cref=""BindingSource""/>. 
        /// </summary>
        /// <remarks>
        /// The <see cref=""BindingSource""/> is metadata which can be used to determine which data
        /// sources are valid for model binding of a property or parameter.
        /// </remarks>
        new BindingSource? BindingSource { get; }

        Http.Metadata.BindingSource Http.Metadata.IBindingSourceMetadata.BindingSource
        {
            get => BindingSource?.Id switch
            {
                nameof(BindingSource.Path) => Http.Metadata.BindingSource.Route,
                nameof(BindingSource.Query) => Http.Metadata.BindingSource.Query,
                nameof(BindingSource.Header) => Http.Metadata.BindingSource.Header,
                nameof(BindingSource.Body) => Http.Metadata.BindingSource.Body,
                nameof(BindingSource.Form) => Http.Metadata.BindingSource.Form,
                nameof(BindingSource.Services) => Http.Metadata.BindingSource.Services,
                _ => Http.Metadata.BindingSource.Custom
            };
        }
    }
}
```

Now this doesn't even compile (C# doesn't like interfaces having members with the same name even if explicitly implemented), but you can see the ugliness of having two very similar interfaces.

There are 6 `IFrom*Metadata` attributes so far. I don't think that's too crazy. I do like that the eventual extensibility would be just to create a new interface rather than a second-class `Custom` or `Other` BindingSource."
"@github because we were signing it 😄 

Basically when I converted to SignUtil I started by doing a diagnostic run on our signed builds.  That spit out the list of assemblies which were being signed.  I assumed that was correct and replicated the list in the sign tool data.  

If that's wrong I'm happy to remove. 
"
Dumb question: why not just use https://blogs.technet.microsoft.com/heyscriptingguy/2011/05/22/use-powershell-to-make-mandatory-parameters/?
"So I changed it to try that out, it required changing a couple other spots too. Take a quick look to make sure it's not obviously wrong, or if we prefer the first way."
I also had this wrong when I first suggested this update.
@github The challenge here was the runner needs to effectively pass the variable to the unit test itself. I don't think xunit supports some way to do that but would love to be proved wrong. (I suggested this to @github and wasn't happy with myself either.) #Resolved
"@github there's an integration test associated with this PR. @github we write the set of resolved assemblies (when LinkOnBuild=false) to disk and use that in incremental builds. The file was using the wrong variable so it always wrote an empty file. This fixes it.
"
@github @github I didn't use the tool here. I manually updated the file and file was on wrong encoding and VS fixed it by moving to UTF-8 (it was saved in western english something encoding)
Same comment: We should be testing to make sure that appropriate exceptions are thrown on wrong-language invocations. #WontFix
" I was wrong, so close this pr"
"> Why is this tool intentionally targeting an EOL runtime?

Because customers don't follow EOL rules religiously and our partners, like NSwag, support even older packages.

> All the packages we build now explicitly block consumers targetting netcoreapp2.1.

That isn't the case for Microsoft.Extensions.ApiDescription.Server but it also doesn't really matter. A 7.0.x dependency won't work in a 3.1.x or 6.0.x web application either.

One general point is Microsoft.Extensions.ApiDescription.Server has no dependencies at all. Any dependency won't work when loading its ""inside man"" assembly into an existing 2.1, 3.1 or 6.0 web site. Another is it's **Just Wrong:tm:** for Microsoft.Extensions.HostFactoryResolver.Sources to expect anything of its environment."
I don't get what's wrong with calling ToString
"So that's not the right one either, since that's using the [wrong comparer](https://github.com/dotnet/roslyn/blob/e14e5f559ecbaa13424ede01296e06b54ba6b224/src/CodeStyle/Core/Analyzers/AnalyzerConfigOptions.cs#L10-L14). A comparer for an empty dictionary, you say? Well, yes, it matters if somebody grabs it and starts adding keys into it. The compiler is precise about this, and rather than duplicating the precision I'm just letting the optionalness of this flow through."
"> I have followed the implementation used by the existing context implementations. We can possibly clean this up for the whole file based on performance measurements. Tagging @github 

locking on a delegate instance feels wrong to me. Even if other code does similar things, I see no good reason to do this just because other parts do the same wrong thing. Could you point me to all possible delegates that can end up here?

---
In reply to: [292216857](https://github.com/dotnet/roslyn/pull/36067#discussion_r292216857) [](ancestors = 292216857)"
"@github does my ifdef for immutable hashset/sortedset make sense? I don't mean to seem dumb, but I only vaguely know what I'm doing :)"
"Please disable the test and point to the tracking issue; the IDE policy is to disable tests rather than assert the ""wrong"" thing."
"This doesn't seem to take into account the `CompareKind`, and seems like it will be wrong in the face of substituted nullability. Please add tests to verify that this works as expected."
wrong args order wrt command args and command id
"This itemgroup is wrong, you should never compile implementation code (specially from corelib) via a reference project. Instead you should be referencing the contract where we are exposing DynamicallyAccessedMembersAttribute to get that reference which is System.Runtime."
"note: imo, what we shoudl be doing here is removing this options, and just passing in Latest to ParseTypeName.  that way we're effectively saying ""are there any diagnostics *unrelated* to ""you're using teh wrong langversion""."
"Wow that's a lot! I suppose because on Windows mutexes are implemented using critical sections whose implementation is in a .dll? That's crazy! In a sad way... 😞 I can't imagine this to be the case with Rust or Go tbh...

As mentioned before you could use template specialization to unify the classname at least: https://gist.github.com/lhecker/8b465dd8232669593c1e60efe25e05d3"
"I noticed this coming in from another commit and although it probably works because of the same string value, it felt wrong."
This is a wrong approach to tackle this issue. Due to that closing this PR as out of scope
"My comment https://github.com/microsoft/vscode/pull/115264#issuecomment-776770853 was wrong, but with https://github.com/microsoft/vscode/commit/f294b6f81090546583ba995b947d66ed468f8d17 calling `replaceEditors` will now ask for each dirty editor that get's replaced what to do with it."
"Yea, I don't think I can use a template to have all these set automagically. I might be wrong on that, but it certainly doesn't seem like I can use a `Setter` to set the `Resources` like this"
"I've had an idea for a different shape for this API which would make some things simpler, which would look something like this:

```ts
interface NotebookKernel {
    executeCells(document: NotebookDocument, cells: NotebookCellRange[], executionObject: NotebookCellExecution): Promise<SomeResult>;
}

// Kernel can call executeCommand('executeCell', { cell }); to trigger an execution
```

Peng and I discussed this. It's more in a direction similar to what we have today but keeps the execution object concept. Essentially the execution object would only be created by vscode and passed via the executeCells API, and if a kernel needs to trigger an execution, it would call some API or use executeCommand to do that, and vscode would call `executeCells` shortly after.

Pros are that it would give more of a ""single direction"" of data flow between vscode and the kernel. The run button clicking case and the kernel-initiated execution case would work exactly the same way. The executeCells API really feels like it should return a promise that actually follows the lifetime of the execution process, and this enables that.

Cons are that this inverses the relationship between vscode and the kernel. If the kernel really is the source of truth about whether a cell is executing, then it's wrong to have an API model where the kernel has to request that vscode start executing a cell. Really it has to be vscode that requests that the kernel start an execution, and the kernel telling vscode that it is executing. Tbh I'm having trouble telling whether this is just a philosophical problem or a real one. But I think that this solution has to lead to vscode being the one to maintain the execution state of a cell, rather than the kernel.

Also the shape above is not correct, we would need to figure out how to pass N execution objects for cells in the range, which is weird, or change the API to execute a single cell, which is also weird."
"that was a hack because we were checking the wrong thing.. if you look at all the code you will see _actionMode is set to null on destroy and thats the mode that we created when clicking the toolbar item.
"
"> > I'm trying to customize the colors and it doesn't work for me.
> 
> @github did you try the instructions at https://code.visualstudio.com/docs/getstarted/themes#_customizing-a-color-theme ?

Hello, how are you? Thank you for your answer.
Excuse my English, I only speak Spanish.
Well, I'm trying to do it like that, but if you look, when writing it doesn't show me the option of ""editorBracketHighlight.foregroundn""
I don't know if I'm doing something wrong.

![image](https://user-images.githubusercontent.com/80189444/132041850-215d74a7-f9e8-4c20-a056-dc8ee0d4dcb2.png)

These are the errors it shows me.

![image](https://user-images.githubusercontent.com/80189444/132042663-45957f89-58f4-4753-a988-7d19b9ea783f.png)

Thanks."
this seems like the wrong abstraction-- the app should not tell the control to blink after the control tells the app that there was a bell.
"(fair warning, I may be completely wrong in how I'm thinking about this)
We have one `AppHost` per window right? So why are we destroying the tray icon each time we close a window? Shouldn't we just be updating the tray with which windows there are? Isn't it the monarch's responsibility to actually destroy the tray icon if there are no more windows?"
"Very important question: is `MonoClass*` a per-AppDomain value? What gives me pause is that `MonoJavaGCBridgeInfo::klass` is used from the GC thread, and thus from *any* (*every*) AppDomain, and is used with `mono_class_is_subclass_of()`, among other functions. If `MonoClass*` is a per-AppDomain value, *everything* is wrong, and then it becomes *really* important to unify with [the `java-interop` logic][0].

[0]: https://github.com/xamarin/java.interop/blob/master/src/java-interop/java-interop-gc-bridge-mono.c"
"These type definitions should include the CORECLR_CALLING_CONVENTION, otherwise on x86 Windows, a wrong calling convention might get used depending on what calling convention the host has set as default."
I'm not sure I understood why this is wrong? It sounds like they should be the same; what do they really represent?
">if (symbol is Symbols.PublicModel.Symbol csharpSymbol) [](start = 12, length = 54)

Attributes is not C# specific concept, symbol model allows to check for them even when we are dealing with non-C# symbols. I guess it is fine to use this as an optimization, but it feels wrong to limit the behavior just to C# symbols."
"I haven't been able to figure out what's wrong here. I've found that when I force a failure (e.g. by uncommenting the line earlier in this change which forces the optimization level of the rebuild to Release), there are nondeterministic errors when visualizing the PDB.

Sometimes PDB2XML fails, sometimes MDV fails, and the messages vary a bit. So I am wondering if I am messing up creating/using the PDB stream, or... what?"
"I am unsure about this one. WebSocketsSupported is defined as:
```c#
if (PlatformDetection.IsBrowser && !PlatformDetection.IsBrowserDomSupported)
{
     return false;
}
```
Which leads to to believe that there are some WASM environments where it should be supported. I've copied this from other tests in the same project that were using LoopbackServer. See https://github.com/dotnet/runtime/blob/79ae74f5ca5c8a6fe3a48935e85bd7374959c570/src/libraries/System.Net.WebSockets.Client/tests/CloseTest.cs#L375-L379 for example.

Let me know if I'm wrong and I will remove the linked issue for the Browser case."
"In the issue you linked to this pull request, there is a discussion about the version of Unicode that is supported _by the Windows Console_. The version that Windows Terminal (and OpenConsole) supports doesn't mean _anything_ for FluentTerm, because they are not using Windows Terminal (or OpenConsole)... so you're somewhat barking up the wrong tree in asking.

However: the inbox Windows console is updated from this repository, and this change made it into builds numbered 21xxx. Before that, we supported some smattering of Unicode versions 9, 10, and 11."
The message (even the old one) is wrong. We don't support 64bits on classic but other XM profiles (Full or Modern) do support 64 bits.
start with either `!unknown-` or `!wrong-` so it gets sorted along other important/critical logs
"Either declaring the string locally (and testing what happens for a currently unknown input so we can try to have a handler for it if/when it breaks) or making that one combination fall back to SecurityTransforms is good with me.

The private API latch feels wrong, and might fail an appstore ingestion test."
wrong - that can't go in master
Indentation is wrong here.
same (wrong casing)
"That's not the same thing, though.  Let's say we started targeting a new platform that had statvfs but not statfs, yet we were using the code file that invoked SystemNative_GetFileSystemType.  We wouldn't get a compile time error, but we would silently get wrong behavior at run time."
"Use the newer helper here, so there'se no risk of that cast being on the wrong thread?"
"Yes thanks. Missed that.

@github it looks like the test exclusion added in https://github.com/dotnet/runtime/commit/9035d94a5075a482307383132e46974699fe08b3 has the wrong path. I left it as-is in this PR."
Wasn't this added the wrong way around?
"Can the virtualness go away here so this is less buggy? I see there's still some specific C# logic around handling of aliases, but can we have a virtual method for just that rather than a crazy override like this?
"
"Note that what I said above is a strict correctness requirement on morphing functions: they must not delete nodes under CSE (technically they must not delete active CSE candidates, but for simplicity and robustness it is preferred to simply not run folding under CSE), they must preserve VNs, not doing so can (and has) lead to hard to diagnose silent bad codegen bugs and/or crashes. Note that I think it will be hard to reproduce something going wrong here (perhaps with aggressive CSE for constants...), I would not recommend spending much time on finding a reproduction.

There is a possible exception to the ""must preserve VNs"" rule in that it should be ""fine"" to create new nodes with `NoVN`, but we shy away from doing so for simplicity purposes (it is easier to reason about - ""Does morph preserve VNs?"" -- ""Yes, always"", instead of ""Well, sort of kind of"")."
"I think either way is ok. It is just an assert text and either way it is sufficiently clear what went wrong.
"
"Okay, copied this from a wrong place"
"Hm. Actually I'm wrong. Looks like only the low 16 bits have any sort of value (with a big chunk for properties just marked ""unused"").  So maybe I can put it in the high 16 bits"
Don't you need to reset it in sourceMap as well (to avoid accidental wrong sourceFile pick)?
"Consider: should this just _tcs.SetResult() so if somebody loses the race (which I don't think is the pattern for this type) it's clear that something went wrong?
"
"But do we need two ways to do it? I'm just arguing for `null` because it's consistent with `tsconfig` files. Plus - `undefined` is supposed to be synonymous with ""not defined"", so there's a good argument to be made that, if it existed, `--strict --tsBundleInfoPath undefined` should be interpreted as `--strict` (who knows, maybe you're writing a dumb bit of shellcode and that's useful to you), which would mean it simply shouldn't do _anything_, rather than overriding the value set by the config file (whereas `null` is a sentinel used for, like, literally any non-regular state).

The ""ideal"" is probably `--no-` prefixed flags (eg, `--no-tsBundleInfoPath`) that explicitly unset things provided by lower priority sources, but we probably don't need to get that explicit."
I don't think you need the `Volatile.Write` here since you're inside a lock. AFAIK that should emit memory barriers if necessary. @github please correct me if I'm wrong.
"Returning `Continue` would allow the list to be populated with globals, while `Fail` makes the list empty. This condition represents a grammar error (export declarations must be at the top level), so it sort of doesn’t matter, but globals (and non-top-level locals) are definitely wrong to include in the list. Arguably it could be better to just `findAncestor` the module block or source file and offer the same completions you’d get if the export declaration were in a valid location... I guess I’ll do that; it will remove a couple lines of code."
"You'll need to be a little careful on this one in case of dumb inputs. For example,

```
class C {
  static ""\""""() { }
}

(new C())[""\""""]();
```"
"Correct if I am wrong but you only need to check xorNode here, e.g. `if (xorNode->gtSetFlags())`"
"> Seems like we have an issue in TieredCompilation in the call count logic. Since we are doing a reverse P/Invoke it is possible the thread doesn't exist.

Is this an issue that would exist before this change or only after this change?

My first thought is that the reverse-pinvoke transition would be the best place to create the thread object. Would that be possible? I'm not aware if that is something that is being tried to be avoided.

If this is expected after this change, I'm curious about other potential issues with the thread object not existing.

> I think that (2) is probably the right thing to do since the call is going to have to create a thread anyways.

Where would the thread object be created?

If it's reaching this path without a thread object available, it can also reach jitted code of the method without the thread object being available. I'm not sure if there would be other issues with that. Just an example, how would the following not be possible:
- The native-callable method is already jitted (on a different thread)
- The native code calls the method from the new thread after it has already been jitted, which would typically go to the jitted code without going through the prestub
- The managed native-callable method calls a virtual method that ends up in `VSD_ResolveWorker`, which may have similar issues with not having the thread object available - not entirely sure

I don't know if it is currently safe to call managed code on a thread without a thread object, perhaps others would know. From briefly looking at the relevant code, it almost seems like a thread object is necessary to transition between preemptive and cooperative GC modes, though that's just a far estimation and I could be wrong about that."
":-1: this is wrong
"
"I'd rather you checked the sizes instead of `diagnostics[i] &&`, and that you always print out the entire results if something is wrong.
"
"@github I did the changes as requested, but this problem https://github.com/dotnet/roslyn/pull/49632#issuecomment-748269230 still applies and I have no idea what's wrong with it and how to address it."
"> @github/dnceng I am seeing some weird things here. could you please double check if there is anything wrong? basically the PR showing the legs which not completed as ""in progress"" but when I view it in AzDo I am seeing them queued and not started. I am experiencing some problems with these legs and I had to restart them hoping behave nicely. Thanks for your help.

Sure, I'll take a look :)"
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=79103&_a=summary))."
"Took a step back and dug a little deeper to understand why the repro posted by Ryan [here](https://github.com/microsoft/TypeScript/issues/44572#issuecomment-860786816) works when the `B` type parameter is deleted--which is really odd.

I now understand what the real problem is.

We have logic in `structuredTypeRelatedTo` that skips over variance checks for type alias instantiations and type references that contain marker types in their type arguments. The intent is to force structural comparisons during variance computations. However, the logic only skips for _certain_ instantiations involving marker types, namely those where one type argument is a marker type and the remaining type arguments are just the type parameters themselves. That means we _don't_ skip over variance checking for a type instantiation like `Child<?, unknown>` (where `?` is a marker type), and that's the kind of instantiation we get in the example because of the defaulted type argument for `B`. So, we start reporting `Ternary.Unknown` results where really we should be doing structural comparisons.

Changing our logic to skip variance checking for any type instantiation where at least one type argument is a marker type fixes the issue. It causes us to do a bit more structural comparing when computing variances, but obviously it was wrong not to do this extra work. I think this is the solution we want to go with. I will put up a new PR and we'll see what the performance impact is, if any."
"> Hmm, I think I need to rebase for that one, don't I?

I could be wrong but I expect that runs that are triggered via `/azp run` are merged with the current main head, just like the default runtime-dev-innerloop.

From the log:
https://dev.azure.com/dnceng/public/_build/results?buildId=1156405&view=logs&j=e2176d62-3fb6-5179-e340-9cc434b4aa5a&t=a3ddac58-ea20-55ce-a88e-6de49e130568&l=596
Merge 7027588b2f807f1b605cf1baa0aef304e8843af2 into 959c3275e80a41d6485ec4f4dec7aa477ee46ed6
"
"> If we rely on polling to be set doesn't that mean we have a problem with the product, since that is not the default?

Hi @github - yes, but I think this is a somewhat known issue for certain environments. In fact, I just had to update docs to mention details about this per @github, see https://github.com/dotnet/runtime/issues/51866#issuecomment-826936347. 

I'm not certain that this is isolated to Ubuntu 16.04, but that is the only environment that I saw occasionally failing for this test unit test. I believed it to be related to the `FileSystemWatcher` not reliably signaling that the file has changed. I also found an old [SO](https://stackoverflow.com/a/31236514/2410379) that mentioned concerns with Ubuntu and the `FileSystemWatcher` not signaling. I could be wrong, but I did want to at least give it a try."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

List.Remove had a wrong comment. Fixed it.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>bakwc</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Collections`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"The seem to be test failures there, for example:
```
[EXEC       <] [FAIL] [00:00:02.126] > /Users/runner/work/1/s/artifacts/tests/Release/ha/o2fy5n4v.lt1/PortableApp/bin/PortableApp exited with 131
```

But the test upload probably didn't work, or something else happened since the specific test results are not available. There are also no detailed logs from the tests (the `xml` files or similar).

I don't know enough about the infra to be able to tell if this is a problem, or by design. In any case we will either need to get a repro, or at least get the test logs for the failures in CI to have a clue what's going on.

One idea: @github when you tried to repro it - does your machine have the latest RC2 bits installed globally? Specifically - do you have anything in `/usr/local/share/dotnet/x64` ? It should not be there if this is running on x64 hardware...
I can't tell from the logs what is the hardware this runs on - if it's an arm64 hardware... I could see several different things potentially going wrong."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

I used the wrong register in the VM stub implementation for this function.
In addition, some changes are necessary for VSD calls through dispatcher
(that we cannot do on x64).

Fix #65111

Also remove macOS from the jit-cfg job. jit-cfg includes a GCStress
scenario which is not supported on macOS x64. Rather than
excluding it just there, just exclude all of macOS since CFG is a
Windows only feature anyway.

I am still keeping the Linux-x64/Linux-arm64 jobs as we produce
different IR for arguments on these ABIs and I want to keep the CFG
handling working in general for all the forms of IR we can produce
related to calls.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Now that we had the logging to see what was wrong, I was able to reproduce the real problem in a test and fix it:

https://github.com/xamarin/xamarin-android/pull/6043"
"I don't understand, we were in the same meeting where we decided that's not a good idea without giving a consumer of IBufferWriter a way to notify other components that memory is preserved.


Even with pipe implementation holding onto Memory is safe only until flush is called which is often not controlled by IBufferWriter consumer. Like in the following sample:

``` C#
var writer = new SomeLenghtPrefixSerializer(response.BodyPipe);
foreach (var o in objects)
{
   writer.WriteObject(o);
   // Is this safe to do or is writer still holding onto memory?
   await response.BodyPipe.FlushAsync();
}
```

Getting this kind of assumption wrong can lead to severe consequences - considering that we reuse blocks response intended for one client can be sent to another one.

Another reason is that IBufferWriter implementation can be transforming bytes synchronously (encryption/compression) after they were advanced. "
"The default is being calculated incorrectly in the use case where I'm deriving from `WAF<T>` to host an HTTP server on a real port for Selenium UI tests, so there's no point reaching in for it, because it's wrong. This mean that the application was failing to find various static assets, like JS files, so the tests were failing.

I needed to manually ""fix"" it, and that involved having to duplicate this code so I could re-use it:

https://github.com/martincostello/alexa-london-travel-site/blob/e9af0ce3e70c7cbb0d047a276db42491ccec89e5/tests/LondonTravel.Site.Tests/Integration/TestServerFixture.cs#L83

It's possible that there's a separate issue either here or in my code that means the root is being set/calculated/overridden incorrectly in the first place, but it seemed ""better"" to be able to just leverage the code that was already there (but privately), rather than having to copy-paste as I've had to do with 2.2 and 3.0 preview 2."
"I don't actually get this. So we have a list of metadata, and you're reversing it... this seems like the wrong fix the problem. "
"I completely agree. Fast engagement can save a lot investigation later by helping bug reporters provide more details, a better repro, etc...

> Investigations, which accumulate no more than 5 upvotes and/or comments by different users during a period of a month will be automatically closed. The reason is that the impact is very scoped and potentially something is wrong in the user code.

I understand the desire to auto-close issues to reduce our workload, but I think this would allow too many things to fall under the radar. I support @github's suggestion of using the ""Needs: Author feedback"" as the primary mechanism for auto-closing investigations.

If it really is something wrong in the user code or environment, we can usually figure that out by asking for a simplified repro (and not getting one). Oftentimes, bug submitters will report back with what they did wrong which allows us to learn common pitfalls and gives us opportunity to try to improve docs or APIs. Often times bug submitters will go ahead and submit a PR to improve the docs themselves."
"I would be careful with those things, since I'm not sure how it affects timer registration and other lower level things. I'm not saying that what you are suggesting is wrong, just that I can't confidently say is right."
"We do not have a dedicated IOperation for default label, but do have a different case kind: http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/CaseKind.cs,65f316f2e0138ff5,references. Current approach now seems wrong to me as the case kind will be Pattern for the default label, it should instead be Default, which will be the case with your original suggestion (I also need to update the dump to also print the case kind)."
What if the user puts in the wrong int? Wouldn't that throw a casting exception?
"No; the idea is to exit the loop even if the user wrote the wrong closing token. It keeps the parser from running away. See also `ParseArgumentList`.

---
In reply to: [151522391](https://github.com/dotnet/roslyn/pull/23208#discussion_r151522391) [](ancestors = 151522391)"
Feel free to let me know if this change is crazy because I removed some fundamental piece of infrastructure.
Wrong comment?
❗️ Failure to copy these files directly to the subfolder resulted in a failure to preserve the file's encoding. This is the wrong `i`. #Resolved
">ExplicitBaseImplementationNotConsideredImplementationForInterfaceWithDifferentTupleNames_02 [](start = 20, length = 91)

Looks like a new error (compat issue). It would be good to dig up the latest LDM notes on the topic. If I recall, the previous behavior was intentional (tuple names don't matter in OHI).

For what it's worth, the notes in speclet: https://github.com/dotnet/roslyn/blob/master/docs/features/tuples.md#overloading-overriding-hiding

Update: I remembered wrong and the speclet is out-of-date. Names do matter (LDM 7/15/2016, per https://github.com/dotnet/roslyn/pull/12689).  #Resolved"
"Added assert.

@github I've went and cleaned up most of the allocations I could find on this path when I saw it come up while typing.

Maybe there's something wrong in the VSMac host, WRT checksums, but I've done validation recently and they seem okay."
"is there something wrong with the formatting in here? It seems fine..

Perhaps it wants the `{` on the same indent level as the `var`?"
😕 wrong commit?
What's wrong here? #Resolved
"That's certainly what I wrote.

Really it's that

* All the parameters types show the fields as nullable, because they're also input types.
* When exported, the public fields aren't null
* This helper therefore never sees null
* But it takes many `!`s to express that.

If extended to the full ""compare this parameters struct to that one"", null and empty are different (though empty is ""wrong""), so I went with this behavior."
"dumb question.  why is this here, instead of inside `._protocol.GoToDefinitionAsync` when it needs to call out to 3rd parties?"
"> I'd say taking dependency on that behavior was wrong

Valuing back-compat means I won't second-guess whether dependencies on our current behavior are wise, reasonable, or intentional. I only care how likely it is that the dependencies exist and weigh the harm it would cause customers to have their working app break vs. the value the change brings.

> Let's make it consistent and predictable

These aren't the attributes I value much when modifying existing shipping code. If there are specific scenarios that customers are likely to hit and making this change will benefit them then that could be compelling. Otherwise I am quite content sticking with the devil I know : )"
"I would consider it wrong. Having both encodings be non-null means we've produced an `EmitOptions` that can't really be represented on the command line. Further it complicates the logic to know ""was a fallback enocding used?"" When looking at a `Compilation` you can just do a `null` check but when looking at `EmitOptions` the same `null` check for the same named property is not sufficient. "
The previous logic was wrong here too but EnableDebugging is more like DebugLevel and is and integer.  The integer value should be passed to the call.
"Test is wrong now. I originally was throwing from everyhting that was in-memory before I figured out we actually doc'd the behavior. I need to write a new test using single-file, but don't know where to write the test"
"@github thanks for finding that, I can confirm it looks suspicious. I have opened https://github.com/microsoft/vscode/issues/108607 to look into it. This will also require that `preload` scripts get access to the configuration, or a subset. Once I have tackled that problem, we should revisit this PR too.

> Just reiterating so we are on the same page, the problem that this tries to fix is that VS Code is trying to check the wrong environment for VSCODE_CLI and VSCODE_FORCE_USER_ENV. 

Understood. One impact your change has is that we will now always resolve the shell environment on startup, even if you start from the command line. This may have a bad impact on startup perf because we need to spawn another process. A more elegant solution imho would be to really only trigger this dance for the first window that needs it. But I cannot really see a good solution for this at the moment given we resolve the shell environment once and then store the promise.

"
"This path is wrong "
"I'm _mildly_ worried about putting the emoji in the file as literals like this - I know in the past we've had issues where someone's text editor saves a file with emoji as the wrong encoding which then end up breaking the tests later. I could be mistaken though, I'll let @github or @github refresh my memory if this is a bad idea or not."
"Instead of defining `_errorFormat` as a global constant it's probably easier to understand if you write:
```cpp
static std::wstring formatResultCode(HRESULT hr)
{
    return fmt::format(L""{0} ({0:#010x})"", hr);
}
```

But is there any specific reason you didn't just put this format specifier into the .resw strings (not saying this is wrong - just curious)?"
"As per: https://pubs.opengroup.org/onlinepubs/009695399/basedefs/sys/types.h.html

`stat::st_size` is of type `off_t`, and `off_t` is a *signed* integral type.

Admittedly, it would be bona-fide *crazy* for `sbuf.st_size` to be a negative value, so I suppose we don't need to check for negative sizes...do we?  (I hope not!)"
"~~Not easily. It would require a significant refactoring of construction.~~ I misread this as returning an actual thing, not `null`. It would be possible, but whether it's the right thing to do, I'd need to think on a bit. It certainly seems like `SignatureOnlyParameterSymbol` was not intended to be publicly exposed, as `ContainingSymbol` throws, so the fact that we have them at all feels wrong to me."
"> I think projects tend to reuse shorthands. And certainly w/in a commit or series.

Agreed, yeah probably.

> I'm also open to ideas for how to write rules for extra exclusions. e.g. Ignore strings shorter than x characters, or longer than y characters.

I would immediately gravitate toward regex, but some people hate that.

> One thing you should do is review the whitelist, in reviewing it just now, I realized that there were a couple of misspellings in it... which I'm addressing by fixing & removing.

OK. I'll go read it as fully as I can.

> One example is `defing` which could easily be written out as `defining` if one wanted to force the word (the context is `#define` / `#undef`).

I don't think I'd be that critical, personally. But someone else might care more than me.

> There's also the odd case of `TfEditses.cpp` -- that resulted in `Editses` being in the whitelist, but the thing is `EditSession` and it probably should be `TfEditSes.cpp`. -- Addressing that would be a distinct PR as it's a significant code change (renaming a file) and I'd definitely want pre-approval before considering it.

It could even change straight up into `TfEditSession.cpp`. That's fine with me.

> Note that you'll probably see things like `egistry` in the whitelist, since `\r` and `\t` are often used as escape characters, my code makes some assumptions at the expense of forcing people to whitelist some things which aren't actually misspelled in context. -- Windows unfortunately (for my code) tends to use `\` as a path delimiter which means that when my code looks at the string it's making the wrong guess and lopping off that `r` or `t`.

Eh, that's OK.

> Anyway, please feel free to try it for a bit. I'm definitely eager to improve the experience.

Yes, I think we'll refine it further after it's in.

"
❔ Was this changed as part of the wrong commit?
"I just saw this change... I think it's faulty. It's also going to be more-wrong in any application that is configured to use Solarized via the ANSI/terminal codes, as the [Solarized Dark background `base03` is canonically _brblack_, index 8](https://ethanschoonover.com/solarized/#the-values).

I'd suggest, if you want to go this way, to adopt the [cmd-colours variation of Solarized](https://github.com/shanselman/cmd-colors-solarized), which swaps _all_ the bright/non-bright attributes. Using it requires modifying colour mappings for 16-colour Solarized themes, but at least it's a consistent swap rather than individual replacement, and already a known quantity for people coming from Conhost-based Solarized setups.

----

(Side-note: I was confused because this commit appears in the list of [commits to master _since_ 1.2.2022.0 was tagged](https://github.com/microsoft/terminal/compare/v1.2.2022.0...master), linked from [the release](https://github.com/microsoft/terminal/releases/tag/v1.2.2022.0). Is the git tag incorrect compared to the release?)

----

Results with canonical Solarized colours:
![image](https://user-images.githubusercontent.com/138397/88387154-3fd7a480-cdf5-11ea-98cd-6563408c1987.png)

Results on Terminal 1.2.2022.0 with newly-modified Solarized Dark:
![image](https://user-images.githubusercontent.com/138397/88386619-1ec28400-cdf4-11ea-9642-9ab587393caf.png)

The gain is that `$ESC[48;5;0m` is now the same as `$ESC[40m`, i.e. hiding #293. The loss is that `$ESC[48;5;0m` and `$ESC[48;5;8m` (and hence `$ESC[40m` and `$ESC[100m` are reversed which means your dark background has the wrong brightness relationship to your dark foreground.

Why were you testing with `#073642` (`base02`) on `#002b36` (`base03`) BTW? Those are both background colours in Solarized, so you should never actually see that combination. If this is the problem we're trying to solve, then indeed just punting Solarized from the codebase is probably the best option, since it always requires further configuration than just switching a colour palette.

My Terminal-colour test script, the Solarized-specific part is at the bottom.
```PowerShell
# Based on https://github.com/fikovnik/bin-scripts/blob/master/color-test.sh
#   Author: Giles Orr
#   URL: http://gilesorr.com/bashprompt/howto/c350.html
#   License: GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation;
#            http://gilesorr.com/bashprompt/howto/a1004.html
#   Termcolor and Solarized outputs (the last three sections) by Paul ""TBBle"" Hampson
# and https://www.reddit.com/r/PowerShell/comments/b06gtw/til_that_powershell_can_do_colors/

$NL=[char]13
$ESC=[char]27
$TAB=[char]9

$T='gYw'   # The test text

Write-Host ""$NL                 40m     41m     42m     43m     44m     45m     46m     47m"";

$FGList = '    m', '   1m', '  30m', '1;30m', '  31m', '1;31m', '  32m', '1;32m', '  33m', '1;33m', '  34m', '1;34m', '  35m', '1;35m', '  36m', '1;36m', '  37m', '1;37m'

foreach ($FGs in $FGList) {
  $FG=$FGs -replace ' ',''
  Write-Host -NoNewline "" $FGs $ESC[$FG  $T  ""
  foreach ($BG in ""40m"", ""41m"", ""42m"", ""43m"", ""44m"", ""45m"", ""46m"", ""47m"") {
    Write-Host -NoNewline "" $ESC[$FG$ESC[$BG  $T  $ESC[0m"";
  }
  Write-Host
}
Write-Host

#Write-Host ""$ESC[0mCOLOR_NC (No color)""
#Write-Host ""$ESC[1;37mCOLOR_WHITE$TAB$ESC[0;30mCOLOR_BLACK$ESC[0m""
#Write-Host ""$ESC[0;34mCOLOR_BLUE$TAB$ESC[1;34mCOLOR_LIGHT_BLUE$ESC[0m""
#Write-Host ""$ESC[0;32mCOLOR_GREEN$TAB$ESC[1;32mCOLOR_LIGHT_GREEN$ESC[0m""
#Write-Host ""$ESC[0;36mCOLOR_CYAN$TAB$ESC[1;36mCOLOR_LIGHT_CYAN$ESC[0m""
#Write-Host ""$ESC[0;31mCOLOR_RED$TAB$ESC[1;31mCOLOR_LIGHT_RED$ESC[0m""
#Write-Host ""$ESC[0;35mCOLOR_PURPLE$TAB$ESC[1;35mCOLOR_LIGHT_PURPLE$ESC[0m""
#Write-Host ""$ESC[0;33mCOLOR_YELLOW$TAB$ESC[1;33mCOLOR_LIGHT_YELLOW$ESC[0m""
#Write-Host ""$ESC[1;30mCOLOR_GRAY$TAB$ESC[0;37mCOLOR_LIGHT_GRAY$ESC[0m""
#Write-Host

Write-Host ""Termcolors FG""
Write-Host ""$ESC[0;30mblack$TAB$ESC[1;30mbrblack$ESC[0m""
Write-Host ""$ESC[0;31mred$TAB$ESC[1;31mbrred$ESC[0m""
Write-Host ""$ESC[0;32mgreen$TAB$ESC[1;32mbrgreen$ESC[0m""
Write-Host ""$ESC[0;33myellow$TAB$ESC[1;33mbryellow$ESC[0m""
Write-Host ""$ESC[0;34mblue$TAB$ESC[1;34mbrblue$ESC[0m""
Write-Host ""$ESC[0;35mmagenta$TAB$ESC[1;35mbrmagenta$ESC[0m""
Write-Host ""$ESC[0;36mcyan$TAB$ESC[1;36mbrcyan$ESC[0m""
Write-Host ""$ESC[0;37mwhite$TAB$ESC[1;37mbrwhite$ESC[0m""
Write-Host

Write-Host ""Solarized FG (aixterm)""
#Write-Host ""base03$TAB$ESC[38;2;0;43;54mRGB$TAB$ESC[38;5;8mfg$TAB$ESC[90mbrblack$ESC[0m$TAB$TAB<== DARK BG""
#Write-Host ""base02$TAB$ESC[38;2;7;54;66mRGB$TAB$ESC[38;5;0mfg$TAB$ESC[30mblack$ESC[0m$TAB$TAB<== DARK BG HIGHLIGHT""
Write-Host ""base01$TAB$ESC[38;2;88;110;117mRGB$TAB$ESC[38;5;10mfg$TAB$ESC[92mbrgreen$ESC[0m$TAB$TAB<== DARK FG SECONDARY, LIGHT FG HIGHLIGHT""
Write-Host ""base00$TAB$ESC[38;2;101;123;131mRGB$TAB$ESC[38;5;11mfg$TAB$ESC[93mbryellow$ESC[0m$TAB<== LIGHT FG""
Write-Host ""base0$TAB$ESC[38;2;131;148;150mRGB$TAB$ESC[38;5;12mfg$TAB$ESC[94mbrblue$ESC[0m$TAB$TAB<== DARK FG""
Write-Host ""base1$TAB$ESC[38;2;147;161;161mRGB$TAB$ESC[38;5;14mfg$TAB$ESC[96mbrcyan$ESC[0m$TAB$TAB<== DARK FG HIGHLIGHT, LIGHT FG SECONDARY""
#Write-Host ""base2$TAB$ESC[38;2;238;232;213mRGB$TAB$ESC[38;5;7mfg$TAB$ESC[37mwhite$ESC[0m$TAB$TAB<== LIGHT BG HIGHLIGHT""
#Write-Host ""base3$TAB$ESC[38;2;253;246;227mRGB$TAB$ESC[38;5;15mfg$TAB$ESC[97mbrwhite$ESC[0m$TAB$TAB<== LIGHT BG""
Write-Host ""yellow$TAB$ESC[38;2;181;137;0mRGB$TAB$ESC[38;5;3mfg$TAB$ESC[33myellow$ESC[0m""
Write-Host ""orange$TAB$ESC[38;2;203;75;22mRGB$TAB$ESC[38;5;9mfg$TAB$ESC[91mbrred$ESC[0m""
Write-Host ""red$TAB$ESC[38;2;220;50;47mRGB$TAB$ESC[38;5;1mfg$TAB$ESC[31mred$ESC[0m""
Write-Host ""magenta$TAB$ESC[38;2;211;54;130mRGB$TAB$ESC[38;5;5mfg$TAB$ESC[35mmagenta$ESC[0m""
Write-Host ""violet$TAB$ESC[38;2;108;113;196mRGB$TAB$ESC[38;5;13mfg$TAB$ESC[95mbrmagenta$ESC[0m""
Write-Host ""blue$TAB$ESC[38;2;38;139;210mRGB$TAB$ESC[38;5;4mfg$TAB$ESC[34mblue$ESC[0m""
Write-Host ""cyan$TAB$ESC[38;2;42;161;152mRGB$TAB$ESC[38;5;6mfg$TAB$ESC[36mcyan$ESC[0m""
Write-Host ""green$TAB$ESC[38;2;133;153;0mRGB$TAB$ESC[38;5;2mfg$TAB$ESC[32mgreen$ESC[0m""
Write-Host

Write-Host ""Solarized BG (aixterm)""
Write-Host ""base03$TAB$ESC[48;2;0;43;54mRGB$TAB$ESC[48;5;8mbg$TAB$ESC[100mbrblack$ESC[0m$TAB$TAB<== DARK BG""
Write-Host ""base02$TAB$ESC[48;2;7;54;66mRGB$TAB$ESC[48;5;0mbg$TAB$ESC[40mblack$ESC[0m$TAB$TAB<== DARK BG HIGHLIGHT""
#Write-Host ""base01$TAB$ESC[48;2;88;110;117mRGB$TAB$ESC[48;5;10mbg$TAB$ESC[102mbrgreen$ESC[0m$TAB$TAB<== DARK FG SECONDARY, LIGHT FG HIGHLIGHT""
#Write-Host ""base00$TAB$ESC[48;2;101;123;131mRGB$TAB$ESC[48;5;11mbg$TAB$ESC[103mbryellow$ESC[0m$TAB<== LIGHT FG""
#Write-Host ""base0$TAB$ESC[48;2;131;148;150mRGB$TAB$ESC[48;5;12mbg$TAB$ESC[104mbrblue$ESC[0m$TAB$TAB<== DARK FG""
#Write-Host ""base1$TAB$ESC[48;2;147;161;161mRGB$TAB$ESC[48;5;14mbg$TAB$ESC[106mbrcyan$ESC[0m$TAB$TAB<== DARK FG HIGHLIGHT, LIGHT FG SECONDARY""
Write-Host ""base2$TAB$ESC[48;2;238;232;213mRGB$TAB$ESC[48;5;7mbg$TAB$ESC[47mwhite$ESC[0m$TAB$TAB<== LIGHT BG HIGHLIGHT""
Write-Host ""base3$TAB$ESC[48;2;253;246;227mRGB$TAB$ESC[48;5;15mbg$TAB$ESC[107mbrwhite$ESC[0m$TAB$TAB<== LIGHT BG""
#Write-Host ""yellow$TAB$ESC[48;2;181;137;0mRGB$TAB$ESC[48;5;3mbg$TAB$ESC[43myellow$ESC[0m""
#Write-Host ""orange$TAB$ESC[48;2;203;75;22mRGB$TAB$ESC[48;5;9mbg$TAB$ESC[101mbrred$ESC[0m""
#Write-Host ""red$TAB$ESC[48;2;220;50;47mRGB$TAB$ESC[48;5;1mbg$TAB$ESC[41mred$ESC[0m""
#Write-Host ""magenta$TAB$ESC[48;2;211;54;130mRGB$TAB$ESC[48;5;5mbg$TAB$ESC[45mmagenta$ESC[0m""
#Write-Host ""violet$TAB$ESC[48;2;108;113;196mRGB$TAB$ESC[48;5;13mbg$TAB$ESC[105mbrmagenta$ESC[0m""
#Write-Host ""blue$TAB$ESC[48;2;38;139;210mRGB$TAB$ESC[48;5;4mbg$TAB$ESC[44mblue$ESC[0m""
#Write-Host ""cyan$TAB$ESC[48;2;42;161;152mRGB$TAB$ESC[48;5;6mbg$TAB$ESC[46mcyan$ESC[0m""
#Write-Host ""green$TAB$ESC[48;2;133;153;0mRGB$TAB$ESC[48;5;2mbg$TAB$ESC[42mgreen$ESC[0m""
```"
"> (That said, I do like the idea. There has been some discussion in the .NET world and presumably the general CLI community about having something closer to semantic markup or more representative of application intent in terminal emulation. Not likely to to anywhere, but interesting to consider what a world is like where we give text _meaning_ instead of just _style_!)

Quite a departure from a ""dumb"" terminal churning through command codes..."
"It appears the toolchain works fine, I've created its new release and bumped this PR to use it. There were a couple of test failures here which appeared not to be related to the PR (one HTTP timeout and one dotnet run failure that **did** however build and install the app, logcat contained no errors neither did `msbuild.binlog` so I have no idea what went wrong, we'll see if it fails again)"
"> Really? What about when someone actually holding alt and the key? Wouldn’t that create confusion? By the way if you actually hold alt and press the keys, some other characters will be typed. I don’t know the reason behind this, but win32 vim is aligned with WSL vim so I assume it’s correct. 获取 Outlook for iOS<[aka.ms/o0ukef](https://aka.ms/o0ukef)>

I mean I could be wrong. I still want to understand WHY only one of them can't handle it though. Making a global input change to fix ONE case when all others work feels risky.

But on the other hand too... we know the CJK support was never great. So it could have just been always wrong. I don't want to be a complete downer here. I just think we have to tread carefully and understand as much as we can."
These tests should assert that correct exceptions are thrown for a given conditon - for example when a wrong password is used vs when a password isn't provided at all. The expected message could be added as part of MemberData here.
"This should have an `int x` parameter I'm guessing, otherwise the name of the test is wrong, and its the same as the above test anyway"
"`inputs` should probably be made a `HashSet<string>` now, since otherwise it can end up with multiple identical paths (it's probably not directly wrong, just wasteful)."
">>Do we support field keywords in indexers?

> Is this an unnecessary work you want to eliminate?

Not only that. In my opinion, it would be simply wrong to set ```_containsFieldKeyword``` to true for an indexer access. Regardless of what we have in its body. According to the specification, there could be no ```field``` keywords there.

> The reason I did that is for when we don't have any accessor declarations at all, e.g ```public int P => field;```.

Do we actually come through this code path for this scenario? I thought the previous constructor is supposed to handle that scenario."
"Chooses the wrong parent, we would need to ping to the -m 2 "
"This namespace change means the expected TelemetryId has changed to `00000000-0000-0000-54ad-749900000000`. Also, it seems we are asserting the expected and actual values in the wrong order."
"I though you will need in your spread-operator. I was wrong -> remove
"
"that is another issue.. deleting the entire list may not be correct in the general case.. for instance `var { x } = foo()` if `foo` had side effects, then deleting it would be wrong.. 

One option is to convert it to `var {} = foo()` which is what i was thinking about when i asked about commas earlier. but i do agree that this solution would be ugly. 

Alternatively, we gonna just make it `foo()`, and if the expression was a single identifier or a property access we can remove it. We have in the checker a function `isSideEffectFree`, we could leverage this to decide whether to delete the whole statement or not."
"You're correct, but if something goes wrong then we have a bigger problem than wasting an allocation. And so we prefer the simpler code."
"> Why do we presume this problem can arise for COMMAs only?

The problem does exist today as well. Today, we don't even check if we are hoisting past a tree that has side-effects (the example that you are stating). To me, `GT_COMMA` was the obvious one because of bounds check, but certainly if there are more examples where things can go wrong, we should address them here or in future PRs. 

> Why is the logic gated on visiting the current tree? 

The same reason. We visit the stack in execution order (bottom to top, as mentioned in comments) and I wanted to make sure to not hoist children past its parents, if parents have side-effects. Let me know if you can think of a better way to validate this.

> the same problem could, presumably, arise.

I noticed last week too while (in `main`) debugging something related where we hoist the checks ahead of side-effects but in that example, the range checks were getting eliminated by assertion prop and hence wouldn't have seen any functional difference. "
"Ah, darn. I was just hoping for a straightforward way to test a negative, since these tests don't seem to be able to use ranges to assert which fixes happen where (maybe I'm wrong on that front)."
"@github To compile against the reference assemblies would mean using MetadataLoadContext, as far as I can tell this removes the potentially easy path of saving metadata using [IMetaDataEmit::Save](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/metadata/imetadataemit-save-method) or [AssemblyExtensions.TryGetRawMetadata](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.assemblyextensions.trygetrawmetadata?view=netcore-3.1) and then doing a dumb copy over from MetadataReader to MetadataBuilder.

While I'm not sure AssemblyBuilder based Assembly can be used with the above two APIs, they would not produce the desired result of being compiled against ref assemblies in any case.

To completely do this using MetadataLoadContext would mean re-implementing the serialization. Does this seem accurate?"
"@github I think we view keeping the Git line history clean the same way. That's why I fix up commits for things like typos or anything else that is pure noise that doesn't document the changes. Depending on the intermediate wrong turn in question, I might or might not keep it around if I think it could potentially be interesting as future documentation. ""This is what it looked like when we tried X."" Anyway, there are no ideals, only tradeoffs, and what you say makes sense."
"> Pushing it all the way to 0.

Pooling has costs. Extra code to avoid allocation needs to be loaded and JIT'd and has costs (beyond complexity and maintenance costs). Allocation counts as a sole metric can easily tune for the wrong thing, and an occasional allocation can yield better all-up performance than the extra code to avoid it.

> Adding that optimization did improve resolver service building performance at the time of writing

Thanks. I'm trying to gauge the benefits to actually investing more here. Those wins you saw, that was from reducing allocation alone, or were there other aspects of the change that were the most impactful? Link to a PR? Thanks."
@github Thanks. I'll change it to a warning. But I still need to know where my implementation went wrong. Thanks in advance.
"I don't think this fix is correct either. notice in the beginning of the methods we already did some rounding 

```C#
double millis_double = value * (double)scale + (value >= 0 ? 0.5 : -0.5);
```

using millis_double as double later (as the fix suggested) will end up with wrong results as the previous rounding was intended to round to the nearest long number. 

Of course this is a breaking change and this change will affect almost all Add date and time units which can change the conditions of the overflow or when we throw exceptions. In addition this may affect app depending on the current behavior. and as pointed before, our docs clearly describing the behavior which reflect the original design/behavior. 

In same time, you can easily work around the issue by providing your math. I mean getting the ticks and add whatever values you calculate.

Maybe adding a new API for the new behavior can be safer here. I suggest closing this one."
"@github Shouldn't `\A` complete to `\A`? That's the behavior in local Roslyn, e.g. with something like: `var y = new Regex(@"""");` and typing `\A` between the `""""`.

Also, I agree adding a test like you're suggesting would be ideal, but I don't think it can be done with the current test infrastructure in Roslyn since LSP is the one who ultimately commits the item. I think it can be done in the DDRITs (@github please correct me if I'm wrong here), but I think we should probably do that after the feature flag is removed."
"No, the config value is the default if you do not call the SSL_CTX_set_cipher_list() or SSL_set_cipher_list() at all. I believe dotnet always calls at least one of these so the config value is always overridden. The best would be to not call these functions if you want proper encrypted TLS.
The choices that allow unencrypted TLS are also wrong as with the default SECLEVEL (which is 1) the eNULL ciphers are disabled."
"I believe this is the wrong solution. 

I believe the better solution is, if the base class only has a `get`ter (thus the base class property is `readonly`), then there should be an error in that particular case. Otherwise, there should be no error. (Additionally, the subclass should have the opportunity to make the property not readonly by defining a new accessor).

Blocking normal JavaScript behavior is against TypeScript's design goals, and this change does not improve static type checking for end users: it limits type checking, rather than expanding it in a useful way.

This is painful upgrading a library to TS 4."
"@github do not get me wrong it is a good thing but microsoft will not merge it we would need to maintain a vscode fork for that and i am not joking i am fighting with them since 5+ years.

Your Solution is better then nothing. And it is more then i got done till today :) So i already cherry picked it internal.

but we need to make it more easy useable as sayed overall the path forward is to create or fork the deprecated language-server project then integrate for example this typescript version and create a installer for that so that existing vscode users can simple install this as additional language server
then we could start to solve the problem complet via refactoring this indipendent."
"Thanks for the much detailed feedback! It was very helpful.
1. As you've mentioned, I've modified the code so the autocompletion are also given to the `unknown`, `object`, `{}`,  `Record<string, any>` , *an object having String index type*, `<T extends object>`, `<T extends {}>`.

2. > More practically, it’s going to be too expensive to check the assignability of every identifier in the completions list, so I think the choice is between offering all the completions, even wrong ones, or none.

IMHO, offering all the completions would be better even if some of are wrong. The difference between the contextual type case is that dot can't be followed in shorthand completion so there's no chance that ending up with different type. Even though, as you mentioned, since checking all the assignability of the list is expensive, just offering them all rather than nothing could give more good user experience, I think.

3. If those types are good to go, I think types with `Object` and `Object | { a: string}`(Union type including empty object type) could be also good to go. In addition, the code below has no error with using `foo` inside of the object literal so it seems reasonable to suggest auto completion.
```ts
declare const foo: number;
interface Empty {}
interface Typed { typed: number; }

declare function f10<T extends Object>(obj: T): void;
declare function f13<T extends (Empty | Object | Typed)>(obj: T): void;

f10({foo});
f13({foo});
```
[Playground, v4.0.5](https://www.typescriptlang.org/play?#code/CYUwxgNghgTiAEYD2A7AzgF3gMyUgXPCgK4C2ARiDANwBQAlihldlGAgKKkAOGAnvADeAXwZMWbBABU+3EMCHx+c4IRIUq1eKNqhIsBNmIowGeqhwBGABRJyAK0LGA1iiQB3FAEpCANyT0wHR60HA4xqbmKDgATLYOhHb24Bg+8P6BweChhhFmFtgAzPGO8ADyDilpGUG62QbhJvnR2AAsJYQASuBIMMAAPJgwjADmADTwUCh8AHzVAbUhDUZNUTgArB3w3ch9-eqUMBNTs-OZdfphK5EFAGxbgvAA2s4gfIRDowC6amSH2mdFvUrnk1tgAOwPZ6vd5EP5UH5wjQwAF+BZZS65VYFAAcWxkKkBGJyjRuLQAnP0pPAQAAPZgoYBoeBJFIzfFEi4k67NKwABipNPpIEZzIqyVM7KShCknKWIOxLUslkFdIZTKEwilCXgsrR53lWLJVhiquFovgXF4sw5+qBmNJvOwlkKZvVzOsVv48AAPuVKqZfbrZPIvNrSnr0ujaLRndZBLgkMIvHRsHEE3hk6nihmkynY+1c1nY5si-nsPcy6nIVXY3ja9hyfHE8XnXzm5ny8qO3nU5Z0y2uznB9QgA)
The last committed code contains implementation of it.
I'm expecting that you can test it on the playground once you pack it.
Please give a thoughts about this suggestion!

4. While I'm implementing this, I needed to check if the object is empty object type(ex: `{}`) or not.
Since it seems that there's no such function in `completions.ts`, I made some extra exports from `checker.ts` to use in `completions.ts` which are,
- `isTypeSubsetOf()`
- `isEmptyObjectType()`
- `globalObjectType` (`@github getGlobalObjectType()`)

I'm not sure if it is legal to do this only for my intention.
Please give an advice whether it is okay anyway? (also, looks like **typescript-bot** is complaining about the *lib update* and what can I do this for it :o)

5. I made a split the mentioned test file into multiple files using `// @github` directive.
> I would actually just split that test file up into a file per line.

Thanks !"
"I haven't looked at the pr yet. However my general concern is around how a particular piece of coffee knows which overload to use, and if there are problems if they use the wrong one. 

For example:

> In code style layer the method also takes ISyntaxFormatting or ISimplification instance, 

What if you're not in the codestyle layer?  Can you still use these? Should you?  Would it be bug if you used the wrong one?"
"> please note the signatures of AtomicComposition.TryGetValue<T>() were updated to [NotNullWhen(true)] out T? value rather than [MaybeNullWhen(false)] out T value

But that's not a valid change, is it?  null values are valid, and the caller could specify a nullable T, in which case the annotation is wrong: TryGetValue could successfully return true and give back value == null.  In general that's why we use `[MaybeNullWhen(false)]` on generic outs from TryGetValue.  What makes this one special?"
"That makes me more confident that this won't break TS programs. Still, I thought JS functions didn't use contextual typing to find a type from `@github`. Am I wrong?
If functions don't use contextual typing, then methods should use a mechanism similar to the one functions use."
"> Couldn't you go with predictable and safe behavior (although slow)

We considered it and we don't think it's feasible. An unknown number of code bases out there would be negatively impacted, in some cases quite dramatically. To wit, compilation of `immutable.js` slowed down 50x with the candidate PR. It's an awful experience when updating to the latest version of TypeScript all of a sudden hangs your build process. I'd love to do better, but for the moment we don't have other candidate solutions.

Also, it really is relatively rare that the current implementation gets variance measurement wrong. It requires types to be circularly dependent _and_ to flip variance somewhere in the circularity. That happens, but it definitely isn't common.

> I'm worried that by accepting the random behavior now the community will get stuck with it forever

The scenarios in which the issue occurs are rare and well understood, and we'll continue to think about ways in which we can improve accuracy of variance measurement without adversely affecting performance. Nothing prevents us from adopting a better algorithm in the future.

> It should be “contravariant”

Indeed. Thanks for catching that, I have fixed it.

> how measuring is different from what u check and for what u raise errors described in the thread?

Variance measurement is similar to variance annotation checking, but requires more checks. Specifically, we always perform at least two checks (subtype-to-supertype and supertype-to-subtype) to measure variance, and sometimes require a third check to distinguish bivariance from unwitnessed type parameters. In contrast, annotation checking requires only one check for co- or contravariance, and no check at all for invariance."
"@github `System.Linq` dependency was not a problem, as only `.ToArray()` was being used and I was able to reference `EnumerableHelpers` to get it working. It turned out that we also have a dependency to `Queue<T>` and `Stack<T>` which I had to move as well. Is that acceptable?

I followed the pattern that you have used for `System.IO`, but I got stuck with the following error:

```log
/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props(277,5): error MSB4018: The ""GenerateRuntimeGraph"" task failed unexpectedly. [/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/Microsoft.NETCore.Platforms.csproj]
/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props(277,5): error MSB4018: System.TypeLoadException: Could not load type 'System.IO.File' from assembly 'System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. [/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/Microsoft.NETCore.Platforms.csproj]
/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props(277,5): error MSB4018:    at Microsoft.NETCore.Platforms.BuildTasks.GenerateRuntimeGraph.Execute() [/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/Microsoft.NETCore.Platforms.csproj]
/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props(277,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/Microsoft.NETCore.Platforms.csproj]
/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props(277,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/adam/projects/runtime/src/libraries/Microsoft.NETCore.Platforms/src/Microsoft.NETCore.Platforms.csproj]
```

@github is there any chance that you could take a look at my changes and see what I am doing wrong?"
"Tagging subscribers to this area: @github/gc
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The problem was that the assert didn't take into account the fact that some regions may be on the decommit list already due to aging of regions.

The good news is that only the assert was wrong.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>PeterSolMS</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>PeterSolMS</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github Thanks for linking the issue and providing more information.

In my opinion, if the API provides method with cancellation token it should be possible to use at
any time. That for a cancellation token is! And also passed timeout treated well and works as
expected in the `NamedPipeClientStream`.

The async-over-sync pattern is implemented by dividing wait time into small pieces to be able check
the passed cancellation token. I think the problem of that PR not in the design domain but just a
regular bug where timeout handled wrong."
They were made to debug any JsonTypeInfo/JsonPropertyInfo issues. There are still couple of other flaky issues other than the one mentioned - I'm not yet sure if that will be useful for debugging those or not. Also this is super useful when making changes and something goes wrong or gets regressed (I had to explore these information many times under debugger when doing prototyping for contract resolver and that actually makes it much easier to extract). I'll leave this for now and we can clean it up once we are confident our tests are not blocking CI runs
I was logging the wrong thing here. `e` is `XUnitAssertException`
I think I'm wrong. What this overload should do is to see if Uri is SAS uri and if not use DefaultAzureCredential for authentication.
"I believe properties that can be deserialized from JSON must have public setters - correct me if I'm wrong on this. If that's the case, we probably don't need users to be able to tinker with the various properties, hence the internal `FileListEntry` and the public `IFileListEntry` that describes those properties as read-only."
"My guess is that your reasoning is that the value *might* in fact be `null`, because JS might return null/undefined, and then STJ will give you `null` at runtime. However that's no more true when calling JS code than it is when calling .NET code (which might have not-null annotation but then actually returns null at runtime).

The best .NET-only analogy for JS interop would be a developer making calls to their own code (because both the .NET and JS parts are typically the developer's own code). When calling your own code, you get to choose what the nullability annotation says on the called-code side, and it's up to you the developer to get that right. If you're wrong, and you say something returns nonnull but it actually returns null at runtime, then you'll get a NRE when dereferencing but that's fine because you shouldn't get it wrong. In this case because the called-code is JS you can't put the nullability annotation there, so you have to put it in the generic parameter to `InvokeAsync` instead. Why shouldn't you be free to specify whatever nullability you want there? If the value might be null, say so, and if not, say not.

The only case I could make for treating .NET specially is that JS return values are more untrusted than .NET return values. If there are reasonable security reasons for needing to check for null return values then I would agree it's helpful to make the compiler guide people to do that. However I can't really think of cases where it would be *more* problematic to get a NRE during dereferencing compared with throwing another exception preemptively due to a null check."
"> Is there a chance that it could be related to this?

Yup. We were probably compiling against the wrong reference assemblies.

> Although the test it originally occurred on isn't running anymore...

o.O?"
"Not saying this is wrong, but how does this work? So if an exception is thrown, either this runs immediately before catch blocks or not. If it does, then it'll recurse no matter what. If it doesn't...there's basically special magic involved? Then it's not recursive?"
"> If we are concerned about this, can we detect this on the server and throw an exception before we even start sending data? It's not something we care about in general.

Updated accordingly. 

I'd still like to keep the client provided `error` to the `ReceiveJSDataChunk` in case of exceptionary circumstances (ex. something goes wrong with SignalR causing the client to error out). By having the client send the error, the server can proceed to close the pipe and dispose the stream. Let me know if you have concerns with this approach."
"@github in this branch, we're just doing the bare minimum to test the ref readonly feature on the new version. @github's work (he can correct me if I'm wrong) will handle the versioning story, with all the side items required (project system/IDE), and it will eventually be merged into this branch, overwriting the tiny fixes here."
Maybe we should also add a crazy big variant of this that parses 1000 cookies as well?
I don't remember :) but seems wrong. Fixing
"Don't understand why we are returning `False` here.  Even if VB doesn't deal with these typse returning `False` here still seems wrong.  If the function isn't implemented it should throw, not return the (potentially) wrong answer.   #ByDesign"
It was wrong to check this URL for liveness.
"I think you found the bug that caused the wrong duplicated value and this change should be ok but I wonder if we we should keep using the `CompositeValueProvider` here. I really agree with you that it doesn't sounds very useful since each element call to the value provider will have the exact same `ModelName` that make it difficult to provide a value for a specific index.  maybe @github, that have been discussing in the issue, could have more inputs here."
">TestExplicitConversionNotEmittedOnConstantValue [](start = 19, length = 47)

There is something wrong with this test, I would expect IL to have a WriteLine call, at least. #Closed"
"How bad can it go .... 😂😂😂
![image](https://user-images.githubusercontent.com/2266487/92290006-e47bf480-ef12-11ea-9a3a-61717b6e725a.png)


![image](https://user-images.githubusercontent.com/2266487/92290116-463c5e80-ef13-11ea-851e-7dc6c7412cd7.png)


Look like I just selected the wrong base branch in GitHub but it was properly created
So in fact the surprise is that the CI was able to build that ""diff"""
"Seems wrong as `ImmutableArray` is a struct. Am I missing something?

---
In reply to: [156219771](https://github.com/dotnet/roslyn/pull/23428#discussion_r156219771) [](ancestors = 156219771)"
"> do we wait for 5.0 branches to open to get this change in? It's all infrastructural.

Yep, gotta wait until branches are open. The issue isn't what kind of changes go in, it's the fact that new commits trigger new builds which publish new things with the old branding (and, if we aren't careful or the timing is wrong, new builds trigger dependency flow, which compounds the problem)."
"💭 This is some crazy spaghetti code. Would be much better if `CreateAddedDocumentPreviewViewCoreAsync` returned `IDisposable`, or in the absence of that at least managed to return `(object noIdeaWhatThisIs, IDisposable lifetimeObject)`."
"this is wrong. you should use ""c"", not context.OperationContext.UserCancellation since you took over ownership - OperationContent.TaskOwnership."
"❗️ Wrong namespace

```suggestion
namespace Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification
```"
Just checked and `ObjectDisposedException` is available in netstandard2.0 hence most likely Intellisense is just wrong here. https://apisof.net/catalog/System.ObjectDisposedException
">Kind [](start = 7, length = 4)

I don't think this list belongs in the parser.  I think it belongs in semantic analysis.  The parser should accept any identifier and let semantic analysis sort it out.  I could be wrong about this... #Resolved"
Wrong license. #Resolved
"Yes, I tried adding a test, but I don't see the wrong behavior as soon as use the result (`x` in your example). So I will skip adding test but while I was there, I also optimized `GetLower()` ."
"Did you mean to reformat these? Maybe ""format document"" did the wrong thing"
"mixing && ! || together is tougher to read.  there's nothing wrong with statements :)  "
"also... i feel like this isn't quite what you want.  First, this will be wrong if you're on the *right* side of a parenthesized expr.  i.e. `((...)) $$`.  This will get the close-paren, then walk up this tree.

What is likely better is that you handle the `(` specially below.  i.e. if you have an `(` to hte left, you then use .WalkUpParentheses just for that case, and then analyze what's to the left of the topmost `(` of the parenthesized exprs."
"may need to look for a better solution here - If the referenced module has ""main"" set to a sub directory in its package.json, then modulePath would refer to a subdir and therefore cause pathInModule to be resolved relative to the wrong directory"
"No problemo. I only added it as it was in the spec. Did I read the spec wrong or is the spec wrong? "
"TryGetPropertyName will probably fail on unregistered parentNode, so it looks safe. again, I want this code to keep throwing on anything going wrong"
"wrong path
```suggestion
    <Compile Update=""$(MSBuildThisFileDirectory)Issue6254.xaml.cs"">
```"
"if by attribute you mean blink, underline, bold, double wide, or double height, then it's what the ANSI terminal protocol requires, and waiting for somebody to ask for it is probably the wrong approach.

if by attribute you mean something internal that doesn't impact ANSI compatibility, then i'd agree, ""why bother?""

see also: https://invisible-island.net/vttest/vttest.html"
"Oops, copied the wrong code, fixed (also, added `\0`). Now testing"
"Not sure what's going on with the commit history in the PR:

![image](https://user-images.githubusercontent.com/2193314/160690546-a36b2e50-a7de-4cb8-8aa5-ad84c2dff802.png)

Based on the wrong branch maybe?"
"Oops, my bad - I read it the wrong way..."
"Looking at the code I don't think it would be a ton of work to add, and I really don't like the error as it exists because it's just wrong.

---
In reply to: [558627354](https://github.com/dotnet/roslyn/pull/50424#discussion_r558627354) [](ancestors = 558627354)"
"(I'm a bit rusty so I may be wrong here) I think we can remove these.
- `LibraryResources` --> we generally use that for `RS_()` which we're not using in this file
- `WinRTUtils` --> should be covered by the `Utils.h` imported in the header file."
"Which is all to suggest that maybe a ""`clang` version check"" is the wrong course of action here, and perhaps instead check for a *file* within the SDK which suggests that arm64 is supported?

Swift documentation appears to be per-ABI, resulting in files such as:

```
/Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk/System/iOSSupport/usr/lib/swift/CoreNFC.swiftmodule/arm64.swiftdoc
```

Xcode 11 has a `CoreNFC.swiftmodule/x86_64.swiftdoc`, but no `arm64.swiftdoc` file.

Alternatively, the `SDKSettings.json` file mentions it:

```
/* /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk//SDKSettings.json */
…
""DeploymentTargetSettingName"":""MACOSX_DEPLOYMENT_TARGET"",""Archs"":[""x86_64"",""x86_64h"",""arm64""]
…
```

It's all one line, but the Xcode 11 `SDKSettings.json` file doesn't contain *any* mention of arm64`, meaning `grep` may be sufficient:

```
$ grep arm64 /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk//SDKSettings.json 2>&1 > /dev/null && echo yes
yes
```"
"VS can discover the test, but can't run it, local dotnet test can't discover it. What's wrong?"
"I'm currently assuming that I didn't test the Java.Interop commits I thought I was testing.

Or, insanity.

In particular, consider: https://github.com/xamarin/java.interop/blob/bc5bcf4f0ef07aab898f2643d2a25f66512d98ed/src/Java.Interop/Java.Interop/JniRuntime.JniMarshalMemberBuilder.cs#L30-L36

This is the `JniRuntime.SetMarshalMemberBuilder()` method:

```csharp
		[System.Diagnostics.CodeAnalysis.SuppressMessage (""Design"", ""CA1031:Do not catch general exception types"", Justification = ""the *.Export assemblies are optional, so we don't care when they cannot be loaded (they are presumably missing)"")]
#if NET
		[DynamicDependency (DynamicallyAccessedMemberTypes.PublicParameterlessConstructor, ""Java.Interop.MarshalMemberBuilder"", ""Java.Interop.Export"")]
		[UnconditionalSuppressMessage (""Trimming"", ""IL2026"", Justification = ""DynamicDependency should preserve the constructor."")]
		[UnconditionalSuppressMessage (""Trimming"", ""IL2035"", Justification = ""Java.Interop.Export.dll is not always present."")]
#endif
		partial void SetMarshalMemberBuilder (CreationOptions options)
```

Note in particular that it has custom attributes wrapped in `NET`.

Also note that my fix for `JavaTypeParametersAttribute` was to likewise wrap it in `#if NET`: https://github.com/xamarin/java.interop/pull/929/files#diff-fd9c9afe3c2714f79442afdb021394950e51b6791f835fc8f448e2b3e147e852R3

Thus, the only way `JavaTypeParametersAttribute` should exist is if `NET` is defined.  Yet if I disassemble the `Java.Interop.dll` that was packaged by the installer, *none* of the attributes are emitted.

(Which is differently odd, as `[SuppressMessage]` isn't present *either*!  It's apparently never emitted to IL.)

On the assumption that I Did Something Wrong, I've re-pushed the commit, using the current latest Java.Interop commit.  Hopefully things will be saner?"
"While working on this bugfix, I realized that another bug exists:
```json
{
    ""name"": ""${profile.name}"",
    ""command"": { ""action"": ""newTab"", ""profile"": ""${profile.name}"" },
    ""iterateOn"": ""profiles""
},
{
    ""name"": ""${profile.name}"",
    ""commands"": [ { ""command"": ""newTab"" } ]
}
```

Here, the settings model exports these commands to the command palette as one entry in the name map (the iterable command). This is wrong though, because really the user is explicitly asking for a command named ""${profile.name}"".

**However**, this bug already exists in v1.8, but in a different manifestation.

Here's the encountered behaviors:
- this PR: iterable command wins
- `v1.8` & `main`: whichever command is added second wins (in the case above, nested command)
- expected: no conflict

This bugfix brings us closer to a world where this new bug is fixed. We would need to mess with how we expand commands. But (a) that's too risky for a hotfix and (b) this is a _really_ obscure bug.

@github Thoughts?"
"This message will point to the wrong place if building from Windows, it should be generic or point to the Apple SDK setting depending on the IDE. For VS on Windows it's Tools > Options > Xamarin > iOS Settings > Apple SDK"
"> Both `BeginInvoke` and `EndInvoke` has extra parameter(s) at the end (`AsyncCallBack` and `object` for `BeginInvoke`, and `IAsyncResult` for `EndInvoke`). If overload resolution succeeds, then these parameters must have been supplied, meaning all the previous parameters has explicitly been passed.

I see now why this is wrong."
"Had no original documents, so can't answer your question, but to correctly handle such things the month and year parts should be avoided, but they still can be received and it will be a valid input. The problem is that it's not compatible with .NET date and time representations.

For example, PostgreSQL has `interval` which stores a duration in three parts: months, days, microseconds. And to handle arithmetic operations properly it deconstructs a `timestamp` into parts, adds an interval to it and then assembles a new `timestamp` again. `timestamp` is a 64 bit integer measuring microseconds.

Unfortunately, `TimeSpan` stores ticks and can't be correctly constructed from any input. For that reason it lacks of `Years` and `Months` properties.

Therefore, while I agree with @github that it's a wrong logic and serialization should not include years and months, deserialization of `TimeSpan` will cause issues if these parts are present. Surely, I can just throw a `NotSupportedException` for such cases and it will solve the problem."
"yes, naming is hard :)

What I'd like is to avoid an (or limit the) explosion of semi-related attributes, even more if its being consumed by a single tool (mtouch/mmp). Maybe something similar to `[MethodImpl]` ?

The generator _could_ (if needed?) add the fact it's generated:

```
 [BindingImpl (BindingImplOptions.GeneratedCode)]
```

and we could reuse this for future improvements... (yes I do have some crazy ideas in need of attributes).
"
"This is wrong, we don't want `crlf` line endings in .cs files. This is either `lf` or nothing at all."
I could have read the lock wrong. But I don't like locks in constructors and are a bad practice. I move to Increment and if we see it happening again we know where is the issue.
Indentation is wrong for these attributes.
@github @github @github Reverting these changes here! Going to hop on a little call later with Manuel to make sure I understand what I did wrong up there and hopefully don't do in future PRs. Thanks for the review!
"Wrong parameter:

```suggestion
PALEXPORT char** SystemNative_GetEnviron();
```"
"I'm reading the variable outside and also inside of the lock (to prevent unnecessary locking). I assumed that `pthread_mutex_lock` synchronizes memory, but maybe that's not actually guaranteed then. I'll modify the code to only read it inside and to set the value at the end👍  

_edit: I reviewed the code after the weekend and now it seems obvious what was wrong and why it could return bogus failures._"
"@github Nope. I don't want to introduce arbitrary style fixups, just ones that we believe are nearly always wrong. And `Array<T>` is a style choice that is favoured by lots (a majority?) of the JS community."
"> The best time to do that is when we have byref working, so there would be an alternative.

Not sure I agree with this. Whatever anyone is doing with the current support is likely wrong and providing support for a scenario that is fundamentally broken. This is likely a historical oversight that I'd like to understand earlier rather than later. I'd remove this soon so we can message that."
"You should check that `resolvedSymbol` is `CheckFlags.Late`, since we first assign it to `decl.symbol` to avoid recursion: https://github.com/Microsoft/TypeScript/pull/29015/files#diff-c3ed224e4daa84352f7f1abcd23e8ccaR6577. Otherwise, you might accidentally assign the wrong symbol in the `lateSymbols` table."
"I don't think so. At this point the problem isn't necessarily a problem with the lookup, but rather that we found the wrong kind of thing.
"
"Right, there are two nodes here, the return and the operand of the return. The return is still wide but the bug was that we were retyping the operand to a wider type, which is wrong."
"I searched for this pattern in our codebase and found 80 occurences. Since there is nothing wrong with it technically, I will leave it as is for consistency.
"
The emit here has the wrong runtime semantics.
"Maybe :)

My understanding from before was that the crash was happening much further down hte line.  This pushes the watson much closer to the point that we can identify that something went wrong.  If this is not suffickient, we can hopefully keep pushing things back.
"
"Personally, i'd prefer we just do the work to get this correct now.

Race conditions and complex interaction models are really bad for the health of our code.  They lead to instability and terrifically difficult to track down problems.  We should push for simple abstractions for this sort of thing that both isolate the complexity and make it very difficult for downstream clients to get things wrong.  This helps avoid whole classes of bugs, and it makes it possible to focus correctness on a single part of the system.

Since we're already working to eliminate the raceyness here, i'd much rather we just do it now instead of potentially missing something and having to deal with this same issue a month/year down the line.
"
"Either I'm doing something wrong or we have very different machines :)

I get:
```
Found 165536 diagnostics in 159581ms (84841950448 bytes allocated)
```
That's with master + #43095 + #43100 + #43101 on .NET Core 3.1.

Anyway, with .NET 5 currently I get:
```
Found 165536 diagnostics in 152133ms (79806704312 bytes allocated)
```
so at least moving in the right direction."
Could you please elaborate what exactly is wrong with copying the structure? Is copy or original value going to misbehave in some way?
"I think the real issue here is that optional properties cannot be checked in the face of unknown extensions. We allow assignment to a target with an optional property when the source doesn't have that property, but we only know that to be true when the source is not subject to further extension (i.e. when source type expresses ""the whole truth""). For that reason, we do have this same problem with type parameters. For example, X = A & T, where X is a type with an optional property p, A is a type that has no property p, and T is a type parameter. If T is instantiated to a type that has a property p with the wrong type, an inconsistency appears. In fact, the same inconsistency exists just with X = T. It all has to do with the way we check optional properties and I'm not sure we can do much about it.
"
"> When you only give the first error, it makes it sound like you have the wrong closing tag somewhere else

I'm not sure I agree, but I don't think this is such a big deal.
"
"CI shows _System.Net.Sockets.Tests Work Item failed_, so probably something is wrong with this PR. I'll investigate."
"@github Was this change perhaps overlooked, or am I holding it wrong? https://github.com/dotnet/runtime/pull/39372/files#diff-283eaf9255778de038e266b90f9bea05R32"
@github You should include your handling of box_vt so I can see what is wrong. You are probably not updating the vtstack accordingly after removing instructions that push/pop it.
"I’ll describe what happens _before_ this change. This code errors because “No overload matches this call” on the `.filter(...)`:

```ts
interface Success {
    isSuccess: true;
}

interface Fail {
    isSuccess: false;
}

function bar<Q>(a: (Success | Fail)[]) {
    a
        .map(item => ({...item}))
        .filter(value => {
            return value.isSuccess;
        });
}
```

The error elaboration for the overload that ought to match is

```
Overload 2 of 2, '(predicate: (value: { isSuccess: true; } | { isSuccess: false; }, index: number, array: ({ isSuccess: true; } | { isSuccess: false; })[]) => unknown, thisArg?: any): ({ isSuccess: true; } | { isSuccess: false; })[]', gave the following error.
    Argument of type '(value: { isSuccess: true; }) => true' is not assignable to parameter of type '(value: { isSuccess: true; } | { isSuccess: false; }, index: number, array: ({ isSuccess: true; } | { isSuccess: false; })[]) => unknown'.
      Types of parameters 'value' and 'value' are incompatible.
        Type '{ isSuccess: true; } | { isSuccess: false; }' is not assignable to type '{ isSuccess: true; }'.
          Type '{ isSuccess: false; }' is not assignable to type '{ isSuccess: true; }'.
            Types of property 'isSuccess' are incompatible.
              Type 'false' is not assignable to type 'true'.
```

and quick info on `value` shows `{ isSuccess: true }` instead of the union, providing a clue as to what’s going wrong.

The first important thing that happens is the spread in the `.map(...)` call creates new type identities that are structurally identical to `Success` and `Fail` and `Success | Fail` (which is why printback no longer uses those names afterward), and both the new `{ isSuccess: true }` and the new `{ isSuccess: false }` types share their declaration site at `{ ...item }`.

Where the problem arises is during signature resolution for `.filter(...)`. We try on the first overload, which is

```ts
interface Array<T> {
  // ...
  filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];
  // ...
}
```

and try to infer `S`. Since our predicate is not a type predicate, inference initially produces `unknown`, which we will need to replace with the constraint of `T`, which is `{ isSuccess: true } | { isSuccess: false }`. We first instantiate this constraint with the inference context’s non-fixing mapper, which ought to act as the identity function since this type does not reference `S`, but it goes off the rails.

We instantiate each union constituent through `getObjectTypeInstantiation` (we’ve finally made it to the code this PR changes). Recall that _each_ constituent’s symbol’s declaration is `{ ...item }`. We have an outer type parameter `Q`, which should have no effect on the instantiation in the end, but we don’t determine that without trying it. But first, we cache our union constituent `{ isSuccess: true }` as the result of the instantiation for `Q` on the node links for `{ ...item }` (this is the line I removed). When we move on to the second union constituent, `{ isSuccess: false }`, we have a problem: since the declaration is the same, we already have `links.outerTypeParameters` cached, so we move on to the real work of the function (`if (typeParameters.length) { ... }`). We get the `typeArguments` for this instantiation by running the outer type parameters (`Q`) through the inference context’s mapper. Because `Q` was not the inference target, it returns `Q`, so our type arguments are just `Q`. We look up the instantiation for `Q` on the links, and get the result from the previous union constituent, `{ isSuccess: true }`—clearly wrong.

So in short, the union `{ isSuccess: true } | { isSuccess: false }` collapses to the first constituent during an instantiation that should have been a no-op because the first one gets cached as the instantiation of an unused outer type parameter on their shared declaration."
"I'll close this as the more I think about, the more this just feels like a wrong reactionary fix. "
"Tagging subscribers to this area: @github/ncl, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This is not what I expected. But I could reproduce the `Safe handle has been closed` error with few hundred runs. 
With this change I did ~ 5000 runs without single failure. There may be more to it but this definitely seems to help.

I have some ideas why we do not see this more:

https://github.com/dotnet/runtime/blob/f3390fdb46ece449e15515a925a81aa535059f19/src/libraries/System.Net.Security/src/System/Net/Security/SslSessionsCache.cs#L196-L209

With this we would try to string the cache only on multiples of 32. With certificate, protocols and EncryptionPolicy that generally would be never on clients as there is typically no client certificate, few protocol variations and nobody sane should not use anything but `Encrypt` policy. 

So it tales some effort to even hit the reduction code - perhaps by crafting many unique certificates. 
For future investigations, lowering `CheckExpiredModulo` makes it much easier to test that code. 

While we lock on cache changes, we don't seems to when we retrieving cached value. 
And all the entries stored in the cache are disposed. 
And we seems to allocate a lot while attempting to shrink:
https://github.com/dotnet/runtime/blob/f3390fdb46ece449e15515a925a81aa535059f19/src/libraries/System.Net.Security/src/System/Net/Security/SslSessionsCache.cs#L224-L225

So while the caching may be improved, I did not find anything particularly wrong. 
My current speculation is that the observed issue is caused by polluting cache with bad values. 
With the added extra check my local runs are now happy. 

fixes #30724

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Security`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#21384,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>
Fixes mono/mono#21369

job_major_mod_union_preclean can race with the tarjan bridge
implementation that changes the vtable pointer by settings the three
lower bits. this results in invalid loading of the vtable
(shifted by 7 bytes)  which in turn give a wrong desc to the scan
functions

This change is released under the MIT license.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-mono`, `mono-mirror`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Pretty much it's a feature that is checked up stack (Kestrel) to make sure the connection is ""secure"". Right now, we can't get this information from MsQuic (correct me if I'm wrong), so we have a fake one for now."
"There are a few candidate proposals in https://github.com/dotnet/runtime/issues/27229. (But Steve, I don't see your idea reflected there? Maybe I'm looking at the wrong piece?) The issue is currently marked as needs work and has no assignee. Somebody would need to champion it and drive it through API review."
"Sorry, I half focused on the wrong thing. What I should have asked is why use the attribute on TValue when you could use `TValue?` as you do for the return type? "
"Isn't this ostream the fake file that is then redirected? I could be wrong, it has been a long time since I looked at this"
"The pattern of `?.Property!;` seems wrong, if we're going to use `!` we should commit all the way and not have the `?`"
"I guess that's the wrong question.

Should host config override webhost config? If you run the DefaultBuilder.SampleApp you can see it has ASPNETCORE_ENVIRONMENT set to Development but gets set to Production at https://github.com/dotnet/aspnetcore/pull/31825/files#diff-f0e6f715f99a336de90bdbeef327cb71b7ee811d00d7c1722049557adaa009c5R168"
"Dumb question: how is this different than ""undo last local action""?"
"So something has already gone wrong, and as a side effect of that we're trying to take a screenshot. I don't really want to fail the test while taking the screenshot as that is a distraction from the real problem."
"Whoops, I deleted the wrong file. Closing this and creating a new PR."
Did I do something wrong before? It's including the previous 5.0->master merge commit here o.O
"@github I can see that three legs have failed in the CI. I've tried to re-run them, but they've failed again. Could you please take look at the failures to see if they can be related to my change somehow? I have inspected the logs, but I am not familiar with aspnetcore enough to be able to tell what's wrong."
I went through and flagged a few odd cases in our tests that looked like they might have gotten the wrong one which I think are cases we're trying to fix? If it's from this algorithm then we'll need to fix it up here.
"> Can we hold off on merging this for a little bit?

Sure. What's wrong?"
"> [RouteTableFactory.cs(57,34)]

You raise a good point about the `[Parameter]` properties, plus I guess any other framework-invoked methods on the component types. I think that so far, this hasn't been an issue because the framework itself doesn't contain routable components, and application code isn't normally trimmed at all. It would only be an issue for RCLs that somebody marks as trimmable (rare).

If there is some way for the `[Route]` attribute (`Microsoft.AspNetCore.Components.RouteAttribute`, not the one in MVC of course) to cause the trimmer to preserve that type, including all public API, then that would be ideal but I'm not sure the trimmer has a mechanism for this.

> [DynamicComponent.cs(70,17)]

I suspect you're right that the existing annotation is ineffective. It was put there in reaction to trimmer warnings (IIRC).

Regarding the AddAttribute overload proposal, I'm not certain how/if it would work. The point of `DynamicComponent` is to use it with type values that vary at runtime, not just with fixed values. That is, people don't commonly write:

```razor
<DynamicComponent Type=""typeof(SomeComponent)"" />
```

... they commonly write:

```razor
<DynamicComponent Type=""@github"" />

@github {
    Type chosenComponentType;
}
```

So isn't this still an unknowable type as far as the trimmer is concerned? It's not performing some more sophisticated static analysis to work out the possible range of values for `chosenComponentType` based on assignments elsewhere, is it?

If I'm understanding, it seems like:

 * In general we'll continue to expect people not to use it with framework components
 * Most uses with application components are fine because application assemblies aren't trimmed
 * In the edge case of a trim-enabled RCL, people will have to write some other annotation either in their RCL or their application code to say they want to preserve the types they know they'll be using dynamically

If I'm wrong about this, please let me know as that would be great news :)

> [LayoutView.cs(59,24):]

The trimmer's concern (based on the warning) seems not to be about line 59, but about line 60, because the `layoutType` variable gets populated by `GetParentLayoutType` which doesn't declare anything about its return value being preserved. It seems like we *could* annotate `GetParentLayoutType`, but TBH I don't really follow why this would be the right place to annotate this.

I would have thought we should be annotating `LayoutAttribute` so that it knows that its constructor parameter (`Type layoutType`) indicates that we need to preserve the whole of `layoutType` as a component. If that was done, then it seems like `LayoutView` doesn't really need to trigger any preservation of anything, since we already know that all components used as layouts are already preserved. We'd just need to suppress any warnings that emerge from `LayoutView`. This seems like it should work since `[Layout]` is always set statically with a fixed literal type value for the constructor.

Please let me know if I'm misinterpreting all of this!

> [RouteView.cs(80,17):] It seems like there could be a legitimate issue here that could be fixed by annotating the LayoutAttribute constructor parameter with [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)].

Right, yes! It seems like you're stating the same thing I was suggesting above. So maybe the constructor parameter annotation could solve both of these last two cases. As long as the routable page component itself is preserved, then `[Layout]` should cause its layout component to be preserved, and in turn any chain of ancestor layouts."
"feels weird for the service to have both these methods.  Feels like we'd just want one method, and perhaps have these two as extension methods that both call into that one core method.  (note: i may be wrong about this)."
"> We can... but doesn't the old behavior look wrong to you?

I think the binder there is for IOperation factory, which is supposed to deal with nodes produced by initial binding. 

---
In reply to: [216492768](https://github.com/dotnet/roslyn/pull/29591#discussion_r216492768) [](ancestors = 216492768)"
oops. wrong method sorry.
"Consider that if we did that C# would begin treating this type differently when used within the compilation unit and when used from an external one. That seems wrong. Also it means the public API of the type will differ observably when it's in source vs. re-hydrated from metadata.


"
"Just to speak to why I'm hesitant to make changes here, I want to make the insertion as simple as possible. Since we're copying everything over from liveshare, there's a lot to test and a lot to go wrong.  In this PR I'd rather avoid changing the implementation as much as possible so we can do 1 step at a time.  I can add an item to the project to come back to this once liveshare is using us, and test the changes here in isolation (which is what my plan has been so far).

Does that sound reasonable @github ?"
"I see a Shutdown method on IGCHandleManager, not on IGCHeap...am I reading this wrong? there is a Shutdown method on the internal GCHeap which is not called. we could get rid of the code in this method's implementation or if we think some day we might be required to actually clean up the resource we could keep the code but not execute it; and only execute the shutdown logging part."
We could instead change `GetNamedCurveBlob` to handle skipping over X and Y since it builds a zeroed blob anyway... but implementing this in `GetNamedCurveBlob` directly seemed like putting the support for this at the wrong place.
"nit: This is the wrong copyright now, but I don't know if there's some overarching plan to do passes to fix "
"Not an ArgumentException, since the argument is wrong? (it's not anything to do with ""the object's current state"")"
">StateMachineStates [](start = 20, length = 18)

It feels wrong to use an enum for these values, as the values that state machine states take are not restricted to these three values. Typical state machines have states with the value 1, 2, 3, etc.  It is just that those values and the part of the state machine they refer to are computed on the fly."
"I may not be understanding this, but what happens if there are 2 items in the source? Why do we check specifically for `1` item? What if there is no items? Does this mean the size might be wrong? If the size is going to be incorrect, can we postpone the measuring until we have an item?"
"The dispose is already done later in the Platform class [here](https://github.com/xamarin/Xamarin.Forms/blob/fb498947d43b77e693750b23b76b0eb0dda97b33/Xamarin.Forms.Platform.Android/Platform.cs#L477) or [here](https://github.com/xamarin/Xamarin.Forms/blob/fb498947d43b77e693750b23b76b0eb0dda97b33/Xamarin.Forms.Platform.Android/AppCompat/Platform.cs#L318).
This code was added later by PR #1200 and #1212 but the fix was wrong.
If you not dispose the page in the case where it is the same page the issue that this PR tried to solve doesn't exist anymore."
"It's going to be a string with a numerical value, but, the whole function is kind of dumb and written backwards isn't worth fixing as a candidate."
I sense something wrong with the identation
"After doubling all new tests because of `IgnoreNullValues=true|false` these are the local run results for target `net5.0`
||base|with continuation|
|:-:|:-:|:-:|
|**Debug**|`Total: 8706, Errors: 0, Failed: 0, Skipped: 0, Time: 70,223s`|`Total: 9826, Errors: 0, Failed: 0, Skipped: 0, Time: 72,229s`|
|**Release**|`Total: 8706, Errors: 0, Failed: 0, Skipped: 0, Time: 28,578s`|`Total: 9826, Errors: 0, Failed: 0, Skipped: 0, Time: 31,961s`|

I would say 2-3 seconds is good enough. How would you decrease the tested positions without knowing what could go wrong in advance?
BTW I cannot run the tests for target `net461` from 6.0 branch locally because I get tons of errors. I ""hope"" it's just a glitch with my machine
```
System.IO.FileLoadException : Die Datei oder Assembly ""System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"" oder eine Abhängigkeit davon wurde nicht gefunden. Fehler bei der Überprüfung des starken Namens. (Ausnahme von HRESULT: 0x8013141A)
```
"
"> Looking into it a bit more... `_GetModifier` subtracts `1` as the first thing it does

Yeah, sorry, I was looking at the wrong modifier. For some reason I thought we were talking about the mouse modifiers. But the mouse code already does the `value_or(0)` thing when processing the button parameter, so I think we're all good."
Nit: a wrong header?
"Hmm, curly brace in the wrong spot. :/
"
"@github I'm not sure how to fix them so it would be great if you could provide more details.

> make sure that you have enabled the global horizontal scrolling setting for the workbench which enables it in all lists

Yes I have that enabled in both user and workspace settings (ID `workbench.list.horizontalScrolling`).

> make sure that you have the right CSS to size rows to the width of their contents, not the width of the container

Not sure how to do this or if I did something wrong?

> Sorry, I don't understand what you're asking

The entire page is a list, including the breakpoint column. So when scrolling horizontally, it would be scrolled out of the view port. We need a way to fix it from scrolling horizontally. I have tried some methods that works for native table/list like position:sticky, but none of them work.

Also, you didn't answer my second question so I try to add some details here. I would like the indentation the same as what we have currently. But with this PR, the disassembly lines that have source code are not indented correctly:
![image](https://user-images.githubusercontent.com/44103947/139509345-ecfc5a57-380d-424a-acc3-150ec61d31ae.png)

"
"> Once you do that, consider removing shell injection altogether. Instead, you can add a button that modifies ~/.zshrc. This would be in line with how zsh ecosystem works.

Our approach is somewhat atypical as most terminals are opt-in with an install step. If I remember right kitty auto installs it and some of the feedback they got was that it's intrusive, which I agree with, so we were trying to be as unintrusive as possible. As soon as you have a manual step the amount of users that would engage with the feature would drop significantly. This is an important part of why we too this approach, we want it to _just work_ for the majority of users and fail unobtrusively for more advanced cases. Imagine connecting VS Code to a container or a new machine, opening a terminal and shell integration/autocomplete just works with zero config, that's the vision.

In the off chance that shell integration fails to inject before the shell starts, or the shell disables it, or something else goes wrong, we want to fail early and continue, then the user has the option to disable injection all together and go with the manual setup route we'll provide https://github.com/microsoft/vscode-docs/issues/5219

---

This discussion is all super valuable so thank you so much for that! It was probably obvious that I'm not that familiar with zsh, I'm mostly a bash and pwsh user these days. The more we chat, the more I think that it's probably not ready for you to try to integrate since things are still in flux. The best approach to make sure you don't waste time is to just force disable shell integration with our new environment variable and then revisit in a few months?"
"This *feels* wrong -- we'll need to wait for the PR build to finish to see if it's *actually* wrong -- because the `@(_MonoUtility)` (above) will copy this file into `bin/$(CONFIGURATION)`, *not* `bin/Build$(CONFIGURATION)`.

Furthermore, adding the files to `@(_MonoUtility)` *feels* wrong because it's placing non-installable artifacts into the ""installable artifacts"" folder.

I think we instead want a `@(_MonoBuildUtility)` item group in `mono-runtimes.targets` which copies the mono archive artifacts into `bin/Builld$(Configuration)`, which would leave *this* line unchanged."
"this feels wrong.  if this is an Update call, then mi would expect to maintain the original class/struct mod, not blow it away. #Resolved"
"It is. It's a tradeoff of course. Since this type is exposed public there's a risk that it could cause a deadlock but I think the space saving is worth it and locking the pipe causing a deadlock seems unlikely... Though we know customers do crazy things.

@github how do you feel about this? "
"IMHO the main problem is that the generator defaults to `[CCallback]`, and you need it to be `[BlockCallback]`. Getting it wrong means the generated code is wrong, and any users will crash."
From discussion with Carlos: the only thing I'd really want to block over is the flag pointing the wrong direction when it's at a terminus. It's highly visible -- moreso than a usability issue -- and we'll be hitting the streets with it pretty soon. I suspect somebody will trip over the visual glitch in approximately the first eight seconds. :smile:
"> The better (and simpler) question to ask is whether the cacheVariableType as calculated above refers to any method type parameters (I mean from any method) after the substitution. 

Consider the following code. In this case the lambda refers to another method type parameter but there is nothing wrong to cache the delegate because the type parameter has larger scope than the cache.
```
void GenericMethod<T>(T value)
{
    for (int i = 0; i < 1; i++)
    {
        DoStuff<T>(() => value);
    }
}

void DoStuff<T>(Func<T> lambda)
{
    Console.WriteLine(lambda());
}
```

I'm totally ok to implement the fix in any way you think is the best. But I'm worried with this kind of fix, because the fix you offer eliminates the cache in that scenario hence may slow down some code that already works fine."
"Agreed the `Get` seems wrong here, we're getting a bool."
"Should this be renamed somehow? I guess I might have been wrong in our private conversation: it looks like if we're forking, but we didn't have a step, we just use this as a marker for ""it's still in progress""?"
Since we own all the involved bits it should be fine to let an exception be exceptional here. We put the wrong information in the pdb
😕 This seems like the wrong value
why this change?  it feels wrong.  you might have a typesymbol that is not a named type symbol.  undo this plz.
wrong indentation
"Presumably both the `DotNetCli` and the `__RotBinDir` variables were wrong as they pointed to a the parent directory of the repo root. Do we know why this wasn't caught in CI? Don't we use this script in CI and if not, why does it exist?"
"> LGTM but could we not use the existing `DOTNET` variable and ensure 5.0 is the minimum ?
> Seems less likely to have confusing/partial updates between the two of them

Just for the record: turns out I was wrong, we do need to use a stable .NET version (3.1.100) in a few places, so I changed this PR to make xharness auto-detect which version to use."
Isn't this the wrong way around?
"Based on the current implementation, this method name seems wrong (""directness"" isn't required)
"
"It turns out that while the ScriptingBridge framework seems to be available in Mac Catalyst, none of the types in the framework are... so this PR is wrong."
"Dumb question: why doesn't this just do all this for you?
"
"I don't think `checkParameterInitalizer` gets called via `checkExpressionCached`, so unless it does some equivalent work, I need to move the call after the if-then-else, rather than in the else branch. My most recent commit got this wrong - will fix now."
Can we do this on the project level instead in the program? it just feels wrong to have program return a sourceFile that is not part of it.
"`getChildren()` is the wrong method to use since it returns the tokens, such as an opening parenthesis."
"margin is the thing that's fixed, whereas indent goes up for each line. So this name was wrong before."
"span based analyzer means caller ask span to analyze not analyzer itself determine span to analyze. so if an analyzer has ability to return diagnostics based on given span, it can claim it is span based (or my wording might be wrong that confused you)
"
"I'm not sure what you mean by ""unintended positive"". `void` was wrong and `any` is right as far as I can tell.

I think, in most positions, inferring `any` vs `unknown` is a matter of preference -- how strict do you want the result to be? Right now I assume that people want pretty loose results, since I expect people will use this after converting from .js to .ts, and before trying to get rid of any explicit `any`.

We could discuss adding another fix to the codefix, one that defaults to `unknown` when possible. I think it would be a decent idea, but hard to explain in the space of a codefix title."
I thought you said earlier that jsdoc wasn't always available during transforms. Did I get that wrong?
Probably never but it is nullable and compiler is going crazy without this check
"not related to your change, but type name seems wrong. it is SyntaxFactsService not SemanticFactsService. #WontFix
"
"That's a good idea, but without the commit with create-unions-of-accessors-as-accessors, it adds a weird wrinkle when synthetic properties *are* all accessors: specifically, if you modify accessorsOverrideProperty9 so that all bases use accessors (as in your other comment), then the error shows up again: the base symbol is synthetic, but all 3 bases are accessors, so the exemption no longer applies.

Instead, execution falls through to the flags check, but the flags are wrong, so the error message is wrong.

It's probably more correct to change the way synthetic accessors are created, but it's a much further-reaching change, and most of this code is still needed. I'd rather have a more pressing reason than this to change the code that creates synthetic accessors."
"@github
Thanks a lot for the review. 
The review comments are pretty reasonable, and I strongly agree with them. It is why I left a comment about nearly all of problems https://github.com/microsoft/TypeScript/pull/38839#issuecomment-973769448
Maybe I could fix `//@github` and remove the commented optimize code.
But I am not sure about throw error. I think we need to discuss the behavior.
``` ts
enum FooKind {
    one,
    two,
    three,
}

interface Foo {
    kind: FooKind
}

function FooFunc(tmp: Foo) {
    switch (tmp.kind) {
        case FooKind.one:
            break;
        case FooKind.two:
            break;
        case FooKind.three:
            break;
        default:
            tmp; // what should here be? should it be `Foo` or `never`?
    }
}   
```
In the new PR, I narrow `tmp` to never, otherwise, what could it be?

Now, let's say we have code `assertNever(tmp.foo)`
I have no idea about what I should do, if I do not change, the build will failed because bootstrap is one step of check(in bootstrap, it will say `tmp` is never, so `tmp.kind` is wrong), if I change it to `assertNever(tmp)`, the build also failed, because tmp is not never now. Do I get something wrong? It would be glad to know there are some methods to fix it correctly!"
"Related to the topic (the info for future readers): here is https://github.com/microsoft/TypeScript/pull/40101 which allows to use the above technique even without having baseUrl defined (if so, `paths` array values are related to the current config's directory). Which is cool.

Motivation: we switched to within-module-all-relative paths (../../..), and we wanted to have no baseUrl defined anywhere at all. Because it's safer: without baseUrl, VSCode won't even propose non-relative imports in auto-import IntelliSense feature, it would always propose ../.. paths, and there would be no risk of leaking ""wrong"" paths to generated dist/*.js files. (In the past we used typescript-transform-paths, but now we moved off it to reduce complexity.)

Here is the final workable layout. It also illustrates the case when folders in packages/* have different names than package names in package.json files (""my-"" prefix) - not something to be proud of though, but in case it's needed, it works too.

![image](https://user-images.githubusercontent.com/46383452/124326477-4c06ce80-db3b-11eb-8b9d-8ab10605d283.png)
"
"Nice catch!

Does the test take a long time to run, should it be Pri1 or longRunningGC test?

I have tried to run it locally and it failed with a Jit assert:
```
 ""runtime\artifacts\tests\coreclr\windows.x64.Checked\Tests\Core_Root\corerun.exe"" Runtime_44895.dll
               [000118] -----+------              *  LCL_VAR   ref    V15 tmp11

Assert failure(PID 51232 [0x0000c820], Thread: 4292 [0x10c4]): Assertion failed '!""Incompatible types for gtNewTempAssign""' in 'Property`1[Text][Text]:GetValue(System.Nullable`1[Text]):Text:this' during 'Morph - Global' (IL size 150)

    File: runtime\src\coreclr\src\jit\gentree.cpp Line: 15492
```
for this tree:
```
fgMorphTree BB06, STMT00027 (before)
               [000089] --C---------              *  RETURN    struct
               [000118] ------------              \--*  LCL_VAR   ref    V15 tmp11
```

looks like we catch this problem with our asserts but it makes it hard to understand what exactly goes wrong in release and why it leads to bad execution.


I think your test uncovers a bigger issue with `FIELD struct (1 field with the same size)`  transformation like this:
```
LocalAddressVisitor visiting statement:
STMT00017 (IL   ???...  ???)
               [000059] --C---------              *  RETURN    struct
               [000149] ----G-------              \--*  FIELD     struct value
               [000147] ------------                 \--*  ADDR      byref 
               [000148] -------N----                    \--*  LCL_VAR   struct<System.Nullable`1[Text], 16>(P) V01 arg1         
                                                        \--*    bool   V01.hasValue (offs=0x00) -> V12 tmp8         
                                                        \--*    ref    V01.value (offs=0x08) -> V13 tmp9         
Replacing the field in promoted struct with local var V13
LocalAddressVisitor incrementing ref count from 2 to 3 for implict by-ref V01
LocalAddressVisitor modified statement:
STMT00017 (IL   ???...  ???)
               [000059] --C---------              *  RETURN    struct
               [000149] ------------              \--*  LCL_VAR   ref    V13 tmp9 
```
that can be hit not only for `ref` and not only for trees under return.

I have added another condition to your test so now it fails with the same assert but for `TYP_LONG` so your new condition does not guard against that, but maybe it can't lead to bad execution in release.

[Runtime_44895.modified.txt](https://github.com/dotnet/runtime/files/5651339/Runtime_44895.modified.txt)

I think there are 2 main questions:
1. Is it correct to have `GT_OP struct -> LCL_VAR ref` for GC tracking? We are lucky here because there is a limited number of trees which can have struct type and can use `FIELD` as a child (I can think of `RETURN`, `ASG`, `STORE_*`), so we can check all.
2. Should we allow such cases in `gtNewTempAssign`?
3. How big are the diffs if we forbid the optimization in `fgMorphStructField` for 5.0? As I said we don't many `GT_OP struct -> FIELD` cases, so maybe we won't see many regressions?
"
"@github thanks for pointing that out. I checked again and it seems like the best way to move forward is to just emit these events using the WriteEventCore APIs for Mono instead of the QCalls since Mono doesn't have the same native event stubs that CoreCLR does, and there's doesn't seem to be a concept of native runtime events from Mono. (Please correct me on this if I'm wrong @github @github) 

"
Yeah I started with that and then realized for general builds this is the wrong thing.  It should definitely be opt in for out of tree builds otherwise we're setting things up poorly.
"Looked into this a little further. I think this is not the fix that will fix the `helix` issue.

Earlier in our automation we enable a venv:
```
+ python3 -m venv /home/helixbot/work/A3AF0971/w/A711092F/u/.venv
+ source /home/helixbot/work/A3AF0971/w/A711092F/u/.venv/Scripts/activate
```
The line you're changing is built including this variable `HelixPreCommandStemLinux`, so it should be there:
https://github.com/dotnet/runtime/blob/21280fd616f671087573f830472271e0ff28d409/eng/pipelines/coreclr/templates/run-performance-job.yml#L59

By the time the failure noted in dotnet/performance#1928 happens we have exited the venv. This actually seems to me to be an issue with helix or something else having gone wrong on our machines. 

(The places added to `PYTHONPATH` here are solely to support our scenario runs, which is why the fact that it was out of sync here never mattered.) 

We need to figure out what is wrong with the machine environment. First Responders may be the right first step.
"
"@github @github your responses on urgency for RC1 seem to be a bit conflicting to me ...
I wonder how common is this problem. I believe for not-so-common stress issue (which this one seems to be - please correct me if I am wrong), it should be fine RC2, given HTTP/3 is in Preview for 6.0.
Thoughts? Did I miss anything?"
"> I did more testing on macOS and verified that it gets both: not enough entries and too many.
> 
> Because of the wrong estimation on count, we return fewer items than we should. It can get worse as we check provided buffer size agains lover number but then we iterate through all returned items, possibly writing to random memory.
> 
> Now, we also return too many items. The sysctl returns all UDP sockets even not binded and/or connected. I added simple check to weed that down. It is imprecise as there is really not ""listening"" state on UDP. But I tested the outcome and compared to `netstat` on both platforms and it looks reasonable. Returning something like:


Interesting and troubling at the same time. Apple apparently doesn't publish source like they used to (or if they do, I can't find it.) This behavior has me wondering if they didn't adopt `kptr_t count = (kptr_t)` as well, or a similar function."
I just checked and everything is the same on the most important benchmarks. They are monitored by a regression bot so if something wrong is happening we should know in the next 48h.
"Hi, if I'm not wrong,
Replace
```cs
{ ""Authority Information Access"", Oids.AuthorityInformationAccess },
```
with
```cs
{ ""X509v3 Authority Information Access"", Oids.AuthorityInformationAccess },
```
in
OidLookup.NoFallback.cs

reference:
https://www.etsi.org/deliver/etsi_ts/103500_103599/10354414/01.03.01_60/ts_10354414v010301p.pdf
Annex C (informative): Application Certificate Example (Page 36)"
"This is wrong I believe. You should reference `Controls.Sample.styles.css`, the `.bundle.scp.css` files only contains the bundle for the scoped css files, it doesn't have import references to other libraries. This works right now because you don't have transitive RCLs in the app."
"I always just typed a curly brace and saw what popped up. And I think the intellisense rule just checks for a derives from MarkupExtension.

I worry about the idea that we have custom code somewhere that understands some list of things that are markup extension-y.

I never knew that this could be done and neither does the tools. So where is the logic that knows how to convert from an image source to a markup extension? Are there other special cases?

Or am I dumb and been using it all the time when you use a full type name and it has a parameterless ctor? "
"I thought `is` only works on instances, such as `someInstance is float`, not when comparing two `Type` instances. Did I get that wrong?"
"It maps controllers too, but I just copied the startup template from another test. I don't want to revisit this, since it is code that we already reviewed (just brought the commit from the wrong branch).

If you feel strongly about it, I can file an issue and do more cleanup post RC2."
"In the wrong file?
"
"This condition means the outer build will get a reference to Microsoft.Win32.Registry. Previous version was wrong too of course.
```suggestion
  <ItemGroup Condition="" '$(TargetFramework)' == 'netstandard2.0' OR
      '$(TargetFramework)' == '$(DefaultNetFxTargetFramework)' OR
```"
"This looks like this could be wrong.  After all, an type parameter coudl have a base interface that it was being boxed to.  However, that case is handled in:

```c#
if ((source.TypeKind == TypeKind.TypeParameter) &&
                  HasImplicitBoxingTypeParameterConversion((TypeParameterSymbol)source, destination, ref useSiteDiagnostics))
```

Note: I could add an assert here that this shouldn't return true if source was a type parameter because of that (at least if my logic is correct)."
"> @github and @github please correct me if I'm wrong but I don't think we wanted dotnet/extensions or dotnet/aspnetcore-tooling to build 'release/3.0' and shouldn't flow any other changes (unless we suddenly need a 3.0.x release)&hellip

Nah, we can disable flow for these.  Let me check on that."
"I'll clarify the comment. When you complete a local symbol, we make a description (with many parts: main description, exceptions, captures, etc), but only the main description seems to be displayed.
The reason I put captures here anyways, is in case I'm wrong and missed some scenario. Captures listing ""?"" is less ambiguous/misleading than displaying no captures at all.

Thanks! #Pending"
"> It seems like you're doing the merge wrong?

@github did @github's update address your concern❔"
"> Dim anonymousFunctions = FindAnonymousFunctionsFromParentInvocationOperation(variable.Expression) [](start = 15, length = 98)

I think the code should be defensive. We expect to get two lambdas back, we should verify that and do appropriate recovery if something went wrong. #Resolved"
"> But i still want to just have this code be simple and not dependent on ordering of the caller

Even if you consider this to be a helper that shouldn't depend on the rest of the code, it is still wrong. If you have no getter and no setter, this will return true, which is obviously wrong for something called 'CanConvert'. This isn't really a general purspose helper and can't be thought of as one. It depends on the checks done elsewhere in this class/the base class either way."
I am not sure why you dont want to parse? there is nothing wrong parsing snippet of code rather than building them using SyntaxFactory.
"The problem is it currently gives *no* hints. Should this diagnostic also mention that the method `GetPinnableReference` could be called if it were found, but that it must be non-static, what its signature should be, and that it could be either an instance or extension method? I think this PR is the wrong place to start educating users about the new feature."
"I think the comment is wrong. I'll remove. Thanks

---
In reply to: [194198102](https://github.com/dotnet/roslyn/pull/27317#discussion_r194198102) [](ancestors = 194198102)"
"A bunch of tests fail. Particularly interesting are these three:

https://github.com/dotnet/roslyn/blob/6b29eb5d88e2b42e449e812d9f273d27f9bd53f2/src/EditorFeatures/CSharpTest/IntroduceUsingStatement/IntroduceUsingStatementTests.cs#L52-L120

Simpler solutions pick the wrong statement to refactor in for the last two tests or don't work at all for the first test."
Can you elaborate more here about why no delete can occur? What goes wrong if the file is deleted right now?
"> order of parameter seems in wrong order?

Fixed in 0dab2852ef86f7589971247267a24ef155148624

> so local function, when given to delegate, it won't allocate like instance method? as long as there is no capture?

Covered by https://github.com/dotnet/roslyn/pull/33291#discussion_r255681619"
"AFAICT, the codegen-time gc info is used at labels and calls, and hence, since this is a transitory byref, it wouldn't show up as being wrong in this case. That said, I believe it should be maintained correctly."
"I'd rather assert if we're going to go that route. If this is passed refonly or installed on legacy Mono, something is very wrong."
"In situations like this, where the test method differs from the local function by the casing of a single letter, it'd be really easy to accidentally get a stack overflow or an infinite loop by calling the wrong thing.  Could you rename such local functions to something a little more different?"
"If I understood your comment correctly (from https://github.com/dotnet/runtime/pull/34777#discussion_r412679793), then it is possible for `propertyInfo` to be null and then this can null ref (please correct me if I am mistaken). We shouldn't be using the null-forgiving `!` in this case to work around the compiler warning, but rather handle the case when `propertyInfo` is null correctly. This is what I was referring to earlier.

> Not sure adding a `Debug.Assert` right before the last throw adds much value, as there'll be a null ref anyway (which will be encountered in debug mode) if `propertyInfo` is null.

If it is not possible for `propertyInfo` to be null in this case (because you have reasoned about the code and the various states, which the compiler is unable to do in this case), then adding a `Debug.Assert` is useful in catching the null ref bug at development time when the code evolves over time so that the person making the change can see that something went wrong, especially if they accidentally break this invariant (and then can update this method/add tests accordingly). The `Debug.Assert` conveys intent more clearly, imo, particularly when the code changes and test coverage may not be 100%. Otherwise, using the `!` will just hide the null ref until the customer hits it."
"Why?  this seems wrong.  we have ConstructorSymbolReferenceFinder, why is this not there?"
"I think that in general the pattern which is introduced here is a good one - for things which are ""global"" - so things which are needed by the runtime itself and linker won't be able to tell if they're in-use or not. I think COM is a good example, but I might be wrong.

For things which are only needed if some other managed class/method is used we should try to move the dependencies there - to improve trimability. We do care about size even for apps which have enabled debugger support for example.

I don't have a problem with both:
* Adding feature support to `DynamicDependencyAttribute`
* Allowing `DynamicDependencyAttribute` on types (the meaning would be that if we decide to keep the type in any way or form, those dependencies would kick in)

To make progress I think that we should take the changes as Eric wrote them here, it's an improvement as it makes the debugger stuff conditional on a feature switch. And once we have the necessary bits in the linker, we can improve on it by moving more of the local dependencies closer to where they belong."
"This doesn't affect binding.  It only affects what diagnostics are produced. An override method with the wrong return type has always been an override of the base method. That is not changing. What is changing is when an error is produced.

---
In reply to: [414106079](https://github.com/dotnet/roslyn/pull/43576#discussion_r414106079) [](ancestors = 414106079,414052536,414049357,414047588,414000465)"
"Would throwing an exception be a way for the client to know they need to refresh?  Either way, I think I would prefer throwing - that would at least indicate that something is wrong rather than just having the client continue to chug along with an incorrect context.  I feel like if we just continue we may run into hard to diagnose issues with random project contexts being used."
"This code below seems to live in the wrong place somehow. It seems static `Registry` related and thus should maybe move into a place that is like our editor registry?

https://github.com/microsoft/vscode/blob/c03bc427cf71dae7766cd6e451c492b12e87e544/src/vs/workbench/browser/editor.ts#L181-L181

Isn't this about registering and looking up custom editors?"
"That is an interesting case. What is the rationale for allowing this vs. marking this as an error in metadata import?

I don't necessarily think this is wrong but curious about the reasoning here. "
What's wrong with this test?
"Something is wrong here.

https://github.com/dotnet/runtime/blob/89292fe3dc2160807de90186d4b1b2d4526e0079/src/libraries/System.Data.Common/src/System/Data/IDbCommand.cs#L22-L23"
"~~I just tried checking out and building this PR, and it does not fix #60977 or #70306 for me. Even with ""search on type"" disabled, when I click into another editor it will still jump to the first instance of whatever is in the find box. And typing into the box causes the editor to scroll to the first instance of whatever I'm typing.~~ Changed the wrong setting."
"Relying on the state of the application to be correct during imperative checks of IsPresented is going to be buggy

Tying *IsPresented* to the appearing event is also wrong because Appearing doesn't imply IsPresented it implies that it will be Presented 

We already have a lot of cases where the ""active page"" in multi page scenarios affect global features like the navbar or tabbars

Overall i'm not saying a property like *IsPresented* wouldn't be useful but if we're going to add a property like that it would need to be a separate PR that will probably involve a lot more discussion. 

Also, even if we added *IsPresented* my recommendation would be to add a check here 
https://github.com/xamarin/Xamarin.Forms/pull/8298/files#diff-5c15636b9e632ed12684a0c5ca1f29e8R96

that would basically be

```
else if (e.PropertyName == Page.IsPresented.PropertyName)
				UpdateStatusBarStyle();
```

Even with an *IsPresented* property we'd want the *UpdateStatusBarStyle* sets to happen from the event of IsPresented toggling"
"I am not sure if it is better to throw. If proven we can get bogus values inside the array then we may expect get wrong size too. 

I would prefer to check and just exit. Diagnostics would be difficult especially in term getting a reliable repro for the issue.

---
In reply to: [491177407](https://github.com/dotnet/runtime/pull/42474#discussion_r491177407) [](ancestors = 491177407)"
"Just a heads up that I tried to switch the parent container from Grid to StackLayout in order to work around this bug, but I'm still getting labels with text being cut off. Maybe it's calculating the cell size wrong? "
"@github dumb question:
```suggestion
                                                    { ""name"": ""Scheme 1 (renamed)"" }
```
this doesn't work because the syntax expects `)""` to be the end of the string. But I've tried doing `)/""` and `)\""` and both seem to be interpreted incorrectly. Any ideas how to get around this?"
Well that sucks.
"I understand your situation, but unfortunately I don't have any news right now.

You're welcome to dive into the code and pinpoint where it goes wrong and fix it :)

Does the fix in this PR help you? Or do you need it for the other scenario as well?"
Why do we need these declarations? What's wrong with the prior `typedef void MonoObject`?
"Should we mention what `.zip` file we're extracting from?

Otherwise we're going to get things like:

    Could not extract ""bin/classes.jar"" to ""C:\really\long\path\bin\classes.jar""

""Better,"" because of our new use of short filenames, the ""long path"" in the above message will be something like `lp\1\jl\bin\classes.jar`, which is inscrutable for knowing what went wrong and/or fixing it."
Is this change wrong?
"for the record, I have it set to true in ControlInteractivity. So one of these is _definitely_ wrong"
"> Here's what I'm thinking. Option 1 is ""compatible"", and we can see how much use it gets in the wild. I suspect that we can move to option 3 and treat partials as fulls if we have to. Let's celebrate incremental improvement, shall we? 

I think you might have the options the wrong way around? Option 3 is the partial implementation, and option 1 is essentially the full thing. I could understand starting with 3 and later moving to 1, but going in the other direction doesn't really make sense.

> (Does that mollify your main concerns, or at least enough to accept it for the time being, @github?)

My dislike of this feature has only grown more intense over time, so I don't think it's worth trying to mollify me. Also, with Mintty having implemented it now too, it sort of feels like a lost battle. If you guys all like it, I'm not going to argue against it."
"Is our `.editorconfig` wrong? That's what caused this:

https://github.com/xamarin/xamarin-android/blob/e4debf72015549e6e19cbfb247a47fead6ce7a01/.editorconfig#L7-L15

We could change `.csproj` to `utf8-bom`, but I don't know what it's supposed to be actually."
"@github @github I'm trying to use this feature with the latest preview release.  I wanted to put all the color schemes in a separate json so as to not clutter the settings.json file.  Not sure if that's valid/feasible or makes sense - let me know if it's not and I'll abandon.  Reading the [documentation](https://docs.microsoft.com/en-us/windows/terminal/json-fragment-extensions), it's not clear to me where (path/folder) I would put this json extension file at?  I believe I downloaded preview from github releases page if not from the Store - I'm not recalling with certainty now.  Tried creating a file `%LOCALAPPDATA%\Microsoft\Windows Terminal\Fragments\test.json` but that didn't take effect as the schemes I put in there are not showing up.  I'm probably doing something wrong I'm not sure.  Thanks."
"The comment is true for `Activity.Tags` property which expose only string-string key-value. `Activity.Tagsbjects` is string-object key-value. `Activity.Tags` is just legacy property which we kept because we cannot remove this API. `Activity.Tagsbjects` is the property that users should use all the time (which conform to the Open Telemetry specification).

> However, the question remains if we should have the same behavior for logging as it is implemented here (i.e., only log tag values which are strings) or call ToString().

Should call ToString() on the values. Logging string values only is wrong. Imagin, I add a tag like ('ErrorCode', 401) which has integer value. not logging this entry would be missing essential information in the logs."
"Apparently the xammac_tests.csproj was the wrong project type (and as a result was using system mono).  Fixed that, have it targeting XM mobile and it's working fine now."
"I see, because you want to be able to store the one object into a ""ReturnValue"" field that will both be returned and used to access the List it stores?

In that case, I'd be inclined to still use the compiler generated implementation for the IAsyncEnumerator.  Less code to maintain, less code to get wrong, and it seems unlikely to be an issue perf-wise, given the use case."
Spacing is wrong on 3 lines below
"> Fix it in post? Couldn't get it repro'd this morning 😕 Were you launching unpackaged, elevated, hitting the dialog, then accepting it? Or just elevated (no prompt)? Or unelevated?

Unelevated, but weirdly I was hitting an issue where OpenConsole.exe wouldn't run. Try running unpackaged, deleting OpenConsole, and then opening wt unelevated. It was a solid 100% repro for my terminal window being the wrong size."
start with either `!unknown-` or `!wrong-` so it gets sorted along other important/critical logs
"@github @github let me explain. System.Security in iOS is a subset, that is, we do not support all classes. Those classes that we do not support are not present in the dll and therefore the tests are ignored with a !MOBILE (from a mono PR I did a while back). The item group you see there is adding files that are required for the tests that are ignore in iOS, that is, System.Security.Cryptography.Pkcs and System.Security.Cryptography.Xml are not present in the mobile version and therefore the tests do not need those tests files. Modern does have the tests because the classes are present, so unless I understand modern wrong, this is correct and expected."
"I might be wrong here. If I have 
```
using BarNS;
namespace Foo
{
    using BarNs;
}
```
Would the second usings be dropped? If you have verified this then just ignore this comment : )"
"If we're getting rid of the else, can't we just remove the entire #if XAMCORE_2_0 at the same time, instead of adding an additional one at the end of the file for the closing bracket?  If you aren't in XAMCORE_2_0 somethings already wrong, so..."
"This won't be printed if there are only skipped tests, in which case it'll just show ""All ### tests passed"" (the next if just below), which is wrong. I think you need to change the condition above to:

```csharp
} else if (failedTests.Any () || skippedTests.Any ()) {
``` "
I see. Looks like the initial code was wrong then. Fixing
"Again, the text of this assert message is wrong.  I'll investigate and fix."
"Yup, you're right.  I was reading it wrong."
"> This sounds like a regression.

This behavior has been there ever since compiler support was introduced for editorconfig. This PR just moves the existing code into a different place: https://github.com/dotnet/roslyn/blob/0734ecda9631c12798ef28ca3db87a2de43f6f65/src/Workspaces/Core/Portable/Diagnostics/DiagnosticAnalyzerInfoCache.cs#L132-L138


> Analyzers must be enabled at warning or error severity at the project level (.globalconfig, .ruleset, or default severity for the analyzer) to be a candidate for execution

That would be a breaking change now and I don't agree with this either. Editorconfig should have the ability to enable disabled rules, especially when most repos have editorconfig file at their repo root turning on rules. Asking users to fallback to globalconfig or ruleset to enable disabled by default analyzers seems wrong."
"Wouldn't be surprised if it's unnecessary, but I definitely saw a failure at one point where the access modifier was added to the local function, which obviously was wrong. I can't remember exactly what the rest of the code looked like at that point though :)"
"For whatever reason (and I'm probably doing it wrong), the compiler didn't like it. "
@github @github @github I don't see new packages for the latest changes/fixes in the CI build. Did something go wrong? I would need to have them in order to test VS
"This is the resource that merges in the .vsct file. Personal superstition insists the resource name must be VSPackage, but I could be wrong. Maybe @github knows?
"
"I believe it has to be both, but I could be wrong.
"
"This makes sure that when a Project P2Ps System.Runtime and wants to compile against its reference assembly, the reference assembly of `System.Runtime` and not `System.Runtime.Experimental` is passed down. Currently the later is passed down which is wrong."
"Oh nevermind, I was reading the condition wrong and missed the negation of the `!TryMatchAtCurrentPosition(inputSpan)` so thought that the contents inside the block where the successful match case, which is why I asked why were we setting runtextpos if a successful match would have already done so, but I know see that the contents inside this block are meant for the failure to match case."
"The&nbsp;`enumerate(…)`&nbsp;method was&nbsp;removed in&nbsp;**ES2016** from&nbsp;both&nbsp;`Reflect` and&nbsp;`ProxyHandler`s, due&nbsp;to&nbsp;implementers deciding&nbsp;against&nbsp;it.

The&nbsp;type is&nbsp;wrong&nbsp;anyway, since&nbsp;it’s&nbsp;specified to&nbsp;return&nbsp;`Iterator<any>`."
"If I get this right, the cancellation of `cancellationToken` passed into `HttpClient.SendAsync` will trigger cancellation of `_requestBodyCancellationSource` regardless of being duplex or not.

Whereas in H/2 I see that we ignore the user token for duplex contents:
https://github.com/dotnet/runtime/blob/35f66ed7cb42a3fbcc2c56604c31f8a64dbe119b/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs#L1911-L1914

If the goal of this PR to have parity with H/2, I think we should take duplex into account here as well. But I might be missing something, so please correct me if I'm wrong."
"Another case of the type writer not being our friend here. I think the goal of this test was to prove how we normalize intersections, but the result `X2 : X2` is not a valid proof (nor would its literal definition of `A & (C | D) | B & (C | D)`). Its unfortunate that we got this wrong before as well (see line 16 above)."
"Yeah, that was actually wrong, not sure how it worked 😅"
"This looks wrong. Shouldn't it be `defaultIsPretty(sys) && !sys.getEnvironmentVariable(""NO_COLOR"")`? If `NO_COLOR` exists, then we shouldn't print color... as is, if `NO_COLOR` is set, then tsc will write with colors even if it is not printing to a terminal.

(There's also the consideration that we should be checking for existence, not non-emptyness, but that's less important)"
"This is the wrong place to handle this. It should be handled as a ""conversion from expression"", like `null`. #Resolved
"
"Yes, This is crazy world of JavaScript. Also restricting this is a potential breaking change. I'd say that these issues should be traced by some sort of linter tool
"
"BMI1 is disabled in crossgen, so this should actually be switching from the software fallback to BSF on all xArch.  I've verified that BSF is encoded correctly in the majority of cases, but I suspect that in some cases the operand register is wrong.

My theory for why the changes to recognize the `IsSupported` check in crossgen fixed the previous failures on x86 is just that the code was simplified enough that the register flipped back to the correct one.  I haven't been able to find an exact case where it was broken, but I saw an example where the codegen went from using a combination of eax,edx,edi to just eax.  Harder to get it wrong if there's only one being used..."
"Let's actually leave a comment because I'm still reading this wrong every time I look at it. Can you make the first parameter `globalType` and document that you're expecting it to take one type parameter?
"
">         public void SideEffects(bool useBoolReturns, bool validityParameter)

Sorry, I linked the wrong test. I meant `StructParameter_ByRef`. Regardless, the scenario is tested.

---
In reply to: [872470655](https://github.com/dotnet/roslyn/pull/54276#issuecomment-872470655) [](http://example.com/codeflow?ancestors=872470655,872462032)

---
Refers to: src/Compilers/CSharp/Test/Semantic/Semantics/InterpolationTests.cs:8875 in d57ccfe. [](commit_id = d57ccfe9bb491cb31f0a04ed773b36e4fa2af34f, deletion_comment = False)"
"My be the title of this PR is wrong !? 

""Including **Exception.Data** in Json formatter using ToString()""

using ToString() is solving ""InnerException"" issues.... 
""Exception.Data"" is not covered by ""ToString()"" until now on master...

so please be careful on writing commit history ;-)



"
"> In the original example it was wrong gc information

Are you sure? It looks like with TC disabled the original test will fail consistently after the first call to `GetValue`.  I would not expect a GC info failure to be quite this deterministic.

```
;; default

  Failed TestMethod1 [212 ms]
  Error Message:
   Assert.AreEqual failed. Expected:<test>. Actual:<>. interation: 310148
  Stack Trace:
     at UnitTest1.TestMethod1() in C:\bugs\r44895\Class1.cs:line 97

;; with TC=0

  Failed TestMethod1 [28 ms]
  Error Message:
   Assert.AreEqual failed. Expected:<test>. Actual:<>. interation: 0
  Stack Trace:
     at UnitTest1.TestMethod1() in C:\bugs\r44895\Class1.cs:line 97
```
"
"Unless I'm mistaken, all of the examples above should have `name` be of type `any`, and that's what the PR has (so maybe your comment is wrong), so that's still good and consistent with other restructuring.

It looks like things are still not quite right in the editor, though. If you use your test case but don't reference the variable in question, it still doesn't show an error. Compare the three cases here, each with the destructured variable left referenced.

```ts
const { xyz }: unknown = {};

function foo({ name }: unknown) {
    // ...
}

try {
    // ...
}
catch ({ name }: unknown) {
    // ...
}
```

![image](https://user-images.githubusercontent.com/5341706/152032203-155de0b1-b883-4a67-8584-08ae6cf73210.png)


I'm not sure what you've changed to get further is correct, though; it still feels to me like there's something missing during the checker walk, and these errors are only functioning due to the side effect of evaluating the variable later."
"> WIthout debugging the newly-failing test case, I don't know how the old code resolves C to the original class. What tests fail if you change /*dontResolveAlias*/ !isJSDoc to /*dontResolveAlias*/ false? It's possible that it doesn't actually ever need to be true.

I tested this locally and it is the solution. It does change the baselines for jsdocLink3, but I'm pretty sure those were wrong, because I manually tested the test code in jsdocLink3 and it behaves right with `false`, wrong with `!isJSDoc`. When I wrote the code, I didn't understand how it was supposed to follow (or not) aliases."
"> > I think that code must rely on isDefinition too—at least the emacs code did when I first wrote it in 2016.
> 
> I could be wrong, but I don’t think this is true for VS Code.

It does.  It has a fallback where it makes a second FAR request, filtered to definitions, if the first returns exactly two results.  If exactly one is a definition, it jumps between them.  The current (and, I believe, preserved) behavior is that an import counts as a declaration of a separate, alias symbol, so an exported symbol that is exported in exactly one place will cause GTD to hop between the two (since neither is a definition from the other's perspective)."
"> I have undone the changes that were causing following child symlinks by default, this in order to behave similar to windows.

So then this PR is just making a change to follow the symlink if it is the root directory watched, is that correct?  Is that the same as Windows?

I didn't want to imply any sort of right/wrong judgement with my previous comment around following symlinks of child directories.  I actually think that could be seen as an interesting feature that is easier for us to do on Linux due to the way the watching APIs work (we already need to traverse and add and their is a flag for following).  The feature could also be added to the Windows implementation if we shared some of the code that traverses, just rather than add directories it finds (not necessary since ReadDirectoryChanges can be recursive), it could add symlinks it finds.  Interestingly enough if we did that, it would actually be similar to what would be needed to make a complete symlink following solution for Linux as well, since it could cover the symlink-ed file case.  

> It seems there is people in both sides of ""having follow semantics as the default"" or ""make follow links opt-in"" so I think it would not be great to allow that here.

Agreed. I think it'd be possible to have a complete symlink following file-watcher, thought it should probably be opt-in.  IMHO  such a feature would be a nice complement to the other symlink API that's being worked on and would probably be more impactful than this change.  You might consider doing it instead of this change if this change was causing our behaviors to diverge on platforms.  If not then this seems fine."
"Cleaning up the 'Module' goo is good, but i feel like INTERNAL is probably the wrong name especially if we end up touching it from tests, etc."
"The fix is actually wrong. We were already storing the fp / lr on the stack a bit above the place I've added. The only thing was that instead of LR, we were putting there PC. Which was actually correct for everything except leaf functions (the issue #62058 has the exception in a leaf function, the VSD stub). Well, even for non-leaf functions, there would be a problem if the LR was used as a general purpose register between calls.
The real problem is that with the arm64 mechanism of making calls we cannot make unwinding of injected frame to get LR after the unwind to be different from the PC. The actual fix will need to do the same what we do for Linux - to make PAL_VirtualUnwind to recognize the PAL_DispatchExceptionWrapper and to extract the whole context at the failure location from the place where HijackFaultingThread has stored it."
"> how did you undo the changes, it's a lot of changes and a large code base

Revert wasn't ideal because:
- There were a lot of conflicts due to code merged since. 
- A fair amount of new use of `!!` has been added since.
- Rolling out `!!` fixed a decent number of (minor) bugs, e.g. wrong parameter name used, missing parameter name, missing tests, argument exceptions propagating asynchronously instead of synchronously out of iterators and async methods, etc. 
- We actually don't want what was there before but instead to use ThrowIfNull, as it's more concise and results in more efficient code, and `!!` is a good indicator of where it can/should be used (`!!` effectively generated ThrowIfNull calls). 

My process:
1. Started by using VS to find expression-bodied members using `!!` and applying a refactoring to make them normal bodies. Most of these were in one LINQ-related file. 
2. Searched for async in combination with `!!` to manually do the ""right thing"" in terms of exceptions propagating synchronously. This found some bugs where we weren't doing it correctly prior to `!! `. Did the same searching for IEnumerable to find iterators, also finding a few bugs `!!` had fixed.
3. Searched for use of `!!` on signatures with this/base delegation to manually handle cases where the check needed to be before delegation. 
4. Wrote a Roslyn-based console app to find all `!!` on parameters, remove them, and add in an appropriate ThrowIfNull call. That handled 95% of the changes. 
5. Searched for ones my tool missed (I knew it would miss some but it was cheaper to do the rest manually than to make the tool bullet-proof), e.g. use on indexers, and fixed those manually. 
6. Built, fixed errors (primarily projects that couldn't use ThrowIfNull), rinsed and repeated until clean. 
7. Manually code-reviewed ~1400 files. Most of the issues here were around trivia my tool didn't handle appropriately, e.g. pragmas at the beginning of a method that got messed up.
8. Mentally praised `!!` and all that it accomplished for us in its few months with us, and put up the PR. "
"I think there is NullFileProvider.Instance, but I might be wrong."
"This is a bit awkward - sorry I didn't anticipate this when we discussed the design.

In general the intent is for the core `Microsoft.AspNetCore.Components` package not to make assumptions about the UI rendering technology. As such it doesn't assume that the UI renderer is a browser that would even have an associated JS runtime. The concept of ""web browser"" is in higher layers (e.g., `Microsoft.AspNetCore.Components.Browser`). The reason for this is to keep open the possibility that we allow completely different UI rendering technologies, such as native apps. So, AFAIK (and please correct me if I'm wrong), there aren't any other places in `Microsoft.AspNetCore.Components` where the framework makes JS interop calls.

To avoid making a JS interop call directly from here, we might need to add a new interface method. We could either:

 * Put a new method, `EnableNavigationInterception`, onto `IUriHelper` (since there are different implementations of that in different environments). It might be a bit weird for this to be public, though.
 * Or make a new internal DI service for enabling navigation interception. It could be a new interface `INavigationInterception` where the existing non-abstract `IUriHelper` implementations (server and WebAssembly variants) also implement that, so there's not much extra code or config to implement. The new interface would just be to segregate it from `IUriHelper` so it doesn't pollute intellisense.

Sorry that's extra hassle. Do you think this is viable?"
"I'm going to leave this as it. This is experimental, and at the moment I think an exception to say that something is wrong is preferable to silently doing the wrong thing."
"Although you do a raise a good question about whether we have a write reordering bug there. I'd appreciate it in a separate PR either way, but I can't say at first glance this is wrong...
"
">// (12,22): warning CS0028: 'Program.Main()' has the wrong signature to be an entry point [](start = 16, length = 89)

Please add a prototype comment to make this diagnostics more specific. #Closed"
"i just realized this seems wrong.    ```a = (b, c).d"" would say that it's a tuple deconstruction withthis logic right?   i think you want to verify that parent.Parent is an ArgumentSyntax.

Or, at least explain what you're doing parent.parent.parent in terms of what yuo're trying to skip over."
"Tagging @github again for more context, HeeJae can correct me if I am wrong - I think the idea here is to have a definition for both the Lazy and non-lazy versions of each Operation node, with the latter being useful for creating a fully populated tree, which is not being used currently, but we plan to use in future."
Wrong direction still.
"> @github The use of the pooled writers comes at some long-term cost because there's now a lot of action-at-a-distance to reason about, and substantial risk of problems if we have any bugs that might leak instances in certain error cases.
> 
> I don't have a clear sense of what makes it necessarily the right way to organize it. Naively - and I know I'm probably wrong here - I would have guessed we'd just hold all the user-supplied objects in a dictionary, and then `<persist-component-state>` would serialize out the JSON directly to the response, without going through any other in-memory storage. Is it possible to give a brief description of why that's not sufficient?

We don't want to force things to be json serializable (they can serialize/deserialize things however they see fit, we just provide convenient json overloads) and we don't want to encourage people allocating byte arrays when they are serializing things out."
"For the CodeModelCache == null cases, I don't believe it's possible to ever hit that. I'm sure by writing that I'll now find myself proved wrong, but this would be less risky than say all those crazy returns for GetStartPoint/GetEndPoint."
"We talked about this a bit and think we've come up with a nicer approach that is similar to other source generators we ship.

We define two attributes: `CreateHubProxyAttribute` and `RegisterHubProxyAttribute` that users place on a method they define in their project. The source generator will find these methods (via the attributes) and generate the appropriate code, assuming the methods have the correct syntax, and we can put diagnostic messages if it's the wrong syntax.

This would put the method ownership into users hands so we can avoid the issues mentioned earlier.

The attributes should probably go into the [Client.Core](https://github.com/dotnet/aspnetcore/tree/main/src/SignalR/clients/csharp/Client.Core/src) package.

Example:
```csharp
public class UserClass
{
    public async Task Start()
    {
        var hubConnection = new HubConnectionBuilder().WithUrl(""/blah"").Build();
        var proxy = hubConnection.MyHubProxy<THub>();
        hubConnection.RegisterMyProxy<IClientHub>(new ClientHub());
    }

    [CreateHubProxy]
    static partial THub MyHubProxy<THub>(this HubConnection);

    [RegisterHubProxy]
    static partial IDisposable RegisterMyProxy<T>(this HubConnection connection, T provider);
}
```

@github Would you be able to try out [Source Gen v2 (incremental source gen)](https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md)? It has better performance when used in VS."
"I've learned the hard way to add a `Thread.Sleep(10)` in the critical part of the changed code when I start benchmarking. This helps me make sure the infrastructure is all set up correctly and I don't make mistakes like benchmarking the old version of the code when I meant to test the new version. If a `Thread.Sleep(10)` was added inside the `if (HasCookie && _headers._Cookie.Count > 1)` condition and the 3 NumCookies variation wasn't horrendously slow, you'd know something was wrong with the benchmark environment or setup."
">out hadNullabilityMismatch [](start = 59, length = 26)

Something seems wrong with this approach. If it is used during initial binding, it should never return hadNullabilityMismatch, or at least it is meaningless to the caller. But this method can't be used after initial binding, as it uses `expr.Type` for the type rather than the type that was computed by flow analysis for the nullable-aware type of the constituent expressions. So based on my reading of the method, something is wrong for either potential caller. #Resolved"
What is wrong with this error message? It sounds pretty clear to me. #Closed
i feel dumb... but i cannot figure out where in this code you are actually 'completing' anything.  Like... where do you make any textual edits?  I thought 'complete statement' was about inserting missing stuff.  but i don't see anything inserted.
"the state feels wrong. at this point, it knows extension is installed or not, but it doesn't know whether extension is enabled or NOT.

so the state (installed && enabled) should be 3 states, false, true, unknown. so using bool looks like not right. if you are going to change the field to present ""InstalledAndEnabled"", I think you should use bool? and use null as unknown state."
"I seem to remember that workspace would have a solution with default GUID when no solution is opened in VS, but looking at code here, it suggests otherwise. Is this recently changed or I was just plainly wrong about the state of workspace in this scenario?"
"Seems like it depends on what you want the API to mean. Do you want it to mean ""`this` is not writable"" or do you want it to mean ""`this` is a `ref readonly` parameter""?

In other words, `this` cannot even be read in the static method, so to say that the static method is ""effectively readonly"" is maybe wrong.

---
In reply to: [267528694](https://github.com/dotnet/roslyn/pull/34260#discussion_r267528694) [](ancestors = 267528694)"
"This feels wrong. If this line of code was reached, we _will_ throw a NullReferenceException. #Closed"
"If result completes in failure/cancellation, this could end up running concurrently with the _handshakeBuffer.Dispose; _nestedAuth = 0; in the ContinueWith callback.  That seems wrong, no?"
"Well, it would be quite a bit of complexity, as the generator is pretty dumb. Mind you, the followon work is expected to delete this (the only logic which adds this duplication of effort) in favor of some string handling which will make all of this unified again. I hope to put together that PR by end of week, assuming I can get this in tonight or tomorrow morning, so I don't see much value in investing in a bit of code that should only live for about 48-96 hours before beginning active replacement."
"> do you think this trade-off is worth it

No, if we're adding ToString() calls as a result of this, we're doing something wrong ;-)"
"Thanks for the comment. My worry with asserts is they are often used to state not how the system works today but how it _should_ work, so any change that breaks an assert is ""wrong"". This is most definitely a ""this is just how it works, but if you fix it we can then assert something better"" so great."
`yield return` is illegal in a lambda. This code was always wrong.
This is a bit crazy to do because for each editor that gets moved it will be opened in the target group causing an editor switch. It would be much smoother if the move would happen with the editors opening `inactive` on the target group and only the last one would actually be `active`. There is an option that can be set when opening an editor called `inactive` that I think we should wire into the moveEditor call so that we can optimize for this (for the `openEditor` call [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/editorPart.ts#L866)).
"Add an error string describing what went wrong? for example:
`new Error(""A document with this uri is already added: "" + uri)`"
"It _really_ didn't, but for whatever reason git thinks it did. I'm not sure what went wrong."
Well that function was copied from your code... Felix said he couldn't repro the issue either. So it's probably something wrong with my machine... Let's worry about this later if any of us see this again.
wait... this is wrong. It definitely should be 15. changing it back
This is wrong
"hi @github @github  @github  @github 
Do I deserve to get a comment from anyone in microsoft or who has merging rights?
Why the patch is not getting merged? atleast give me pointer on what is wrong."
"Thanks for the detailed response.  Super helpful, and I think I'm starting to get at least a rough grasp of the high-level picture here

> I agree with that. But I don't agree with the approach that has been picked. You should not be reading and evaluating context keys. Instead you should be more like an ""event source"" and we should own the tuple [event, when-clause, command] - just like we do it for keybindings. Something like this
> 
> 1. extension registers event source
> 2. vscode allows to bind events to commands using when-clauses
> 3. extension fires event -> vscode evaluates the binding (using the focused/active element) and invokes the command

So I think an approach like this would solve about a third of the issue, which I guess might make it a good place to start depending on how complex impl would be.  I will try to explain the other 2/3 that's missing from this solution, though.  There are basically two issues not addressed, but I think I can lump them into one with an example.  Here's a sample talon file (the details of kaldi active grammar will likely be different but I'd imagine similar concepts apply; but correct me if I'm wrong here @github):

```
tag: user.terminal
-
make directory: ""mkdir""
```

This code tells talon that when I am in a terminal context, it should listen for me to say ""make directory"", and in response it will simulate keyboard events as if I have typed `mkdir` on my keyboard.  I am not sure I understand how your proposed solution would handle this case.  Somehow talon needs to know that I am in a terminal context in order to activate this command.  A few high-level possibilities for how this might be done:

a) Support a few specific when-clause contexts as contextual substitution variables in the `""window.title""` setting, eg `terminalFocus` and `inQuickOpen`.  Talon has machinery for tracking window titles that is commonly used to solve problems like this.
b) Support a notification and lookup system that tracks what the when-clause context would be if the user were to type a character right now
c) Support just the lookup system from b), so that we can poll this information
d) Pick a few specific when-clause contexts, such as `terminalFocus` and `inQuickOpen`, and create specific apis to query and receive events for them
e) Same as d) but no events, so we'd have to poll for this info

I guess in theory I could solve half of the issue here using your proposed solution with the `workbench.action.terminal.sendSequence` command.  I'd bind an event that triggers this command, qualified by the `terminalFocus` when-clause context.  This only solves half the problem, though, because I'd need to have this command active in talon all the time, so it would still be polluting my command grammar, making misrecognitions more likely, although when it does misfire at least it would end up being a no-op.  But this trick still wouldn't help me with `inQuickOpen`.  

Fwiw, the contexts that I am most interested in are the following:
- `terminalFocus`
- `inQuickOpen`
- `editorFocus`

See also the related discussion [here](https://github.com/microsoft/vscode/issues/117980#issuecomment-806262754).  Also cc/ @github and @github to make sure I'm not missing something here

Thanks again for your help!"
"This PR is the one that appears to be introducing an inconsistency (if I'm wrong, just let me know that).  If that's true, then either a) this should follow the same pattern used elsewhere, or b) all other uses should be changed over as well."
"I am not an expert in ECMA so I am very glad that you are looking at the test, thank you.
My understanding is that ECMA allows implicit coercion of `native int` to `int` so I do not need a cast there.
However, I could read it wrong and can add a cast just for safety.

from ECMA, page 38:
I.8.7.3 General assignment compatibility:
![image](https://user-images.githubusercontent.com/22642771/98225001-068cf580-1f09-11eb-830f-051e25f6fcf0.png)

"
"Might be a dumb question - would it be enough to rely on this map of string->action so that you can just have an observable vector of strings, and proposed/current action could also just be the name, and if you need to update the state u can just lookup in the map?"
"> 
> 
> the `MONOPATH=""$assemblyDir""` in your example should probably be `MONO_PATH=""$assemblyDir""`.

Hmm maybe it's not needed then, if the variable name was wrong and the POC runs fine without it"
"Please, let's *not* align parameters to `(`.  (I know Emacs likes that.  Emacs is wrong. ;-)

Rationale: If (when?) this type is renamed, it means that either all of these will be *mis*-indented, or they'll need to be re-indented so that things look proper.

Instead, it should be indented two tabstops, and/or all parameters should be done on a newline, each one being two tabstops:

```csharp
internal AndroidRuntime (IntPtr jnienv,
		IntPtr vm,
		bool allocNewObjectSupported,
		IntPtr classLoader,
		IntPtr classLoader_loadClass,
		bool jniAddNativeMethodRegistrationAttributePresent)
{
}
```"
What was wrong with the existing solution?
"Indentation starting here is wrong, and appears to be using spaces instead of tabs."
"For 1, I'm less concerned with a terminal getting it and doing the wrong thing with it. I'm more concerned with a terminal getting it and doing the _right_ thing with it, and then breaking things somewhere we didn't expect. The concern James brought up in the spec review was that the client may be using a different keyboard layout than the server, for example, in the SSH case. SSH is the middle party for us in conhost<->conhost-pty communication, and we _could_ (I won't go so far as to say _are_!) be building a bug factory for them.

I don't necessarily need for it to be a flag, I'm just looking for peace of mind. :smile:"
I don't understand why StructDeclaration existed here. Both RecordStructDeclaration and StructDelaration seems wrong here. They cannot contain a destructor. Anything I'm missing @github?
"You know I was curious whether MSVC properly optimizes `std::string_view` and I tried:
```c++
#include <string_view>

extern int foo(std::string_view);

int test() {
    return foo(""aaaaaaaa"");
}
```

This is GCC (`-O2`):
```asm
.LC0:
        .string ""aaaaaaaa""
test():
        mov     edi, 8
        mov     esi, OFFSET FLAT:.LC0
        jmp     foo(std::basic_string_view<char, std::char_traits<char> >)
```

This is MSVC (`/O2 /Oi /std:c++17`):
```asm
`string' DB 'aaaaaaaa', 00H         ; `string'

$T1 = 32
$T2 = 32
int test(void) PROC                                 ; test, COMDAT
$LN9:
        sub     rsp, 56                             ; 00000038H
        mov     QWORD PTR $T2[rsp+8], 8
        lea     rax, OFFSET FLAT:`string'
        mov     QWORD PTR $T2[rsp], rax
        lea     rcx, QWORD PTR $T1[rsp]
        movaps  xmm0, XMMWORD PTR $T2[rsp]
        movdqa  XMMWORD PTR $T1[rsp], xmm0
        call    int foo(std::basic_string_view<char,std::char_traits<char> >) ; foo
        add     rsp, 56                             ; 00000038H
        ret     0
int test(void) ENDP                                 ; test
```

Why does MSVC allocate **56 bytes** on the stack for, to call a function that takes **two** parameters as a struct. And am I seeing this correctly? `movaps`? The instruction for moving floating point numbers? I'm doing something wrong here, right? _Right?_ ._."
"I added a size. Not sure if it's too big and it's not a prime or power of 2 so it feels wrong 😄 "
"You're right, I didn't think about this issue ;  however (and sorry if this a bit dumb) but how would equivalence keys help here ?

The way I would fix this is at line 75, within `FixAllAsync`, by only processing the diagnostic that have the same safety property as the current code action :

- add `private bool _isSafe` to the codefix provider class

- change `RegisterCodeFixesAsync`'s from `var isSafe = /* ... */` to `_isSafe = /* ... */`

- change `FixAllAsync`'s foreach loop to :
```csharp
foreach (var diagnostic in diagnostics.Where(d => _isSafe == d.Properties.TryGetValue(""safe"")) { /* ... */ }
```

I (very quickly) tested it and it seems to prevent codefixes to affect the wrong version. Would this approach work ?

If not, I'm not sure I understand what you mean by this ""equivalence key"" suggestion, could you elaborate ?"
"It skips copying if source and destination is same: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs#L212

Basically I'm trying to obtain hash of content of multiple files. 
I believe this is the simplest way how to calculate hash of multiple streams while they are open one after another (but not at the same time). I might be wrong - happy to approach any suggestions"
"Those tests are obviously not testing the scenario I described above, or else they aren't running.

From your description of this change:

> Display names were cached which is wrong. The display names should be treated as the localized resources and should be retrieved every time using the CurrentUICulture.

I'm asking for a test of this functionality."
"> I do not think this is the right fix. We should just skip the irrelevant type evaluation in a type test

It is quite possible I am missing something and the approach is indeed going to cause problems for some scenarios. However, the comment doesn't provide any details about what could go wrong. The ```OriginalInput``` assumes some relationship between the types, whereas here, I think, we don't want to require any relashionship between them. Otherwise, we will fail to match the inputs.  "
"That iMobileDevice-net NuGet package is currently a PackageReference of the Xamarin.iOS.Windows.Client NuGet package that we reference here: https://github.com/xamarin/xamarin-macios/blob/net6-hr/msbuild/Xamarin.iOS.Tasks.Windows/Xamarin.iOS.Tasks.Windows.csproj#L15

The point is that we need to bundle the files in the net6 pack for Windows, that's all we are doing. We are not referencing them directly in any project but just copying them to the net6 pack for Windows so when the pack is loaded at runtime on a user machine it can satisfy all the dependencies. We are doing the same for any other dependency, ensuring we copy them to the net6 resulting pack.

AFAIK no net6 pack or SDK is resolving Package References at runtime, please correct me If I'm wrong."
"What I mean is this:

If I specify the RemoteEndPoint as a DnsEndPoint to ""foo.com:1234"", but I then set the TargetHost on ClientAuthenticationOptions to ""bar.com"", it seems like we will actually try to **connect** to ""bar.com"" rather than connect to ""foo.com"", which seems wrong. Similarly for an IPEndPoint.

With SslStream we specify the TargetHost separately from the address that we actually connect to. It seems like perhaps that is not possible using msquic? If so, I think we are best off just ignoring TargetHost here.



"
"FYI @github you'll have to redo #8074, I don't know what went wrong since the PR was green, but possibly some other change in master interfered with your changes and made things fail.

You can see an example of the failures here: https://github.com/xamarin/xamarin-macios/pull/8080#issuecomment-597389654"
"To be clear, by truncate, I meant overflow, i.e. might off_t be 32-bit on some systems, in which case this might do the wrong thing?  Wasn't sure in your response how changing behavior for FileMode would impact that."
"Is this comment wrong? or am I misunderstanding the YAML? this is going to build/run on linux-x64, right? not Android?"
"> Do we really need to rewrite all of the vectorized code everywhere?

Need to? No.
* Although in the example link you provided there are improvement in .NET 6/7 that would let you simplify some of that logic. We added support for `Vector<nint>` and `Vector<nuint>` so you could merge the `if (IntPtr.Size == 8) {} else {}` paths.

There was an ask above by Stephen for guidance on when the right choice is `Vector<T>` vs `Vector64<T>` vs `Vector128<T>` vs `Vector256<T>`.

There is a lot of nuance here and the guidance I want to write is just that, guidance. Everyone's scenarios are different and hardware is constantly evolving. It's why the architecture optimization manuals are all several hundred pages long. It's a lot like the Framework Design Guidelines where there are some `DOs` some `DO NOTs` some `CONSIDERs` and some `you can always ignore everything here if you know better or your scenario calls for it`.

There is nothing ""wrong"" with using `Vector<T>`, `Vector128<T>`, or `Vector256<T>`. But each come with various annotations and considerations.

The biggest consideration of `Vector<T>` is that it is variable sized. If your inputs are commonly between 16 and 32 bytes (or between 32 and 64 bytes in cases like this PR where it does `Vector<T>.Count * 2`) then you will not get SIMD acceleration when using `Vector<T>` on hardware with AVX2 support.

The biggest consideration of `Vector128<T>` is that you *could* leave some perf on the table if your inputs are commonly ""big"". Big here however is relative and dependent on a few factors. It could be 32-bytes and it could be 128-bytes (it could even be some other number altogether).

The biggest consideration of `Vector256<T>` is that you will not be able to use that path on anything other than modern x86/x64 hardware.

-------------------------

If you are trying to get good performance everywhere and don't need to support .NET Standard. `Vector128<T>` is a good option. `Vector<T>` can also be a good option but comes with more considerations over `Vector128<T>`. Optionally including `Vector256<T>` can then be beneficial.

If you are trying to get the best performance everywhere, you are going to be writing complicated code and maintaining multiple paths; particularly if you need to consider both small and large inputs."
"```suggestion
	if (m_type_is_byref (ftype) || (mono_type_is_struct (ftype) && class_has_ref_fields (mono_class_from_mono_type_internal (ftype))))
```

@github I think we want to guard the call to `mono_class_from_mono_type_internal` for reference types - it could trigger premature assembly loading, and also the field's class might not be fully initialized yet at this point, I think.

Also if we ever allow heap allocated objects to contain ref fields, the code seems wrong as-is: a struct S1 containing an object C that contains a struct S2 that has a ref field doesn't itself (S1) have ref fields, I think."
"This comment confuses me. The hosting process and needing command line arguments are two orthogonal things. I'm not saying the change is wrong, there's just a long history of this file getting things added for poorly commented reasons and then us scratching our head years later wondering why. :smile:
"
"@github : Never mind, I was wrong. @github clarified to me that the formatter does not look inside unstructured comments such as // or /*. So, your current code _is _correct.
"
"I don't love the use of the StatusBar here (or above really, but especially not for failure messages). Can we tell what went wrong? Or do we have to resort to just showing the exception message? Can we escalate to a dialog or something other than the status bar?
"
The indentation here is wrong.
"The checking changed because the declaration emit made it evident it was wrong. We were using `symbol.exports` before; this was missing late bound members, so we swapped to using `getExportsOfSymbol` in this PR; however using that made it obvious that the resolved exports were being cached without any cjs merged exports in them! (So symbol.exports had members that were never reflected in the resolved exports!) That was because we were not reliably doing the cjs merge before caching the resolved exports; this new check guarantees that we try to do the cjs merge _before_ caching resolved exports, every time."
"The code's new to me too, but I'm pretty sure `changeSeq` is just a version number we bump when the file changes, so I think this is just a freshness check.  TBH, the comment looks wrong to me, but I assumed Daniel knew something I didn't, having debugged through the code."
This seems probably wrong depending on what `getRootDeclaration` does... I remember being puzzled by this same function in the past but I don't remember what the deal is.
"This seems wrong (and seems like a very strange thing to explain to people using the product).  ""We will preserve pinned comments.  But only at the very top of a file"".

It also seems like we'll be breaking people who use pinned comments today (a feature we added precisely for people that wanted to use --removeComments, but who wanted some comments to remain).
"
"I understand this is a complex issue and that a 4.2 release is impossible at this point but please prioritize this. 🙏 

Right now, I have to use code gen and interface declaration merging to get proper typings for objects that use symbols rather than strings as keys. This sort of works but I still have to dumb things down to `obj as any` to be able to lookup values in objects using symbols, despite that I know that there's a certain shape to the object that I want it to check against.

> edit: mistakenly wrote ""not impossible"" when I meant to say just ""impossible"". I meant to say that I'm not expecting this to land in 4.2 but I hope you can make it a top priority for 4.3."
"> Don't wanna undermine your efforts here @github, but is this kinda solution really something that TS team suggests everyone to do?

I think you got me wrong, I'm not suggesting anyone to use this... I'm doing it just for fun haha. I don't think TS team should expect people to do this! But I don't think it would be a big deal if library authors did it to give a nice IDE experience, I'm all for that."
Can you please open a new bug explaining the current problem and the history of how we got here? There's a lot of cross-referencing needed to understand what is wrong.
"I really think something is wrong here: https://github.com/microsoft/TypeScript/blob/bf0eef435321527583837f41d62b54e94cda71a4/src/services/formatting/smartIndenter.ts#L73

Deleting the addition fixes most of your test without having to use the indentation options in the codefix itself. (But it breaks other tests in ways I can’t understand without spending all day on it.) There is just no reason why the logic you added should need to be in a specific codefix. TextChanges or the formatter is doing something wrong. Many other codefixes and refactors might incidentally print an object literal, so I don’t think the codefix is the right place to make changes (other than deleting `indentation: 0`)."
"I'm looking at the impl of `GetSegmentCount` and maybe I'm missing something but I don't understand how this can work for regions -

```
    static int GetSegmentCount(T seg_start)
    {
        int count = 0;
        while (seg_start)
        {
            // If we find this many segments, something is seriously wrong.
            if (count++ > 4096)
                break;

            seg_start = seg_start->next;
        }

        return count;
    }
```

for regions you can no longer enumerate all SOH segments by starting from gen2's start seg - you'd need to go into gen0/1's segments separately. also for regions it's not inconceivable at all that the count could be more than 4096. "
you are right. Title was wrong and I check the name with the linked #55957
"The problem is the do-not-enregister case is also wrong, it changes it to a ret-typed `LCL_FLD` node. Which means we get:
```scala
N001 (  1,  1) [000000] -------N-----        t0 =    LCL_FLD   int    V00 arg0         [+0]
                                                  *    ushort V00._value (offs=0x00) -> V02 tmp1         
                                                   /--*  t0     int    
N002 (  2,  2) [000003] ----G--------             *  RETURN    int    $100
```

We hit this path because we only do dependent promotion for parameters on arm32 and we don't replace dependently-promoted locals with their fields.

If I understand correctly we should retype the LCL_FLD node to the native return type, not to the type of the ret node, to ensure we load the proper size."
"Something may be going wrong with the `TryEnsureSufficientExecutionStack` strategy for avoiding stack overflows. In the second deep nesting of loops stress test (`(((...([aA])+...)+)+)+` 2000 deep) my laptop is encountering stack overflows in the new `AddTransitions` function. I did verify that it is switching to new stacks as necessary, but I haven't been able to stop the debugger on when the stack overflows (it crashes instead). I see the stack overflow when I run the test without debugging. I'll run the outer loop tests here and see if we see it here too."
"> > I had spent some time and implemented HW intrinstics for Min/Max and as asmdiffs shows more regressions I assume I did it wrong. I also couldn't figured it how to force the containment, I've always gotten something like this:
> 
> Could you share what C# code you're using to get this. At first glance this looks like it might be a loop and so the relevant data may be getting hoisted.
> 
> A simple: `Max(x, y[i])` for `float x` and `float[] y` should be enough to trigger containment here.

Yes, you are right. I was using this loop to force it to be optimized:
```
 for(int i = 0; i <= 300000;i++)
  {
      result +=  Math.Min(x, y);
  }
```
There are not JitDisasm output when I use these flags: COMPlus_TieredCompilation=0 COMPlus_JITMinOpts=1, so I used the loop :)
Is there any way to fix this behaviour?

C# code as is `return Math.Min(x, y[0])` produces this:
![image](https://user-images.githubusercontent.com/18483133/168842422-5583e2d8-50fa-454d-82f8-0df616e5a90a.png)
"
"That type is generated by the Razor Source Generator. If for some reason either that type isn't being generated, or is generated at the wrong time or place, then the C# code in BlazorPage.cs won't see it. We've had that happen in WPF where XAML files couldn't see Razor-generated types: https://github.com/dotnet/wpf/issues/4421

But I haven't seen that from regular C# code..."
"No good ideas come to mind. Do we have some tests that verify nuget packages?

A crazy idea would be to build an app and ensure System.CodeDom isn't referenced by default."
"It can be only internal which since the enclosing type is itself internal it won't actually restrict accessibility. But I'd agree that it is somehow confusing in this case. I'll change it to not give the wrong impression.

Pattern doesn't have anything in common for VB and C# and we need concrete instance of each therefore it is passed as a type parameter. I had an idea that involves contravariant override but it's currently not available. I could probably simulate it though. I'll see what can I do when I try ISyntaxFacts that you've suggested below. 

I am honestly reluctant to use nested types in generic types unless they use *all* type parameters, otherwise it would cause unnecessary type substitution.

As a related note, I also tried to use SyntaxGenerator but it seems it's not updated since pattern matching so that didn't help.

"
"I don't get this. What's wrong with using the existing array instances without copying? Clearing the `JSRuntime.ByteArraysToBeRevived` buffer will only clear the array of *references* to arrays, not the arrays inside it (at least as far as I'd guess - haven't yet finished reading the whole implementation)."
"> Maybe we should also add a crazy big variant of this that parses 1000 cookies as well?

10 is the only boundary condition in todays logic, anything bigger than that ends up testing Dictionary."
"since I can access (internal) Root I might move this check outside of SemanticModel and put it in Operation and leave the design to you guys.

current behavior is, with that check removed, implementation of GetOperation will throw at some point since given input node is wrong, and assert and GetOperation will return null since it catches all exception and return null.

http://source.roslyn.io/#Microsoft.CodeAnalysis/Compilation/SemanticModel.cs,82"
Oops wrong PR. s/3.1.10/5.0 GA/
"Sorry, I'll respond tomorrow, been a crazy month. "
"Baselines: https://dev.azure.com/dnceng/internal/_build/results?buildId=1026812 (internal build of #30639 containing some overlapping commits to this PR) and https://dev.azure.com/dnceng/public/_build/results?buildId=1026843 (public build of this PR) _did_ run tests.

Unfortunately, https://dev.azure.com/dnceng/internal/_build/results?buildId=1026844 (internal build of this PR) also run tests. Suspect `env:` is in the wrong place&hellip;"
"> d value for `id`, then we could consider adding a switch / quirks mode to the infer parameter binding convention, but I wouldn't change just the api description because the runtime behavior would still only support binding from a route. (`?id=10` wouldn't bind but `my-route/10` would)

I got the binding behavior, however, if I have a controller like this

``` csharp
    [HttpGet(""api/products"", Name = ""Foo"")]
    [HttpGet(""api/products/{id}"", Name = ""Bar"")]
    public IActionResult Get(int id = 0);
```

And use the `swagger.json` to generate the client. I will get this:

`public System.Threading.Tasks.Task BarAsync(int id);`
`public System.Threading.Tasks.Task FooAsync(int id);`

This in my opinion, is wrong because the id will never be bound in the `FooAsync(int id)` and that is what I mean about remove the parameter from the API Explorer.

Maybe it is an unusual scenario and, also, the API name will help the client, however, I still feel that it is wrong."
@github wrong PR? This one is against `main`
"Something is very, very wrong here. The two failing tests were quarantined before branching for preview5. They shouldn't run in aspnetcore-ci at all."
This looks wrong. There are no IVT attributes or references in this compilation.
"This is also wrong since it could be messing with additional files. Please revert, this should be somewhere else."
"This read is happening at the wrong time, because it's happening where the `using` is declared, not where it's disposed."
"> Can we add a comment that we believe this behavior is wrong? 

Comments have been added for clarity."
">@github I think that would address (some of) your concerns, correct? 

My primary concerns are:

1. There aren't multiple documents floating around that people have to get right. This will be a pit-of-fail and features will get it wrong (defeating the purpose of this change in the first place). 
2. Users do not have to unnecessarily wait long periods of time just to have the feature bail out

*Almost*any solution for that would likely be fine with me. I proposed a PR showing how I thought it could be done. There were legit concerns on it though. So I'm open to other approaches that satisfy the above. Thanks!"
Nit: Wrong indentation.
"What about ""\udd51\ud800"" (surrogates in the wrong order)?  Presumably it throws.  Add a test :smile:."
"Sorry, that was wrong. The actual check is the `BRFALSE` to `pNullLabel` emitted above that drives the behavior difference."
What's the point of `srandom(time(NULL))` here and what's wrong with `random()`?
"Nope, I made it public rather than private because I typed the wrong thing ;-)
```suggestion
            private readonly ConcurrentDictionary<TKey, TValue> _dictionary;
```"
"This is wrong when you build for NetFramework. Isn't there a way to use the BuildSettings variable in targets files only? "
I think the premise that any `JsonConverter<object>` is an internal converter and shouldn't have it's `Write` method called is a wrong one. I don't imagine a lot of people depend on the behavior of the `Write` method not being called. I'd fix the test - let's see what the change looks like.
"Assert that the documents you expect are in the cache? The count is essentially pinned at 3 now, but the tests won't prevent a bug being introduced in future where the wrong things are cached.

This would also be useful to validate the the oldest item is being evicted.

Probably need to add a TestAccessor for all of that, but you could then remove GetNumCacheItems"
"CC @github/ncl

Hrm this is an interesting one. It seems like there is not a perfect solution here -- fetch API seems poorly made. ¯\\\_(ツ)_/¯

Without setting a normal redirect status code, we break compat with any existing code handling redirects.

But, it seems wrong to fake a status code when we don't know what the actual status code was. If we were to fake a status code, a temporary redirect seems like the best choice -- permanent redirect could cause dangerous handling e.g. updating a URI in a database.

To add a third bad option, what do we think of this? It at least gives the user some flexibility here.

```c#
public class BrowserHttpHandler
{
    public const HttpStatusCode OpaqueRedirect = (HttpStatusCode)1000;

    // if false, return TemporaryRedirect. if true, return OpaqueRedirect.
    public bool ReturnOpaqueRedirect { get; set; } = false;
}
```

(note, using a status code like this may not be advisable as an on-by-default option, as you might have some code doing e.g. `if(StatusCode >= 500)`)"
I'm guessing this is the wrong base call?
"@github Tell me what you think of the latest changes I pushed. It still needs a little refinement and testing. There's some timing that has to be worked out with setting the text and the command still doesn't quite work. Once you set a command the text vanishes

The main thing (that I always forget) is that the BackButtonItem used is the one on the previous controller. So the text wasn't working because it was being set on the wrong BackButtonItem instance. You have to set the `BackButtonItem` on the previous ViewController"
@github  this looks wrong. The original does not have {0}
"Oh wait. I'm dumb. We're getting info on the window, not the TermControl. I think there might be no way to make this accessible, unfortunately :/. I'll add this to my list of things to come back to."
"1. Makes sense
2. Sure
3. Wrong link? Method attribute rude edits are reported in http://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp.Features/EditAndContinue/CSharpEditAndContinueAnalyzer.cs,1889 but that doesn't ever get called for method contents, so can't see local function attributes. I can certainly not add a new RudeEditKind of course. I might be missing something here though.
4. Yep, thats why this is a draft, but want to make sure i'm on the right track first."
"@github I'm preparing it right now. Hopefully this week, but might be early next week. Although not recommended, the binaries should show up on the releases page here on GitHub early. You could grab those if you really need it now. Unless we find something really wrong with it, it should be the exact same version that ends up on NuGet."
"It does make sense. I was thinking that it could be something like where `UpdateFont` just had optional parameters at the end that defaulted to `nullptr` for all the renderers except this one which would unify it all up into a single call ensuring that the update happens along with setting the properties, eliminates the need to pick out the specific derived type for the DX renderer, and would mean no changes really for the GDI and other renderers as they would default those parameters out. But if that still sounds crazy, then we'll punt until @github and @github get their hands all over refactoring the interface like they are eager to do."
"I gave this more thought and I believe I was wrong when I said that `IsPackable` should be used in servicing cases. `IsPackable` determines if a project is packable per-se, which controls if the Pack target is invokable on projects that import NuGet target files.

During the transition from pkgproj to csproj files, csproj files will be annotated with `<IsPackable>true</IsPackable>` to express that they are packable via the NuGet pack task instead of via the Microsoft.Dotnet.Built.Task.Packaging` package. Overloading the semantic of `IsPackable` with `IsServiceable` will cause problems onwards, hence I believe the addition `ServicePackabe` property makes sense."
"This comment is wrong now.

```suggestion
	// Must be acquired after the loader lock
```"
"Since i'm rewriting the entire file almost, and the old formatting is wrong, I'm ok w\ these unless someone disagrees."
"I think just a `[Wrapper]` that calls a conversion method (or a new Protocol ctor) would be fine.

BTW your example is wrong :smile: It should be:

> var key = new Protocol (typeof (IMDLComponent));
"
"According to [the documentation](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/ns-ntifs-_reparse_data_buffer?redirectedfrom=MSDN), the C++ struct containing nested union structs can define the data for a symbolic link, for a mount point and the generic type:

```cpp
typedef struct _REPARSE_DATA_BUFFER {
  ULONG  ReparseTag;
  USHORT ReparseDataLength;
  USHORT Reserved;
  union {
    struct {
      USHORT SubstituteNameOffset;
      USHORT SubstituteNameLength;
      USHORT PrintNameOffset;
      USHORT PrintNameLength;
      ULONG  Flags;
      WCHAR  PathBuffer[1];
    } SymbolicLinkReparseBuffer;
    struct {
      USHORT SubstituteNameOffset;
      USHORT SubstituteNameLength;
      USHORT PrintNameOffset;
      USHORT PrintNameLength;
      WCHAR  PathBuffer[1];
    } MountPointReparseBuffer;
    struct {
      UCHAR DataBuffer[1];
    } GenericReparseBuffer;
  } DUMMYUNIONNAME;
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;
```

Correct me if I'm wrong, but I think the code can be preserved as it is right now, and when the time comes to support junctions and others, we add the extra structs as needed."
"Unrelated to the changes, where the colon? 😄 I'm confused. Is the wrong resource is used here?"
"Something wrong with this diff? This looks like the new test method declaration, but its intended body is shown above... And it's completely different on the 'Conversation' tab. Looks like you broke the GitHub differ :)
"
"Another dumb question, what is the difference between early and late args?"
These .ref.cs files are auto-generated by GenAPI based on the by Roslyn generated reference assembly and don't serve as an input to anything. They exist just to have a record of public API changes. Is this maybe wrong in the source assembly or it GenAPI that makes this in-correct?
"Ah, sorry for bad English. Actually the second part of the comment was wrong, currently the symbols do not get translated, should be `, and is collected and assigned name and index before emit`
"
"Better errors because `@github` is understoood. I think they are still wrong because `ContentProviderBasedProject` has `@github Project`, which is the type that we are giving an assignability error for. "
"> Well, mistakes in past doesn't justify repeating them, especially if we know we could have done it better :)

True. But, if the past mistakes are so prevalent in the existing design, those mistakes can actually _become_ the design. And, trying to do improve upon that results in inconsistency. I believe that's the case here.

> If ""Suggestion"" gets the vote for being a new severity, why not ""Unnecessary""?

I keep repeating this, but ""Unnecessary"" is _intended_ to be combined with a severity. It is 100% by design that code could be faded as ""unnecessary"" and be squiggled as an error. This was designed from the very beginning. Likewise, code can be unnecessary and marked as a suggestion.

> I don't agree with this. Firstly, custom tags are associated with descriptors, i.e. rule metadata, not individual diagnostic instances. Rule metadata represents default information about category of issues created through the descriptor, as deemed appropriate by the analyzer author. Even the unnecessary custom tag added to faded diagnostic becomes non-sensical if user promotes the diagnostic to an error. We need to understand that custom tags is just metadata for class of diagnostics reported via a descriptor.

How is it non-sensical if a user promotes a faded diagnostic to an error? If the user wants to promote remove redundant cast to an error, they should be able to do that and the diagnostic should continue to be faded (because it represents unnecessary code) and underlined with a red squiggle (because it is an error).

That said, ""suggestion"" is a different concept that ""unnecessary"". ""Errors"", ""Warnings"", and ""Suggestions"" are mutually exclusive, which implies that using a custom tag for ""Suggestion"" is a fragile design with invalid combinations.

To be super clear, we're not suggesting that we should allow the DiagnosticSeverity enum to explode. However, after spending the last couple of years building analyzers, and looking at the problem space we believe that there is simply a missing severity. This severity is not so strong as to warrant a warning to inform the user that something is truly wrong with their code. Instead, it is slightly weaker, offering a suggestion to improve the user's code.

You're completely right that suggestions could be achieved by using the Info severity with a custom tag. However, I would argue that we'd just be simulating a severity in that case. And, if we're contemplating the simulation of a severity, I argue that it deserves to be a severity. Otherwise, it becomes an extra complication that every diagnostic host needs handle properly.
"
"I agree, this looks wrong. There might be an existing bug for this? I feel like I've seen it a long time ago."
"When I saw 100+ baselines changed, I thought I had done something horribly wrong, but... this seems like an improvement?"
"> On combining diagnostic IDs: I didn't make any changes as of now. I have a preference for not combining the messages themselves (""either X or Y is wrong""). Because of the way localization works, I don't know if it's possible to vary the message wording for the same diagnostic ID.

The unit of translation is usually a single diagnostic message. We sometimes parameterize based on simple discriminators e.g. saying ""type"" versus ""method"", but nothing more complex than that. I'm happy with your preference, so feel free to leave the diagnostics as is :)"
"> is this backport worthy?

Yeah, the API claims it handles a bad basic constraints extension; it throwing ""something went wrong"" when it happens is bad UX... and is presumably caused by an OS update somewhere along the way... so it's probably something we should take."
"@github I can repro the test crash but it's due to malformed syntax tree.
Because the syntax is malformed (multiple members in record, but not braces) the construction of binders is wrong.
Couldn't repro the issue from source."
"> it would be nicer if lsif could directly use documents and this could become a document option (and then unify the lsp impl to just use that option). But that ship has probably already sailed.

I actually agree.  Paging @github  @github to get their thoughts on why we didn't go that route.  I get that we might not have a ""real"" workspace. But it feels not crazy that we could synthesize a reasonable one out of the compilation info we've been given.  "
"> Uses a shared accessor property descriptor object, but that will still cause the wrong error message to be thrown.

In my example I modified `__classPrivateFieldGet` to take an optional third argument (`kind`) that throws the correct error message given the situation."
"Hey @github, something went wrong when publishing results. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=101535&_a=summary))."
"> Just curious as I am not knowledgeable about timezones -- what would be the impact of the user picking the wrong one of the several Alaska time zones? They are all -9:00. I'm not sure which -8:00 I should pick for Seattle, even when they are marked Los Angeles and Vancouver.

@github - Indeed, that's a general issue with time zones - there are quite a lot of them.  The reason has to do with historical accuracy.  IANA time zones aim to be accurate from 1970 forward, thus any variation in local time between nearby locations since 1970 get a distinct time zone.

For Alaska, the only two that matter *today* are `America/Anchorage` (UTC-9 with US DST rules) and `America/Adak` (UTC-10 with US DST rules).  But if we look at the [source data](https://github.com/eggert/tz/blob/336c8f8262e31116878b079abba80b1626baaa8f/northamerica#L670-L731) we can see that several other Alaskan time zones have been different in the past (last in 1983 in most cases, except Metlakatla last in 2019).  Since any time zone can be used for the full range of dates available, we show the entire list and it gets large.

For Pacific time, there are three.  Vancouver for Canada, Los Angeles for the USA, and Tijuana for Mexico.  They too have had some historical differences.

Thus, the impact if a user choses the wrong time zone is that they get the changes in UTC offsets and daylight start/stop transition dates for the entire range of that time zone.  If they are only working with ""now"" or nearby dates, that might not be noticed at all.  If they are working with older dates, they could be off by an hour or more depending on the date in question.  The same thing plays out with regard to any anticipated upcoming changes for future dates, if those changes are accounted for in their respective time zones.

Since the only API we have presently is `TimeZoneInfo.GetSystemTimeZones()`, we have to return them *all*.   It might be interesting to consider adding an overload or two that would allow one to supply cut-off dates (or a country code) that could be used to shorten the list.  But that would be something new.

Incidentally, legacy Windows registry-based time zones are fewer in number only because originally Windows hadn't set any particular consistency date (like IANA's 1970).  That changed in 2016 when we formalized some of [Microsoft's time zone policies](https://aka.ms/time) and set a consistency date of 2010.  If they had aimed for 1970 and covering the world, there would be just as many as IANA.
"
"Added `ICloneable` to wrong PR, fixed mistake."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/dotnet/runtime/issues/54021

`fr-CA` culture is using time format pattern like `HH 'h' mm 'min' ss 's'` which is causing 2 problems:
- First, we usually derive the time separator from the time pattern. That causing us to use ` h ` as time separator. So, when formatting any DateTime object using this culture we produce wrong formatted time e.g. `10 h 5 h 50 h`. note that ` h ` is used to separate the hour, minute, and second parts in the formatted string.
- Second, the formatted time cannot parse back when using `DateTime.Parse`. This is because we cannot recognize the parts like `min' and 's' in the formatted time.

The fix here is we are special casing this culture to explicitly setting the time separator to `:` which is other French cultures are using. Also, we added some support for this culture in the date/time parser to recognize such formats. 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This is a fix to enable nullable check for the
""Microsoft.Extensions.Configuration.Abstractions""
by enabling using netcoreapp3.1 and the latest version
of .net core, including:

1. Enable ""Nullable"".
2. Change some missing / wrong comments in the XML document.
3. Add ""NotNull"" for some functions whose parameter CANNOT be null.
4. Add ""NotNullIfNotNull"" for some functions when they can accept
   nullable values.

Ref: https://github.com/dotnet/runtime/issues/57200

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>MaledongGit</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Extensions-Configuration`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> Note, I saw a number of failures in System.Security.Cryptography on Android, most of them because it seems to be trying to load openssl or run RC2 tests. However none of the tests are tripping an assert now.

Why would it pick the wrong `DefaultECDsaProvider` ?  The logs indicate trying the .Unix one when it should be picking .Android."
"Right now, this file is only used by Core and DeviceTests which do not have any xaml. I removed it for now so it doesn't cause issue later on if I did it wrong."
"The difference seems to be that:

* Before this change, the HostBuilder's HostingEnvironment was created with `ContentRootPath = ""/""`
* After this change, the HostBuilder's HostingEnvironment was created with `ContentRootPath = """"`

And the `""/""` doesn't cause any errors because it's a real path (though it's totally _wrong_, because of course that isn't the real content root path). But now it's getting `""""`, which isn't a valid path, so the exception is thrown."
"That's a crazy amount of work for these tests, and wouldn't work for Blazor in the future. We should let people know when we are done initializing stuff by for example, simply saving the boot promise inside the window[Blazor] object."
"Not that it's wrong, but why did this test change?"
I'm just being cautious here. Based on the error I have not much idea of what can be going wrong. Other than the server is taking longer to start?
Hah - it's in the wrong directory anyway.  Missing `src`
@github Was your suggestion to no longer log any startup exceptions? It feels wrong to log everything except AddressInUseExceptions.
"Ah, something is wrong. The compiler package shouldn't change. Only the IDE one. Looking..."
this loop feels like it will be wrong if both parts of the partial method are in the same document.
The fact that this works at all is crazy
"👍 

One thing to consider is *always* doing this.  We went htat approach in TS: https://github.com/microsoft/TypeScript/blob/b24050aefd2a3ea88d463c6a147a9b6e1878dec7/src/compiler/parser.ts#L2117-L2128

Or, another way of putting it: we just had a generalized list parsing algorithm, and then it was trivial to examine each call to parse a list and ask ""should we just pass in the bool here since users could reasonably be expected to pass the wrong separator kind in"".

Anyways, something to maybe consider in the future :)"
"> Why wouldn't we add [NotNull] to all parameters of methods that dereference non-nullable reference typed parameter?

In this specific case, extension method receiver, it's about expectations. The expectation, as demonstrated by your feedback on the PR and my own head scratching when originally making the changes, is that a call in the form of `a.b()` will ensure that `a` is non-null. I felt it was easier to add this annotation here to reduce confusion in the code bas. 

As to why we don't do it everywhere. It's not wrong to do so just not idiomatic. "
"I guess if we *do* do it, then we we have to duplicate the check somewhere. Do we just copy/paste the logic?

Thinking further I'm also not sure what it means if we have non-C#/VB users of the workspace, and whether they'd want the restriction or not. I guess we still would use our parser for them which is maybe the right or wrong thing...not sure."
"I don't think the test failed from template, but the failures seems happening on the test i added recently, i will take a look what is wrong"
"This error message is only visible in the rare case that the installation was corrupted by a third party program. I think we should be explicit in calling it out: ""VSCode's tsserver was deleted by a another application such as a misbehaving virus detection tool. Please reinstall VS Code."" Otherwise, if I'd see the message you propose right now, I'd think VS Code did something wrong."
"> Hmm, I wonder if maybe that was added or changed recently?

I could be wrong, maybe FEATURE_CORESYSTEM is not defined in this case. @github when is that defined? "
"Makes sense to use hide/show.
`hover.show` calls `showHoverDelayed`. That seems wrong as it is used to set up a new hover and won't do anything if a hover is being prepared (or up) (hoverPreparation is set). 
We know the widget is up and all listeners to manage it are installed so I think that all that's needed is to dispose the existing widget and create a new one

-> 
```
const tooltip = getTooltipForCustom(markdownTooltip);
const resolvedTooltip = (await tooltip(tokenSource.token)) ?? (!isString(markdownTooltip) && !(markdownTooltip instanceof HTMLElement) ? markdownTooltip?.markdownNotSupportedFallback : undefined);

hoverWidget?.dispose();
hoverWidget = undefined;
if (resolvedTooltip) {
		if (resolvedTooltip && hoverPreparation) {
			const hoverOptions: IHoverDelegateOptions = {
				content: resolvedTooltip,
				target,
				showPointer: hoverDelegate.placement === 'element',
				hoverPosition: HoverPosition.BELOW,
				skipFadeInAnimation: true
			};

			hoverWidget = hoverDelegate.showHover(hoverOptions);
		}
}
```			
    


"
"Added a comment to explain, it applies to all platforms. You might recall a few weeks ago that I had to fix an issue where the layout control menu was drawn in the wrong position when zoom was applied on macOS. The fix that I made is incompatible with the required css changes to support the native controls. So, this is essentially a new fix for that problem that is required with adoption of the WCO"
"Yeah, I'm not crazy about it either. I don't think `binarySearch2` expresses the intent though, could be even more confusing. I was thinking about `bisect` earlier, or something even more radical: create a separate `algorithms.ts` file, call both functions `binarySearch`, and then we would have `arrays.binarySearch` that refers to `algorithms.binarySearch` under the hood. What do you think, @github ?"
"Dumb q: the textblock is relaid-out between these events, right? When composition ""completes"" without starting, that is?"
"I notice now this is used by tasks and something wrong likely happens with and without this change:

https://github.com/microsoft/vscode/blob/9ade6a663662c5e4805038a6e3b3b4ba2f648472/src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts#L1297-L1299"
"Just remove this assert? If it's wrong, your cast will throw an exception but in that case you'll have a useful exception (""unable to cast [thing] to BasePropertyDeclarationSyntax"") instead of ""expected true""."
"```suggestion
			//
			// --- Important --- //
			//
			// This is a WRONG Pattern!
```"
"When a user configures a task, we select that task in the tasks.json so it's easy to find. We find the task by label.
However, extension contributed task that are configured in tasks.json aren't required to have a label, making them difficult to find.
When the tasks.json is parsed for tasks, we do keep track of the position of the task in the tasks array, so instead of using the label, we should use that and only fall back to the label if something goes wrong.

To accomplish this I:
- Extracted some formatting code into `formatTaskForJson` to reuse it.
- Added a  `configIndex` parameter and used it to determine what to select.

The lines that are a real change are https://github.com/microsoft/vscode/blob/9e35ecfd69892aed0be946b73b7b1735703f538f/src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts#L1088-L1100"
"sorry this one went wrong. it was supposed to be from issue branch like this one https://github.com/xamarin/Xamarin.Forms/pull/11372/files
Can we delete this PR and concentrate on 11372? "
"> Why wouldn't a DelegatingStream class do the same thing?

Seems to me like policy we wouldn't want there.  I could be wrong."
There's no distinction here between the two `setclrpath`. The first one is to verify a wrong DAC hasn't been loaded. That one has no parameters. The second one should have a path to the folder containing coreclr as the parameter.
"This is irrelevant, it seems that last time I seemed to have created a wrong line in this file, then noticed build breakage, and fixed the one that is actually used at build time (but wrong file, I should have fixed this too)."
"[Confirmed (-ish)](https://jenkins.mono-project.com/job/xamarin-android-pr-pipeline-release/762/), it *is* wrong:

```
/Applications/Xcode92.app/Contents/Developer/usr/bin/make run-api-compatibility-tests
csc -out:bin/BuildRelease/lib/xamarin.android/xbuild/Xamarin/Android/mono-api-html.exe ...
error CS2012: Cannot open '/Users/builder/jenkins/workspace/xamarin-android-pr-pipeline-release/xamarin-android/bin/BuildRelease/lib/xamarin.android/xbuild/Xamarin/Android/mono-api-html.exe' for writing -- 'Could not find a part of the path ""/Users/builder/jenkins/workspace/xamarin-android-pr-pi
peline-release/xamarin-android/bin/BuildRelease/lib/xamarin.android/xbuild/Xamarin/Android/mono-api-html.exe"".'
```

Note that it's wrong because it's still trying to build/create `mono-api-html.exe` -- note the `csc /out:` value! -- but it's trying to create a file into a directory which doesn't exist.  (`csc` can't create all intermediate directories?!)"
"Oh all the `.cs` files on my system are LF...

So maybe we have more than just `.txt` wrong?"
Er...what?  Did we always have the wrong declaration?  Did Mono change the declaration?
"I heavily prefer the use of a `Theory`, specifically for the `declarationType` parameter. When the test is broken out into separate tests, it is no longer possible/practical to see two things:

1. Are all cases covered? If it's not a `Theory`, then assume not.
2. Are all related cases covering the same thing? If a typo is fixed in one test input, was it fixed in all? If it's not a `Theory`, then one or more tests is probably wrong.
"
"> I was wondering about the merging too. I dunno; did we set a bad precedent with TerminalCore? 😄

That's exactly what I was looking at... uh oh. But the nice thing now is that all kind of input is consistently in TerminalInput, rather than a random MouseInput object off on the side.

That said, I'll just redirect all calls to `terminalMouseInput` to go through the input buffer instead. I _feel_ like that's cleaner but both of y'all know the code better so let me know if I'm going down the wrong path here."
"No, ConHost is the wrong order since unlike ConHost WT aims (not at high priority, but aims) to support RTL. You can see in the linked issue.
The right version is the correct one for any application which supports RTL."
"Another crazy idea: add `or $(System.JobAttempt) > 1` to the `condition`s, and then we could click the `Rerun stage` button to kick off tests from the UI.  😉 

![image](https://user-images.githubusercontent.com/179295/93956260-57f57280-fd17-11ea-9739-df5583d38202.png)
"
This looks wrong (in fact it doesn't look like there's a `d15-5` branch in the linker repo).
You put the ' at the wrong place on this one (compared the your other advice). It's 'UserNotifications'.
"I agree, it's a bit of a pain to deal with this.

That said, it's not obvious to me how to propagate this to the caller and/or make it easier to debug. Suggestions welcome.

Hopefully this is not a common occurrence -- an exception during a callback means something is deeply, deeply wrong."
"This FileStream is going to be problematic if the file is already present (user wanted to override or simply was wrong). This will override the file no matter what. We should throw an exception if that was not intended and add a -f or --force to the arguments. We can add the new argument in a diff PR, but we should already check for the existence in this one. "
"> This may be a dumb question, but why do we even need the second check? Can null ever be something other than null?

Ideally, no. For this case there's an existing override to the `==` operator, and you would _expect_ that if the first check is true the second is always true. However, since the code for `==` is manually written there could be a bug where the test fails!

I think also for operators like this we usually want to verify that the operators maintain symmetry and general arithmetic correctness - I had to look this one up, explanation here: https://en.wikipedia.org/wiki/Equivalence_relation

+1 to @github There are no dumb questions 😄 "
"Let's check to see whether a 'ready' already exists on Module here and if so... throw or something, since we've previously had people load us alongside another global-scoped emscripten module and then file confused issues about it.
Doing that is incorrect and they shouldn't expect it to work, we might as well fail early so they know what they did wrong."
"Oh, [we throw](http://source.roslyn.io/#Roslyn.Test.Utilities/MarkupTestFile.cs,171) if markup parsing doesn't work out, so I guess this works. Crazy.
"
"did I get it wrong? I thought the session ID was just a pointer cast to an int.  (wasm is 32-bit).

but yea we can use a wider session ID"
"> I think you're making it harder than it actually is

I know, that's why I'm asking 🙂. There are many things about async code that I am unfamiliar with, so I appreciate the patience and the explanations.

> As written it's an expensive nop that eats all exceptions thrown.

Ah alright, so I had the wrong understanding.

> In general, let exceptions propagate exactly as you normally would in a synchronous method. The only special-cases typically are when doing argument validation in the entry point method.

Thanks, that is the answer I was looking for. I'll adjust the code based on this."
What was wrong here?  Does this belong outside the try-catch?
"We store the hash of files written in bundle emit to ensure that when we try to manipulate the sources for pseudo update (because d.ts of referenced project didnt change so only prepends need to concatenated in right order), we can check if file hasnt changed. This is now needed because bundle buildInfo also stores .d.ts change time and if incremental was toggled between compilations we might use wrong file text and get incorrect d.ts Look at 62c687be8401c0595580db50ca78bc0cfe3613e3 for details"
"@github, what is the breaking change concern here? We're worried someone is relying on this returning the wrong version? I'm fine documenting it as such if we think it is, but I'd be interested in examples where we think it's realistically an issue."
"No, the type of Symbol.iterator here is `any`. Although `any` is normally allowed in computed properties, when you write it in this form (Symbol.something), it is a pretty strong indication that you mean to use a symbol, so we give you an error because you are probably using symbols wrong.
"
"> I have not found any other mechanism for the sorting of the completion items, but using the SortingPrefix feels wrong to me.

This seems fine, as long as it's only part of SortText (and not display/insertiontext).  SortText really just is a lexigographic byte-stream.  So putting in a special 'number' to sort there is fine IMO."
@github thanks for feedback I'd been staring at that for quite a while trying to work out what was wrong; who knew mixing up `true` and `false` could make such a difference 😉
"I tried `getTypeOfSymbol(getSymbolOfNode(...` first. According to my notes, I had trouble getting `typeof C` vs `C` in the static case.

But it looks like I was wrong. It works now. I'm pretty sure some other change I made was wrong at the time.
"
"This bug should not be specific to Decimal. Are you able to reproduce it with a custom type with long field? E.g. `struct MyStruct { int a; int b; long c; }`.

Looks like `getClassAlignmentRequirement` in crossgen2 may be returning wrong value on arm. "
"@github I understand you want to help, but your last few messages have been very off topic (for example, @github's message doesn't reference pnpm even once) and only add noise to what's an already lengthy thread.

I don't have the power to hide comments here, so please understand when I tell you that I really want to keep this thread as much as possible a discussion **between the Yarn and TS teams**, perhaps with occasional displays of support for morale. You're welcome to join our Discord for more general discussions or to suggest alternate implementations, but this PR isn't the right place for that.

> And even this pull request comes from @github who represents the facebook yarn side of stakeholders

That's absolutely wrong. I haven't worked for Facebook for a long time; I wasn't even working there when I opened this PR. For more information, see [Is Yarn operated by Facebook?](https://yarnpkg.com/getting-started/qa#is-yarn-operated-by-facebook) (but again, realize this is an off topic territory, very out of place for this PR)."
"This fix doesn't seem like it's currently going in the right direction, nor does it have a test case associated. Not sure how comfortable I would feel merging this.

If you're interested in fixing this, then please follow the contribution guidelines. Otherwise, these are good guidelines for isolating the problem. As a start, from what I can see, this is happening from syntax checks in a JavaScript file (i.e. `.js` or `.jsx`) to ensure that TypeScript-specific syntax isn't being used somewhere. This is indicated by the call `getJSSyntacticDiagnosticsForFile`.

Like I mentioned in the review, something is going wrong because some caller is lying about its types. There is exactly one call to `createDiagnosticForNode` that has a type assertion on the node passed in:

```
                        case SyntaxKind.AsExpression:
                            diagnostics.push(createDiagnosticForNode((node as AsExpression).type, Diagnostics.Type_assertion_expressions_can_only_be_used_in_TypeScript_files));
                            return ""skip"";
```

https://github.com/microsoft/TypeScript/blob/57c8938d9e90dd4ece5389d4c78593db1ea22e81/src/compiler/program.ts#L1911-L1912"
"Oh, because it's wrong and I didn't notice because I was debugging one test and forgot to run the whole suite :("
"> Maybe thing's have gotten better since I last tried in macOS world (or maybe I did a bunch of things wrong 😄 ) but the problem with ""data"" keys as I call them is they don't seem to work fully in place of keychain-backed keys. e.g. CopyWithPrivateKey on X509Certificate2 I think was one place that I hit.

I fully expect that to be a problem, just scratching the unit test surface now to decide on a strategy. On iOS the keychain-backed APIs just don't exist so even if this works on a limited API surface it's still better than nothing."
"As I understand `clrx` is used rarely for cases like OS switching threads - so that if one thread preempts another on the same core there is no confusion who has the access. 

Not sure why clang emits it there. Assuming ldaxr and stlxr are used in pairs, nothing would go wrong if monitor is not reset. And it will not last anyways because of context switches, interrupts, etc.

Maybe there is a scenario if you write the actual OS code or a device driver."
"I seem to have generated the tar and tar.gz files from runtime-testdata with the wrong uid and gid, so some tests will fail due to that. I'll have to generate them again with the script and update the package here.

Edit: Fixed."
"@github see if this version reads any better. I could pull functionality into the helper struct but have left it basic for now.

Looking at a few of the larger diffs I realized that the existing version of redundant branch opts has a bug; if the tree VN is a constant than the outcome of the branch it controls is independent of any dominating branch, but we were (previously) using inferencing here. This lead to at least one instance where we made the wrong deduction, 57396 in coreclr_tests. Fixing this keeps a bunch of code around that should never have been deleted. I added a note to the code indicating that checking for the constant case is necessary and not just nice to have.

Seemingly these constant VN relops are somewhat rare and having more than one in the right arrangement even rarer, which is why we haven't seen complaints about this before.

```
;; bogus deduction with constant VNs (now fixed)

N002 [000032]   CNS_INT   1 => $41 {IntCns 1}
...
Dominator BB01 of BB07 has relop with same liberal VN
N003 (  5,  4) [000008] J------N---                         *  LE        int    $41
N001 (  3,  2) [000006] -----------                         +--*  LCL_VAR   int    V03 loc1         u:2 (last use) $40
N002 (  1,  1) [000007] -----------                         \--*  CNS_INT   int    0 $40
 Redundant compare; current relop:
N003 (  3,  3) [000259] J------N---                         *  GE        int    $41
N001 (  1,  1) [000260] -----------                         +--*  LCL_VAR   int    V04 loc2         u:2 $40
N002 (  1,  1) [000261] -----------                         \--*  CNS_INT   int    -1 $42
Fall through successor BB02 of BB01 reaches, relop must be false
```

The other large regression 247114 from libraries_tests.pmi also has constant cases but there we ended up getting it right as the dominating predicate was the same predicate (here $42 is 0)
```
N005 [000047]   CNS_INT   0 => $42 {IntCns 0}
...
Dominator BB210 of BB215 has relop with same liberal VN
N003 (  3,  3) [003642] J------N---                         *  EQ        int    $42
N001 (  1,  1) [000486] -----------                         +--*  LCL_VAR   ref    V19 tmp15        u:2 $13c5
N002 (  1,  1) [003641] -----------                         \--*  CNS_INT   ref    null $VN.Null
 Redundant compare; current relop:
N003 (  3,  3) [003711] J------N---                         *  EQ        int    $42
N001 (  1,  1) [000491] -----------                         +--*  LCL_VAR   ref    V19 tmp15        u:2 $13c5
N002 (  1,  1) [003710] -----------                         \--*  CNS_INT   ref    null $VN.Null
```
The large regression in this method seems to come from LSRA finding many more single-def cases to spill upfront. Did not try and drill into this further.
"
"Thanks for figuring it out. This would have almost might have made every possible loop's size calculated wrong (it will go all the way to end of the method) and leading to most of the loops being not aligned because of heuristic not met. This would also explain the regression in https://github.com/dotnet/runtime/issues/69444.

Does this fix completely remove the checked vs. release diffs?"
"> Looks cool. Just the one case where windows may have a window without a content yet. We may always have a root panel, but maybe some custom handler does not use it.
> 
> Can we do the XamlRoot and get that parent? The root view should have the window as the parent?

XamlRoot doesn't have a parent as far as I can see. That's the topmost level I can get to from the looks of it. From what I can see that _should_ be enough. If the Content for a XamlRoot is null, then the FrameworkElement shouldn't belong to that MAUI IWindow. If you have a FrameworkElement that exists in some other WinUI Window that is totally unrelated to MAUI, and for whatever reason call this API, then the XamlRoot will be wrong for all of the MAUI managed windows and it will return null (which I would expect).

Even if you are doing custom handlers and not using the RootPanel, the XamlRoot on the UIWindow should still be on a MAUI IWindow as well, and if it's not it will return null. 
"
"@github looks my suggestion was wrong :(
`D:\a\_work\1\s\src\Core\src\Platform\Android\StrokeExtensions.cs(18,4): error CS8602: Dereference of a possibly null reference. [D:\a\_work\1\s\src\Core\src\Core.csproj]`

I didn't know why since there is a check for null right before"
"This doesn't actually help:
```xml
<KnownFrameworkReference ...>
  <RuntimePackAlwaysCopyLocal Condition="" '$(UseMaui)' == 'true' "">true</RuntimePackAlwaysCopyLocal>
```

So I'm unsure what is wrong here... It's like it's not picking up these from dotnet/packs?

Previously, these `@(KnownFrameworkReference)` would not be added to this project at all."
"Holy smokes, that's a crazy bug. From 10-12 minutes to 22 seconds. Excellent find @github !"
"These are debug logs. If typescript made it easy to turn regular enums to strings, I would consider it as part of this change.

But as it stands, I have to either change the enum to a ""string enum"" or add a look up table. Not crazy, but not necessary as part of this change."
Wrong capitalization of `jQuery`. Is this wrong in other templates?
"@github I must be doing something slightly wrong in updating the test, now that confirmation is required I had to add a few more clicks before the account should be logged in, but it doesn't look like the fetch data works still, anything obviously wrong with this test update?"
