text,isnegative
Why not use `Directory.Move`?,0
I think we should come up with a better version than 1.0.0.,0
We could use the existing mlaunch version:,0
"or we could come up with something else (Xcode version? Something completely different that's calculated in maccore and doesn't take xamarin-macios into account? Go with ""0.0.1"" and decide something later?)",0
@spouliot / @dalexsoto what do you think? I lean towards the mlaunch version (although the downside here is that there can be multiple mlaunch versions for the same maccore hash).,0
"Note for future: we can probably use `[Category (""StaticRegistrar"")]` and then exclude that category when running the tests.",0
Test failures are unrelated:,0
* introspection/Mac Modern/Debug: #15230,0
* xcframework-test/watchOS 32-bits - simulator/Debug: https://github.com/xamarin/maccore/issues/2558,0
build,0
Same: iterator function.,0
We should somehow make sure these are fixed in XAMCORE_4_0.,0
One easy way to do this would be to make the attribute field an error:,0
Test failures are unrelated (https://github.com/xamarin/maccore/issues/2443 and https://github.com/xamarin/maccore/issues/2471).,0
You're executing powershell to execute PlistBuddy. Why not just execute PlistBuddy directly?,0
The text for `MM4175` shouldn't be deleted.,0
Test failures are unrelated:,0
*  monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2443,0
* [NUnit] Mono Mac OS X BCL tests group 2/Mac Full/Debug: https://github.com/xamarin/maccore/issues/2542,0
"You include Mac Catalyst, but the type inside here is still `[Unavailable (PlatformName.MacCatalyst)]`",0
Test failure is unrelated (https://github.com/xamarin/maccore/issues/2414).,0
It should be. I cherry picked the commit.,0
👍,0
I didn't know about the forking and bots... I'm a noob with all this. Next time or should I create now?,0
"We typically prefer work (and pull requests) to be done in forks. It's fine for this PR, but if you could create the d16-7 PR using your fork that would be great! And we've branched d16-8 as well, so this fix needs to go there too.",0
/azp run,0
"""normal"" AOT aka.",0
"Right now people can use Debug mode and it works, except that you can't debug. My concern is that if someone runs into a bug in the interpreter, they should be able to stop using the interpreter somehow so that the app runs correctly on the watch, even though debugging doesn't work (they could at least use Console.WriteLines).",0
"I think `RequiredInterface` sounds better (mostly because `Require` is a verb, and this is a property, not a method).",0
Missing newline at end of file.,0
"I don't think we'll have the problem in the d16-6 branch (we probably started getting too many statuses for one page with our .NET support, which isn't in d16-6), so I don't think we need this PR.",0
"buffer.Length can't be 0 here due to argument validation (count has to be >= 1, and offset + count has to be <= buffer.Length).",0
"It seems my grepping was flawed: `dispatch_get_main_queue` shows up in earlier iOS SDKs, but it's a define, not an actual function (which it didn't become until iOS 8).",0
"I'll have a look and see if we can remove the call to `dispatch_get_main_queue` entirely, and just rely on the `_dispatch_main_q` variable instead.",0
Test failures are unrelated,0
* introspection/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2414,0
* fsharp/Mac [dotnet]/Debug [dotnet]: #12738,0
Why `ref` (for the second argument)? You're not assigning anything to it.,0
"Same, `string` output:",0
Then the [NoWatch] attribute on the other members added to this type is redundant.,0
"True, but that same argument apply to any generated code and optimization that are done. That includes the ones that are already present in that step: if you modify the generated Dispose then that code must be updated (or at least verified) to match.",0
"A test can be added to make failure more likely but still any generated code change must be reflected in all the optimizations, that's the contract for any code decorated with [BindingImpl].",0
"True, that's the contract. We're also humans who make mistakes... in theory we'd check that all optimizations continue to work as expected after changing BindingImpl methods, but experience tells me there's a significant chance that won't happen.",0
I might have missed something but I don't know why this would be limited to release builds ?,0
"You're right, I got confused.",0
"It's also only applied on types that are not subclassed. E.g. UIView would not be removed, even if empty, because a lot more logic would be needed to replace the calls (like UIWindow::Dispose back to its base class).",0
Removing an override is not a binary breaking change: https://docs.microsoft.com/en-us/dotnet/core/compatibility/,0
"Which means that if UIWindow::Dispose calls UIView::Dispose, and UIView::Dispose is removed, then the call will just go to the next Dispose implemenation further up the chain (which might end up being NSObject::Dispose).",0
"That said, I'm not sure if it would still work if it all happens within the same assembly.",0
On the other hand I'm wondering if a mix of two other ideas would make this idea more future-proof:,0
1. Enhance the optimization that removes the null assignment to remove the Handle == IntPtr.Zero check as well. This would mean the only thing left in the Dispose method would be the call to base.,0
2. Check if there is (or implement) an optimization in the linker (or our own custom steps) that removes virtual overrides that just call base.,0
"This seems both safer/more defensive, and generally more useful (the second part at least, if it's not done already).",0
"Another point is that this optimization will break if we ever change the dispose method to check for NativeHandle.Zero instead of IntPtr.Zero, and there are no tests in this PR to catch this :)",0
"Yes, the difference is that `is null` won't call any `==` operators: https://stackoverflow.com/a/50811687/183422 (It's guaranteed to always be a pointer-comparison)",0
Test failure is unrelated (https://github.com/xamarin/maccore/issues/2154),0
Same,0
"The problem is that the order matters... if a place wants to add '-L' and '/path/to/foo', those arguments have to be kept in the same order, and a HashSet doesn't preserve order.",0
Missing availability attributes.,0
Makes sense for us but is this also true for VSMac now?,0
"Yes, this is true for all our platforms in .NET, even for VSMac.",0
I think this is simpler and more accurate:,0
@mandel-macaque fixed,0
"Due to https://github.com/xamarin/xamarin-macios/issues/9478, this isn't a safe pattern. I think we'll have to do it the manual way:",0
"The `SetHighlightedItemForProperty (int, int)` overload is both internal and obsolete - which makes the obsolete redundant because nobody will see it, and you can just remove the obsolete attribute:",0
https://github.com/xamarin/xamarin-macios/blob/5cc92ac564ece03efb79c9b271beafc8faf905c0/src/addressbookui.cs#L164-L169,0
"The comment is also out of date, so it can be removed too.",0
"This is code moved from elsewhere, so it's been working fine, so I don't want to touch it too much.",0
And in any case I don't think the `escaped` condition would be possible to express in the switch.,0
Cloning is faster and uses less disk space:,0
Is the lack of hash here expected?,0
"If `IsCustomType` returns false, `IsRegisteredToggleRef` will be set to true, and the next time `MarkDirty` is called on the same object it'll exit immediately.",0
"This obviously only matters if `MarkDirty` is called multiple times per instance, which is exactly what's happening.",0
"Yes, docs is the only thing left now.",0
"I think you can just remove this line (and not add the other code), because the added test code just does the same thing the `CaptiveNetwork.TryGetSupportedInterfaces` method does, so there's not much testing value.",0
Fixed.,0
Missing comma at the end of the last element.,0
You can do:,0
and `items` will be null.,0
Test failures are unrelated:,0
* monotouch-test/Mac [dotnet]/Debug (static registrar) [dotnet]: https://github.com/xamarin/xamarin-macios/issues/13531,0
* MTouch tests/NUnit: #13547.,0
Test failures are unrelated,0
* Mono BCL Test group 2: https://github.com/xamarin/maccore/issues/619,0
* Generator tests/.NET: fixed in #9251,0
https://github.com/xamarin/xamarin-macios/blob/92eda7f35399f442f8730aa539571ad8fd44d7da/tests/common/Configuration.cs#L707-L723,0
"Yes, I'll probably have to hardcode this class somewhere to make it work without breaking the API 😒",0
/azp run,0
@chamons this failure:,0
make[2]: *** No rule to make target `.stamp-configure-projects-mac'.  Stop.,0
"isn't fatal, you can just ignore it for now.",0
"The test failures that show up (link all / DotNet tests) are different issues, and at least the DotNet tests seem to be from this PR:",0
# .net ChangeLog for https://github.com/xamarin/xamarin-macios/pull/14921,0
## Level 1,0
* https://github.com/dotnet/runtime [ac796cb...39dbeee](https://github.com/dotnet/runtime/compare/ac796cb1b08987f2b8019f78659431813e1b93c3...39dbeee8c64e0c845da1f6b3a8ef81707806a672),0
## Level 2,0
Generated using https://github.com/spouliot/dotnet-tools/tree/master/changelog,0
I think the names are fine as-is.,0
Great work! Thanks a lot!,0
@akoeplinger would that require any changes in Mono that we have to wait for? Or is that already implemented?,0
https://github.com/xamarin/xamarin-macios/blob/524fd24022e8e6e0f95caa22f10029a97b3b0e95/tools/common/Frameworks.cs#L594-L597,0
"`using (var array = new CFArray (proxyList, false)) {` avoids the manual Dispose later.",0
"Although now that I think about it, I like the symlink idea better",0
Oh I wonder how you found about this 😅,0
"Oh, that's quite simple. After running `make`, running `make` again without any changes should be quite fast. It wasn't (and that's very noticeable 😄)",0
# .net ChangeLog for https://github.com/xamarin/xamarin-macios/pull/12803,0
## Level 1,0
* https://github.com/dotnet/installer [6543103...3d8501f](https://github.com/dotnet/installer/compare/65431030072d4f821d32321a26fc9910e30faa5b...3d8501fba26e97b3300eb012df90192decac47e4),0
## Level 2,0
* https://github.com/dotnet/source-build-reference-packages [896532e...20feb77](https://github.com/dotnet/source-build-reference-packages/compare/896532ec53ea317e3136ad3849ef1944a31b9f6b...20feb77a4b5aad7ec74edc8e35a55779ea1f7003),0
Generated using https://github.com/spouliot/dotnet-tools/tree/master/changelog,0
Test failures are unrelated:,0
* introspection/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2414,0
* monotouch-test/Mac [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2525,0
* monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2525,0
* xammac tests/Mac Modern/Debug: https://github.com/xamarin/maccore/issues/2525,0
* xammac tests/Mac Modern/Release: https://github.com/xamarin/maccore/issues/2525,0
* xammac tests/Mac Modern/Release (all optimizations): https://github.com/xamarin/maccore/issues/2525,0
Is there a strongly typed `Delegate` property?,0
"We have APIs that expose this enum (and the one below), so if we uncomment this, then every consumer of those APIs will get this warning (and there's no way to fix them except ignoring the warning).",0
"I've created a separate PR with my changes, to not complicate this one too much: https://github.com/xamarin/xamarin-macios/pull/11400",0
"@emaf I implemented it a different way, please have a look again :)",0
There are no functional changes,0
The 32 failed tests show that something functional changed.,0
"but if you really feel strong about this, I can revert the contents",0
"Yes, please.",0
Just that it's never going to be refactored after this,0
"If you want to refactor code, do it in a separate PR, and make it as clear as possible (PR description / commit message) that there should only be no functional changes.",0
It's always much easier to review two (or more!) small PRs than a single big one.,0
"You're right, I didn't notice that the properties were required and the methods optional.",0
`theString` -> `string` to match all the other API.,0
/azp run,0
Same: two spaces before equals.,0
"I've checked the packages, and only the template packages (and nothing but template packages) has this in their nuspec:",0
The .lastrun files are wiped out on a git clean so xliff-tasks complains about translations being out of date even when they aren't.,0
"No, that's not quite right. The .lastrun files are used to know if the xliff-tasks should check if the translations are out of date, it doesn't determine if the translations actually are out of date.",0
"Looking at the source for xliff-tasks, when they check if a translation is out of date, they actually compare the documents: https://github.com/dotnet/xliff-tasks/blob/cc53f75b404500236364694ff514dcdee2427a94/src/XliffTasks/Model/XlfDocument.cs#L68-L200, but something obviously goes wrong and then that function says that the translation should be updated when it wasn't (because when you run with `/t:UpdateXlfOnBuild` no files are actually modified).",0
"This looks like a bug in the xliff-tasks, I suggest trying to create a small test case and report it to them (or use the small test case to track down the bug in xliff-tasks and just fix it).",0
"I wonder if Apple is going to ship these frameworks at all for the simulator... by the next beta this code should probably be made permanent, instead of checking for the exact Xcode product version.",0
Nitpick: `StringComparison.Ordinal` (below as well).,0
/azp run,0
Test failures are unrelated (both due to https://github.com/xamarin/maccore/issues/2414).,0
NRE if bundle is null (also might be worth checking for a disposed bundle using GetCheckedHandle if that's available for CFBundle).,0
Test failures are unrelated:,0
* monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2443,0
* Xtro/Mac: Fixed in #13271.,0
Nitpick: space between `string`and `ReaderParameters`.,0
"The change itself is fine, but should go in a different PR, it has nothing to do with sprite kit :smile:",0
Same,0
I think `GetLayoutAnchor` sounds better.,0
Test failures are unrelated:,0
* link all/Mac [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2557,0
* link all/Mac Catalyst [dotnet]/Release [dotnet]: https://github.com/xamarin/maccore/issues/2557,0
* xammac tests/Mac Modern/Release (all optimizations): https://github.com/xamarin/maccore/issues/2088,0
* Xtro/.NET:https://github.com/xamarin/maccore/issues/2552,0
"If I understand correctly, you're saying that we might end up duplicating assemblies that are only identical after stripping (but not before)?",0
"If so, I think you're right, but I'm not sure how often that would be the case (Xamarin.iOS.dll would still be different after stripping, but mscorlib.dll might not be).",0
In any case I don't think this PR changes the current behavior.,0
"It doesn't always make sense to use a nullable (sometimes an enum can be a better choice, in particular if the three states are not common, since the enum allows for a better description of each state), but we use it quite often.",0
"This is one scenario where we use it a lot (option not set, option set to true, option set to false).",0
Maybe put the condition on the target instead?,0
The managed names are `NSPasteboardTypeFileUrl` and `UTType.FileUrl`.,0
Test failures are unrelated,0
* introspection/Mac Catalyst/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2414,0
* monotouch-test/Mac [dotnet]/Debug (CoreCLR) [dotnet]: https://github.com/xamarin/maccore/issues/2488,0
* DotNet tests: fixed in #12334.,0
`extenion` => `extension`.,0
