"OrganizationLogin","RepositoryName","ReviewerLogin","HtmlUrl","Body"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4614#issuecomment-630747013","Well we can never fix up the Line numbers without a lot of work. I don't think it's worth the effort. 
While the two error messages was a nice idea , the fact that the IDE's may or may not show them in order is a problem. 

I'm now back to the idea of just fixing up the file path and adding a comment to say that the error might not have anything to do with that file and might be caused by other things. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6894#discussion_r843755711","Looking at the code I don't think we need this really. I'll be removing it"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3229#discussion_r295754586","`e.Data` can be null :( not sure if that will break anything."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6966#issuecomment-1110177386","we should ask @jonpryor if this is the right thing to do cos I have no idea :D"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4726#issuecomment-634592901","@jonathanpeppers I think we will need this on 16.7 I just did some tests on Windows with accented paths and files like `libraryprojectimports.cache` no longer work correctly. We get the following error

```
System.Xml.XmlException: Invalid character in the given encoding. Line 1, position 39.   at System.Xml.XmlTextReaderImpl.Throw(Exception e)   at System.Xml.XmlTextReaderImpl.Throw(String res, String arg)   at System.Xml.XmlTextReaderImpl.InvalidCharRecovery(Int32& bytesCount, Int32& charsCount)   at System.Xml.XmlTextReaderImpl.GetChars(Int32 maxCharsCount)   at System.Xml.XmlTextReaderImpl.ReadData()   at System.Xml.XmlTextReaderImpl.ParseText(Int32& startPos, Int32& endPos, Int32& outOrChars)   at System.Xml.XmlTextReaderImpl.FinishPartialValue()   at System.Xml.XmlTextReaderImpl.get_Value()   at System.Xml.Linq.XContainer.ReadContentFrom(XmlReader r)   at System.Xml.Linq.XContainer.ReadContentFrom(XmlReader r, LoadOptions o)   at System.Xml.Linq.XDocument.Load(XmlReader reader, LoadOptions options)   at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)   at System.Xml.Linq.XDocument.Load(String uri)   at Xamarin.Android.Tasks.ReadLibraryProjectImportsCache.RunTask()   at Xamarin.Android.Tasks.AndroidTask.Execute() | App1 |   |   |  
```

For some reason it is also missing the xml declaration at the top that might be related, but I'm not sure. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6273#discussion_r714666685","@jonathanpeppers I'm not sure why I've had to add this to this particular test. It was failing without it. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6014#issuecomment-863504467","@pjcollins I tested this branch in VSCode on Mac OS. I can still debug the MSBuild Task tests so this looks good to me :)"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6970#discussion_r864629351","This might also be useful for customers who want to profile their app I guess.

But I do wonder if there is a way we can enable this at built time somehow, so generate the java code which adds the Intent ."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2359#discussion_r229700421","I think this was done this way so we DONT create a directory if the assembly does not contain any of the embedded resource types.  But I'd have to go back and look at the history to figure out what the original intent was.. its probably a cut and paste thing
"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6135#issuecomment-891078669","> @dellis1972 I think it's working now.
> 
> So we'll have to merge monodroid (it will be broken temporarily), and then come back to this?

Correct."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2736#discussion_r256809339","so we are always adding this jar file? Is that going to impact any project which dont need it?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/787#discussion_r136608067","@jonpryor this is testing the old DesignTime build which should still be used on Mac/Linux. So we need to make sure we disable the new stuff. Remember we have to pass in `BuildingInsideVisualStudo` for the unit tests to get round that compiler issue."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4483#issuecomment-607721531","Those lock tests are not failing :/

We have 1 nuget failure `Could not find file ""/Users/runner/.local/share/NuGet/v3-cache/1ca707a4d90792ce8e42453d4e350886a0fdaa4d$ps:_api.nuget.org_v3_index.json/nupkg_xamarin.forms.2.3.4.231.dat"" ` 

And the windows build , I can't see why that failed 🤷‍♂ "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5250#discussion_r519672057","I would go with `.NET` now that I think about it. Since it will match the case of `Sdk=""Microsoft.NET.Sdk""`.
"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5926#issuecomment-859394678","@jonpryor found a slight hiccup with this, C# bindings often required `/unsafe`. As a result the project won't build by default because `/unsafe` is not set by default. So the question is should we set `/unsafe` automatically (if that is even possible)? Other options are rethink about the default for the `Bind` attribute, or just allow the project to fail and let the user set `/unsafe` manually."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5567#issuecomment-769832920","> Should we also change this to throw an exception for older API levels?
> 
> https://github.com/xamarin/androidtools/blob/b639c1ee85191193453b0bf436e816619737a2d9/Xamarin.AndroidTools/Devices/AndroidDeviceExtensions.cs#L63-L69

We don't even support anything less than API 19 now. So I'm not sure that fallback is even needed anymore, we should remove it and the `if` statement as well I think."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4113#discussion_r366824819","@pjcollins @kzu are we really pushing this to Nuget? Or is this to an internal pipelines feed?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/7021#discussion_r880578076","Should we include the RuntimeIdentifier in the Intermediate Path? Or will that just confuse things ?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6273#issuecomment-915950176","I'll see about adding the SmokeTest run of MSBuildDeviceIntegration to the windows smoke test run"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6643#discussion_r789492071","Does this file need to be added to `FileWrites` ? It will be deleted on the next build otherwise."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4453#discussion_r400803340","same here 

```
Condition="" '$(UsingAndroidNETSdk)' == 'True' ""
```"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/609#discussion_r199464771","This one is done
https://github.com/dellis1972/xamarin-android/blob/37f5ce86b359324752fc5375e360304c6a545572/src/monodroid/jni/monodroid-glue.c#L655
https://github.com/dellis1972/xamarin-android/blob/37f5ce86b359324752fc5375e360304c6a545572/src/monodroid/jni/monodroid-glue.c#L640
https://github.com/dellis1972/xamarin-android/blob/37f5ce86b359324752fc5375e360304c6a545572/src/monodroid/jni/monodroid-glue.c#L645"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3535#discussion_r318205372","should we care about the order of the `&&` here. C# will have an early out option in `if` statements, so the quickest check should be first in the list. We should probably try to remember that when reviewing code from here on :)

My guess is the BinarySearch will be faster than the `assembly.GetMetadata` call, correct?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3051#discussion_r282039935","TPN? not sure what that is an acronym for?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3066#discussion_r283469498","Should be fixed in https://github.com/xamarin/monodroid/pull/990"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5007#discussion_r470525394","So we have a few options. 

1. a hard break , users need to switch to the new defines for net5. (not desirable I think).
2. define the old `__` prefixed ones in net5..
3. define the new non prefixed ones in our product now as well as the old, but issue warnings the old are deprecated (if possible) to allow users to migrate. We can then phase our the old style.

Personally I would prefer option 3. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4686#issuecomment-632012741","The failing test does not seem to be an issue caused directly by this PR. 
Further investigation reviled an existing issue with incremental builds when using `Hybrid` AOT. 
Because `Hybrid` AOT calls the `CilStrip` task during the `_BuildApkEmbed` target it updates the assembly. The next build after than WILL cause `_GenerateJavaStubs` to run because the `dlls` are newer than the `stamp` files. 

While `_BuildApkEmbed` doesn't run in that scenario (and does with this new code). I believe we should try to alter the code so that `CilStrip` does NOT cause the next build to do work it doesn't not need to. So that should be fixed in a separate PR."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2315#discussion_r227334707","I've changed this over to use `ends_with` "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4349#discussion_r386977184","don't use log. here. it will lock up the UI thread (if someone decides to build in the UI). 
You should add a reference to the Xamarin.AsyncTask Nuget, and derive from that. Then use the LogMessage overloaded methods to log any data. It will marshal stuff back to the UI thread correctly"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2809#discussion_r264263503","Do we even need this since its not depending on `_BuildProGuard` anymore?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/927#discussion_r143724525","@fekberg we have a typo here

`IsNullorWitespace` vs `IsNullOrWitespace`"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2624#discussion_r248744848","I think we need to make this a LogCodedWarning if possible"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3653#discussion_r326855126","@radekdoulik why did we need to change the order? Is the order important?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2621#discussion_r248220273","I spoke with jonp about that. I think we should pick up any directBootAware. That means it will be forward compatible if google decide to add a new one. That said I need to also check the app element itself as well. I'll fix that up today."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3375#discussion_r312928611","LibZipSharp has been setup to use `lib64` see https://github.com/xamarin/LibZipSharp/blob/master/Native.cs#L414

So it has to be in that directory. What other files do we have in x64?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4360#discussion_r389596254","interesting trick :)"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4176#discussion_r371183123","Should we remove this? What happens if we get an error which we are not expecting? This would then bubble up to MSBuild and give a horrible MSxxxx error. Should we keep a generic error here which asked users to report the issue ?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/1573#discussion_r182998712","I did try, but shared projects do not seem to like the way we include stuff like the Linker code and the pdb stuff etc. It seems they don't like the items where we define a property for the path e.g.`$(MonoSourceFullPath)`.  I will have another go.. 

It might be worth splitting those items into a separate .targets file, since we never edit them anyway
"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3749#discussion_r333900276","It works :D"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3229#discussion_r295755182","not tempted to make this an SDK style project :P"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5188#discussion_r502415745","erring out with a non actionable error is probably not the best. Let's leave this as it is."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/7013#discussion_r877088043","again, this is based on the customer template. I'll remove this. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/1573#discussion_r190231088","I guess because `aapt` was ok with the old `permissionTree`, but the new `aapt2` is not. It reports them as invalid. 
I suspect google changed it at some point. not sure when. The old style does not even appear in the docs

[1] https://developer.android.com/guide/topics/manifest/permission-tree-element"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2287#discussion_r224526313","If we do, we should change all of them."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/754#discussion_r134767431","@jonpryor I took care of this on https://github.com/xamarin/xamarin-android/pull/754/files#diff-75caddb49a406bd996417c64cc1c00b1R275

"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6591#discussion_r874627241","I *think* (and @jonathanpeppers can correct me :) ) we tend to prefer that we explicitly define the dependencies in
`src/Xamarin.Android.Build.Tasks/Microsoft.Android.Sdk/targets/Microsoft.Android.Sdk.BuildOrder.targets` for .NET and `src/Xamarin.Android.Build.Tasks/Xamarin.Android.Legacy.targets` for Legacy. We can do this in addition to `DependsOnTargets` but it does help when figuring out the build order if we have it in the other files too.

This is for .NET 7+ only right? "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3375#discussion_r312929121","Also it makes it compatible with linux as well as that will look in `lib64` by default (if it exists)"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4414#discussion_r395582271","is there a way to conditionally import this I wonder. So only if `AndroidLinkTool == dx`."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2592#discussion_r250645935","can we add some inputs and outputs on this :)"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5987#discussion_r666342619","Order was not important. I just decided to put all the unit test adapters at the bottom."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3430#discussion_r312867987","@jonathanpeppers this code path is only used for `Android.IncludeAndroidResourcesFromAttribute`, `Android.NativeLibraryReferenceAttribute` and `Java.Interop.JavaLibraryReferenceAttribute` entries which are normally included in one of the Support Libraries. So we might have an attribute like

```
[assembly: Android.NativeLibraryReference (""ANDROID_NDK_PATH/platforms/android-29/arch-arm64/usr/lib/libEGL.so"")]
```

 Now I'm not sure if there are any of our support libraries which do use that but if there are and `AndroidNdkDirectory` is blank we might have a problem with the build later. We should probably add a unit test to make sure this works and/or raises a decent error message if `AndroidNdkDirectory` is blank and we hit one of these.

"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4626#discussion_r424554657","should this value be true? "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6323#discussion_r713699722","Do we want to use Linq here? We usually try to avoid it for performance reasons."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4190#discussion_r396385224","I think we do, because we want to skip the code underneath if we already added a file of the same name. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5304#issuecomment-887361020","@EmilAlipiev It takes a while for the latest release to get on to DevOps (assuming you are using the system installed XA on DevOps). As they have to update the image, tests it etc. 

Perhaps it might be better to use a tool like [boots](https://github.com/jonathanpeppers/boots) to install the specific version you want?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4422#discussion_r395188618",":+1 for `--banana`"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5095#discussion_r484954663","We already had a concept of `AdditionalResourcePaths` but did't have the same for assets. I figured this would be an easy win, especially if you have large assets (like movie files). "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3229#discussion_r295754407","Should we be using the `ManualResetEvent` stuff we have in https://github.com/xamarin/xamarin-android/blob/master/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks/Adb.cs#L217. Or are we sure we won't get any output after the `WaitForExit` call has completed?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2384#discussion_r230750030","@jonathanpeppers is `AppDomain` the right thing we need here?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4669#discussion_r423631000","Could we introduce an extension method which provides a `LogMessage(this LinkerContext context, string message)` extension. We could then remove a number of these `#if` blocks in the code. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6423#discussion_r738453291","have you sen all the translations use `.NET 5` not `6` ?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2841#discussion_r270348250","We tend to allow users to override the exe name from MSBuild e.g `Aapt2ToolExe` and them combine them in tool tasks like so
```
Path.Combine (ToolPath, string.IsNullOrEmpty (ToolExe) ? ToolName : ToolExe);
```

where `ToolName` will be the `OS.IsWindows ? ""aapt2.exe"" : ""aapt2""`. We should probably follow the same pattern here for `aapt2` and `adb`"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/668#discussion_r123743750","context see https://github.com/xamarin/xamarin-android/commit/0ca2c216b04c67ca0b1b6cf5d34580a4b26adac2

It has to do with how this works in XS. At some point the property was being reset even after it was set to 'true' so we could not rely on 'true' instead we needed to check for '' or 'false' . That commit should have included this file as well, but this was overlooked."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/1573#discussion_r189816875","actually I'll leave it in. That way our build process will make sure it works :)"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5563#discussion_r568176942","If its not actionable by the user, the `LogDebugMessage` might be better. `LogMessage` has a cost since it will emit in any build except quiet. Where the LogDebug* works only for diagnostic builds (and bin logs)"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2050#discussion_r209185702","I don't think so, this takes place after `_CreateBaseApk` and `_GenerateJavaStubs`, if there is a problem with the xml it will have been caught earlier in the build."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5604#discussion_r574612749","silly question, but does this need to be net6.0? or can it be netstandard2.1?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4948#issuecomment-663191981","I think we need input from @jonpryor as to what the expected behaviour is in this instance."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5071#discussion_r481228100","Should we mention `AndroidResouce` here? as its specific that that ItemGroup cannot contain those items. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6087#issuecomment-880773311","Oh and all the unit tests are going to have to change as well. Most are hardcoded to look for `{proj.PackageName}.apk` most of the time. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/704#discussion_r129785779","Not 100% sure this won't break VS2012 since I'm not sure if that IDE can load v4.5.1 assemblies (afaik VS2012 was released before v4.5.1 was out... I'm happy to be wrong though :) ). It will need testing."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/577#discussion_r113809303","Are we missing this file? I can't see it in the PR"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3066#discussion_r287364510","The fix above was merged"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/298#discussion_r88417133","does this need to be High? It means we will always how this regardless of the verbosity set.  We should be using Log.LogDebugMessage instead? This would mean it only shows up in diagnostic builds.
"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5926#discussion_r869647352","I did this to that it matches what was already there. I can rework this to use `PropertyGroup`. Or perhaps we get this in, and then do a PR to remove ALL `CreateProperty` references?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5114#discussion_r493616486","`src/java-runtime` will also need MSBuild tests I think and MSBuildDevice. This folder contains the release/debug runtimes. I don't think the apk tests will test debug/fastdev at all, so we might not get good coverage just running those tests."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4681#issuecomment-679052462","This was fixed in https://github.com/xamarin/android-sdk-installer/pull/452 so we can close this PR. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4614#issuecomment-622331612","So we should emit both then? I'll take a look at doing that.

"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4614#issuecomment-623447573","Hmm errors are 

```
TearDown : System.IO.IOException : The directory is not empty.
```"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4453#discussion_r397868681","yes something like `Xamarin.Android.ValidateToolng.targets` or `Xamarin.Android.ResolveTools.targets`. That is was I was envisioned, so its all kinda self contained. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2636#discussion_r279411585","We should probably test this with `AndroidUseManagedDesignTimeResourceGenerator` = `False` as well just to make sure we don't break anything in that mode too. Since some users do disable it."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3555#discussion_r318457481","should this be here or in DeviceTest? 


https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.Android.Build.Tests/Utilities/DeviceTest.cs#L19"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/4453#discussion_r400802860","Does this need to be conditionally imported?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3787#discussion_r334821925","can I assume that `r8` doesn't care if you have duplicate entries? What does it do about conflicting ones? Could we get in to a situation where a User ha a custom config, which turns on optimisations, but we then turn it off again?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6116#issuecomment-888210246","Ok Strong naming is needs to be added to 

`Java.Interop.Tools.Cecil`
`pdb2mdb`"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2051#discussion_r208970925","can we name the bool parameter please :) `overwrite: true` "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/1185#discussion_r170290249","the iOS/Mac tooling does not allow this to be overridable. I suspect this is by design so NetStandard Facades are never included in the output."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5890#issuecomment-839766636","Depends on https://github.com/xamarin/xamarin-android/pull/5926"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/2020#discussion_r206566693","in the case of ""unknown option"" there will be only one error we are interested in.
otherwise we get an error for each line of the following.

```
unknown option '--no-crunch'.

aapt2 link [options] -o arg --manifest arg files...

Options:
 -o arg                                            Output path.
 --manifest arg                                    Path to the Android manifest to build.
 -I arg                                            Adds an Android APK to link against.
 -A arg                                            An assets directory to include in the APK. These are unprocessed.
 -R arg                                            Compilation unit to link, using `overlay` semantics.
                                                   The last conflicting resource given takes precedence.
 --package-id arg                                  Specify the package ID to use for this app. Must be greater or equal to
                                                   0x7f and can't be used with --static-lib or --shared-lib.
 --java arg                                        Directory in which to generate R.java.
 --proguard arg                                    Output file for generated Proguard rules.
 --proguard-main-dex arg                           Output file for generated Proguard rules for the main dex.
 --proguard-conditional-keep-rules                 Generate conditional Proguard keep rules.
 --no-auto-version                                 Disables automatic style and layout SDK versioning.
 --no-version-vectors                              Disables automatic versioning of vector drawables. Use this only
                                                   when building with vector drawable support library.
 --no-version-transitions                          Disables automatic versioning of transition resources. Use this only
                                                   when building with transition support library.
 --no-resource-deduping                            Disables automatic deduping of resources with
                                                   identical values across compatible configurations.
 --enable-sparse-encoding                          Enables encoding sparse entries using a binary search tree.
                                                   This decreases APK size at the cost of resource retrieval performance.
 -x                                                Legacy flag that specifies to use the package identifier 0x01.
 -z                                                Require localization of strings marked 'suggested'.
 -c arg                                            Comma separated list of configurations to include. The default
                                                   is all configurations.
 --preferred-density arg                           Selects the closest matching density and strips out all others.
 --product arg                                     Comma separated list of product names to keep
 --output-to-dir                                   Outputs the APK contents to a directory specified by -o.
 --no-xml-namespaces                               Removes XML namespace prefix and URI information from
                                                   AndroidManifest.xml and XML binaries in res/*.
 --min-sdk-version arg                             Default minimum SDK version to use for AndroidManifest.xml.
 --target-sdk-version arg                          Default target SDK version to use for AndroidManifest.xml.
 --version-code arg                                Version code (integer) to inject into the AndroidManifest.xml if none is
                                                   present.
 --version-name arg                                Version name to inject into the AndroidManifest.xml if none is present.
 --shared-lib                                      Generates a shared Android runtime library.
 --static-lib                                      Generate a static Android library.
 --proto-format                                    Generates compiled resources in Protobuf format.
                                                   Suitable as input to the bundle tool for generating an App Bundle.
 --no-static-lib-packages                          Merge all library resources under the app's package.
 --non-final-ids                                   Generates R.java without the final modifier. This is implied when
                                                   --static-lib is specified.
 --stable-ids arg                                  File containing a list of name to ID mapping.
 --emit-ids arg                                    Emit a file at the given path with a list of name to ID mappings,
                                                   suitable for use with --stable-ids.
 --private-symbols arg                             Package name to use when generating R.java for private symbols.
                                                   If not specified, public and private symbols will use the application's
                                                   package name.
 --custom-package arg                              Custom Java package under which to generate R.java.
 --extra-packages arg                              Generate the same R.java but with different package names.
 --add-javadoc-annotation arg                      Adds a JavaDoc annotation to all generated Java classes.
 --output-text-symbols arg                         Generates a text file containing the resource symbols of the R class in
                                                   the specified folder.
 --auto-add-overlay                                Allows the addition of new resources in overlays without
                                                   <add-resource> tags.
 --rename-manifest-package arg                     Renames the package in AndroidManifest.xml.
 --rename-instrumentation-target-package arg       Changes the name of the target package for instrumentation. Most useful
                                                   when used in conjunction with --rename-manifest-package.
 -0 arg                                            File extensions not to compress.
 --warn-manifest-validation                        Treat manifest validation errors as warnings.
 --split arg                                       Split resources matching a set of configs out to a Split APK.
                                                   Syntax: path/to/output.apk:<config>[,<config>[...]].
                                                   On Windows, use a semicolon ';' separator instead.
 -v                                                Enables verbose logging.
 -h                                                Displays this help menu
```"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6427#issuecomment-1010162235","For reference some performance differences https://gist.github.com/dellis1972/f5a9c9475dadea1331c6c62b1a478cd8 for .net 6"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5130#discussion_r490862981","I thought part of the problem was that nodes are reused? Won't this stop that from happening?"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3713#discussion_r333383208","@radekdoulik I just realised these tests need a device right? 
So they are in the wrong project. The should be in the `MSBuildDeviceIntegration` project in `tests/MSBuildDeviceIntegration` where we have all the device based tests. 

It should also make use of the `HasDevices` property and `Ignore` the test if we don't have any devices attached.
For example https://github.com/xamarin/xamarin-android/blob/master/tests/MSBuildDeviceIntegration/Tests/InstallTests.cs#L233"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/5926#issuecomment-847230312","I need to make changes to this anyway to make sure the new targets do not run as part of a DTB."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3025#discussion_r278924194","You can confirm this by looking at the Ids in the Rtxt file contents https://github.com/xamarin/xamarin-android/pull/3025/files#diff-8649defe4caffc0b9f604d92c1ad8808R78. These ids were generated by aapt2 on the same resource structure. I also included a test to make sure we produce the same results from the Rtxt as well."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6390#issuecomment-943840252","This seems to work

```xml
  <Target Name=""Test"">
    <Message Text=""$([System.IO.Path]::DirectorySeparatorChar)"" />
  </Target>
```

So we might be able to setup a property which contains `DirectorySeparatorChar` so its not all `/` "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3860#discussion_r354250979","nice :) I could have used this in #3938"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/3964#discussion_r351206867","The `Install` target only calls build if we are running from the command line. In the IDE is does NOT call `Build`. Our tests run as if they are in the IDE, so a call to Build will be needed."
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6087#issuecomment-880772523","> Conceptually, `$(AndroidPackageFormat)` + `$(AndroidAdditionalPackageFormats)` feels ""weird"": it's inconsistent with other existing properties, such as `$(TargetFrameworks)`, `$(RuntimeIdentifiers)`.
> Is there a reason to not go with `$(AndroidPackageFormats)` (plural)? Is it easier for the IDE to have the two separate properties?

We have many MSBuild Properties which rely on an it being one or the other for example (and this is just a small example).

```
<AndroidUseAapt2            Condition="" '$(AndroidPackageFormat)' == 'aab' "">True</AndroidUseAapt2>
<AndroidUseApkSigner        Condition="" '$(AndroidPackageFormat)' == 'aab' "">False</AndroidUseApkSigner>
<AndroidCreatePackagePerAbi Condition="" '$(AndroidCreatePackagePerAbi)' == 'aab' "">False</AndroidCreatePackagePerAbi>
...

<_BuildApkEmbedOutputs Condition="" '$(AndroidPackageFormat)' == 'aab' "">
<_BuildApkEmbedOutputs Condition="" '$(AndroidPackageFormat)' != 'aab' "">
```

Also take a look at our current signing system. https://github.com/xamarin/xamarin-android/blob/main/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L2287

Its pretty messy. and depends on if we are signing with ApkSigner or not. `aab` files MUST use ApkSigner, `apk` MUST not. 

Now I'm not saying that we don't need to rework this because its clear that we do. However, the approach in this PR seemed like the most straight forward given the time constraints for this feature. Tacking on the additional apk generation for this specific case i.e when the user is in release mode and are generating an `aab`.

As we talked about on the meeting, we could just make `AndroidAdditionalPackageFormats` internal. So not something users would use, but it would be automatic if they are using .net 6 AND `aab` And `Release`.


> I wonder how much larger it would be, though…. Could we make it work with an ""inner build""-like system?

my concern with inner builds are performance, the fact that we (in .net 6) have to do an inner build for each abi already, adding yet another one for packaging/signing, then in the future more for Dynamic Features. I'd rather avoid those if possible. But it might well be our only option.

So I guess the question really is, how quickly do we want this? Should we do it fast or right? 


"
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/6139#issuecomment-890925682","This looks good so far. I like how we still raise `XA0003` if the value is not an `int`. "
"xamarin","xamarin-android","dellis1972","https://github.com/xamarin/xamarin-android/pull/793#discussion_r135767624","@atsushieno looks like this bit is using spaces rather than tabs. I think @jonpryor likes to keep the formatting similar to the sourounding code."